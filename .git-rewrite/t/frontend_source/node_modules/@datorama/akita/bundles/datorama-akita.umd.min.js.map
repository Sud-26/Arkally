{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@datorama/akita/src/isArray.ts","ng://@datorama/akita/src/isEmpty.ts","ng://@datorama/akita/src/toEntitiesObject.ts","ng://@datorama/akita/src/hasEntity.ts","ng://@datorama/akita/src/activeState.ts","ng://@datorama/akita/src/setEntities.ts","ng://@datorama/akita/src/actions.ts","ng://@datorama/akita/src/config.ts","ng://@datorama/akita/src/deepFreeze.ts","ng://@datorama/akita/src/dispatchers.ts","ng://@datorama/akita/src/env.ts","ng://@datorama/akita/src/errors.ts","ng://@datorama/akita/src/isNil.ts","ng://@datorama/akita/src/isDefined.ts","ng://@datorama/akita/src/isFunction.ts","ng://@datorama/akita/src/toBoolean.ts","ng://@datorama/akita/src/isPlainObject.ts","ng://@datorama/akita/src/root.ts","ng://@datorama/akita/src/storeConfig.ts","ng://@datorama/akita/src/stores.ts","ng://@datorama/akita/src/transaction.ts","ng://@datorama/akita/src/store.ts","ng://@datorama/akita/src/isObject.ts","ng://@datorama/akita/src/getActiveEntities.ts","ng://@datorama/akita/src/addEntities.ts","ng://@datorama/akita/src/coerceArray.ts","ng://@datorama/akita/src/removeEntities.ts","ng://@datorama/akita/src/getInitialEntitiesState.ts","ng://@datorama/akita/src/updateEntities.ts","ng://@datorama/akita/src/isUndefined.ts","ng://@datorama/akita/src/entityActions.ts","ng://@datorama/akita/src/defaultIDKey.ts","ng://@datorama/akita/src/entityStore.ts","ng://@datorama/akita/src/queryConfig.ts","ng://@datorama/akita/src/isString.ts","ng://@datorama/akita/src/query.ts","ng://@datorama/akita/src/compareKeys.ts","ng://@datorama/akita/src/sortByOptions.ts","ng://@datorama/akita/src/sort.ts","ng://@datorama/akita/src/entitiesToArray.ts","ng://@datorama/akita/src/entitiesToMap.ts","ng://@datorama/akita/src/getEntity.ts","ng://@datorama/akita/src/arrayFind.ts","ng://@datorama/akita/src/queryEntity.ts","ng://@datorama/akita/src/mapSkipUndefined.ts","ng://@datorama/akita/src/filterNil.ts","ng://@datorama/akita/src/getValueByString.ts","ng://@datorama/akita/src/setValueByString.ts","ng://@datorama/akita/src/persistState.ts","ng://@datorama/akita/src/snapshotManager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginatorPlugin.ts","ng://@datorama/akita/src/plugins/persistForm/persistNgFormPlugin.ts","ng://@datorama/akita/src/captialize.ts","ng://@datorama/akita/src/devtools.ts","ng://@datorama/akita/src/plugins/entityCollectionPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/stateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/entityStateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/dirtyCheckPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/entityDirtyCheckPlugin.ts","ng://@datorama/akita/src/runStoreAction.ts","ng://@datorama/akita/src/arrayUpdate.ts","ng://@datorama/akita/src/arrayAdd.ts","ng://@datorama/akita/src/entityService.ts","ng://@datorama/akita/src/guid.ts","ng://@datorama/akita/src/toEntitiesIds.ts","ng://@datorama/akita/src/resetStores.ts","ng://@datorama/akita/src/isNumber.ts","ng://@datorama/akita/src/arrayUpsert.ts","ng://@datorama/akita/src/arrayRemove.ts","ng://@datorama/akita/src/not.ts","ng://@datorama/akita/src/fp.ts","ng://@datorama/akita/src/cacheable.ts","ng://@datorama/akita/src/combineQueries.ts","ng://@datorama/akita/src/setLoading.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isArray","isEmpty","arr","toEntitiesObject","entities","idKey","preAddEntity","acc","ids","entities_1","tslib_1.__values","entities_1_1","current","hasEntity","id","hasActiveState","state","isMultiActiveState","active","resolveActiveEntity","_a","getExitingActives","currentActivesIds","newIds","filtered","filter","indexOf","isEntityState","applyMiddleware","mapped","_b","keys","_c","setEntities","newEntities","isNativePreAdd","resolve","map","isNaN","Number","newState","loading","currentAction","type","entityIds","skip","customActionActive","resetCustomAction","logAction","setAction","setSkipAction","action","propertyKey","descriptor","originalMethod","args","_i","CONFIG","resettable","ttl","getAkitaConfig","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","prop","isFrozen","$$deleteStore","Subject","$$addStore","ReplaySubject","$$updateStore","dispatchDeleted","storeName","dispatchAdded","dispatchUpdate","isDev","__DEV__","exports","tslib_1.__extends","Error","AkitaError","message","_super","isNil","v","undefined","isDefined","val","isFunction","toBoolean","isPlainObject","name","isBrowser","window","isNotBrowser","configKey","global","__runtimeVersion","__stores__","__queries__","$$stores","$$queries","transactionFinished","transactionInProcess","BehaviorSubject","transactionManager","activeTransactions","batchTransaction","startBatch","isTransactionInProcess","endBatch","complete","commit","asObservable","of","applyTransaction","thisArg","transaction","_this","Store","setLoading","_value","_setState","setHasCache","hasCache","options","restartTTL","cache","ttlConfig","getCacheTTL","clearTimeout","setTimeout","getValue","storeValue","setError","_select","project","store","pipe","distinctUntilChanged","_cache","config","deepFreezeFn","newStateFn","_dispatchAction","handleTransaction","dispatch","reset","isResettable","_initialState","console","warn","update","stateOrCallback","merged","akitaPreUpdate","updateStoreConfig","newOptions","_","nextState","ngOnDestroy","destroy","hmrEnabled","onInit","initialState","assertStoreHasName","className","watchTransaction","subscribe","inTransaction","cacheConfig","isObject","getActiveEntities","idOrOptions","currentActive","result","wrap","currentIdIndex","prev","isFirst","isLast","addEntities","hasNewEntities","entity","entityId","prepend","unshift","coerceArray","removeEntities","removeAllEntities","_d","includes","getInitialEntitiesState","updateEntities","idToUpdate","newStateOrFn","preUpdateEntity","updatedEntities","isUpdatingIdKey","ids_1","ids_1_1","oldEntity","isIdChanged","newEntity","updatedIds","stateEntities","id_1","_e","__rest","getOwnPropertySymbols","isUndefined","Set","Add","Update","Remove","DEFAULT_ID_KEY","EntityStore","entityActions","set","akitaPreAddEntity","hasInitialUIState","handleUICreation","EntityActions","add","collection","data","idsOrFnOrState","akitaPreUpdateEntity","upsert","predicate","isUpdate","toArray","isClassBased","baseClass","updateIds","withId","upsertMany","addedIds","withPreCheckHook","akitaPreCheckEntity","nextId","withHook","hasUIStore","replace","replaced","toArray_1","toArray_1_1","move","from","to","slice","splice","remove","idsOrFn","idPassed","handleUIRemove","updateActive","newStateOrCallback","setActive","_setActive","addActive","every","uniques","removeActive","some","currentId","toggleActive","filterExists","createUIStore","storeConfig","defaults","ui","EntityUIStore","nextEntity","createFn","isFunc","_akitaCreateEntityFn","uiEntities","tslib_1.__decorate","T","setInitialEntityState","queryConfigKey","isString","Query","select","mapFn","compareKeys","keysOrFuncs","prevState","currState","isFns","keyOrFunc","func","reduce","k","selectLoading","selectError","selectHasCache","getHasCache","__store__","sortByOptions","sortBy","sortByOrder","ASC","DESC","compareValues","order","Order","a","varA","toUpperCase","varB","comparison","entitiesToArray","filterBy","limitTo","fn","_sortBy_1","sort","Math","min","entitiesToMap","hasLimit","count","length_1","finalLength","getEntity","find","idsOrPredicate","collection_1","collection_1_1","toSet","collection_2","collection_2_1","has","distinctUntilArrayItemChanged","prevCollection","currentCollection","hasChange","first","second","currentItem","prevItem","QueryEntity","selectAll","asObject","getAll","selectMany","mapSkipUndefined","callbackFn","index","array","selectEntity","idOrPredicate","findEntityByPredicate","selectActiveId","getActiveId","selectActive","getActive","switchMap","activeId","selectCount","getCount","selectLast","selectAt","selectFirst","selectEntityAction","selectEntityAction$","ac","projectOrIds","hasActive","createUIQuery","EntityUIQuery","filterNil","source","obj","split","join","part","setValue","lastIndex","skipStorageUpdate","_persistStateInit","setSkipStorageUpdate","getSkipStorageUpdate","observify","asyncOrValue","isPromise","then","isObservable","SnapshotManager","getStoresSnapshot","stores","setStoresSnapshot","normalizedStores","JSON","parse","snapshotManager","AkitaPlugin","getQuery","query","getStore","isEntityBased","selectSource","property","withStoreName","getSource","updateStore","onReset","original","params","resetFn","paginatorDefaults","pagesControls","range","startWith","cacheTimeout","clearStoreWithCache","PaginatorPlugin","page","pagination","currentPage","lastPage","withControls","withRange","response","addPage","pages","clearCache","initial","clearStore","Map","clearPage","delete","clearCacheSubscription","unsubscribe","setPage","isPageActive","hasPage","nextPage","prevPage","setLastPage","setFirstPage","getPage","req","selectPage","refreshCurrentPage","getFrom","perPage","getTo","total","take","get","pageControls","generatePages","len","ceil","isLoading$","delay","Paginator","PersistNgFormPlugin","setForm","form","builder","activate","isKeyBased","initialValue","factoryFnOrPath","stateKey","formArray","controls","cleanArray","insert","patchValue","emitEvent","formKey","control","removeAt","resolveInitialValue","formValue","root","factory_1","arrControlFactory","path","isRootKeys","formChanges","valueChanges","debounceTime","capitalize","charAt","subs","EntityCollectionPlugin","removeEntity","createEntity","plugin","getIds","resolvedIds","rebase","actions","beforeAdd","instantiatePlugin","afterAdd","beforeRemove","_ids","selectIds","forEachId","cb","StateHistoryPlugin","_hasPast$","_hasFuture$","history","past","future","watchProperty","updateHasHistory","hasFutureSubject","hasFuture","hasPastSubject","hasPast","present","_entityId","subscription","pairwise","shouldUpdate","comparator","skipUpdate","maxAge","undo","previous","redo","newFuture","jumpToPast","newPast","newPresent","jumpToFuture","jump","clear","customUpdateFn","clearHistory","ignoreNext","action$$1","EntityStateHistoryPlugin","dirtyCheckDefaultParams","head","stringify","getNestedPath","nestedObj","DirtyCheckPlugin","currentValue","updateFn","_reset","setHead","_getHead","updateDirtiness","isDirty","dirty","hasHead","getHead","isPathDirty","currentPathValue","headPathValue","__akitaKey","combineLatest","currentState","isChange","compareTo","getWatchedValues","watched","isDirty$","reset$","watchProp","EntityDirtyCheckPlugin","_someDirty","someDirty","checkSomeDirty","entitiesIds","entitiesIds_1","entitiesIds_1_1","someDirty$","merge","auditTime","AddEntities","SetEntities","UpdateEntities","RemoveEntities","UpsertEntities","arrayUpdate","keyOrRoot","predicateOrIds","condition","item","arrayAdd","addFn","withTransaction","tap","StoreConfig","QueryConfig","akitaConfig","persistState","enableInNonBrowser","storage","localStorage","deserialize","serialize","include","exclude","persistOnDestroy","preStorageUpdate","preStoreUpdate","preStorageUpdateOperator","includeStores","hasInclude","hasExclude","fns","subscriptions","buffer","isLocalStorage","sessionStorage","getItem","storageState","save","storeCache","setItem","_save","shift","Promise","setInitial","selectPersistStateInit","akitaDevtools","ngZoneOrOptions","__REDUX_DEVTOOLS_EXTENSION__","run","shallow","storesWhitelist","devTools","connect","appState","isAllowed","send","normalize","msg","logTrace","group","trace","groupEnd","sortAlphabetically","sortedAppState","payload","init","rootState_1","guid","random","toString","toEntitiesIds","resetStores","stores_1","stores_1_1","isNumber","parseFloat","enableAkitaProdMode","runStoreAction","StoreActions","arrayUpsert","entityIsObject","arrayFind","arrayRemove","identifier","identifiers","filterFn","not","pred","createEntityQuery","createEntityStore","createQuery","createStore","cacheable","request$","emitNext","EMPTY","combineQueries","observables","defer","finalize"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// @internal\nexport function isArray<T>(value: any): value is T[] {\n  return Array.isArray(value);\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isEmpty<T>(arr: T) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n","import { PreAddEntity } from './types';\n\n// @internal\nexport function toEntitiesObject<E>(entities: E[], idKey: string, preAddEntity: PreAddEntity<E>) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n\n  return acc;\n}\n","import { EntityState, ID } from './index';\n\n// @internal\nexport function hasEntity<E>(entities: EntityState<E>, id: ID) {\n  return entities.hasOwnProperty(id);\n}\n","import { ActiveState, EntityState, ID, IDS, MultiActiveState } from './types';\nimport { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n\n// @internal\nexport function hasActiveState<E>(state: EntityState<E>): state is EntityState<E> & (ActiveState | MultiActiveState) {\n  return state.hasOwnProperty('active');\n}\n\n// @internal\nexport function isMultiActiveState(active: IDS): active is ID[] {\n  return isArray(active);\n}\n\n// @internal\nexport function resolveActiveEntity<E>({ active, ids, entities }: EntityState<E> & (ActiveState | MultiActiveState)) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n\n  return active;\n}\n\n// @internal\nexport function getExitingActives(currentActivesIds: ID[], newIds: ID[]) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n\n  return filtered;\n}\n","import { Entities, EntityState, HashMap, ID, PreAddEntity } from './types';\nimport { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n\nexport type SetEntities<Entity> = Entity[] | Entities<Entity> | HashMap<Entity>;\n\nexport type SetEntitiesParams<State, Entity> = {\n  state: State;\n  entities: SetEntities<Entity>;\n  idKey: string;\n  preAddEntity: PreAddEntity<Entity>;\n  isNativePreAdd?: boolean;\n};\n\n// @internal\nexport function isEntityState<Entity>(state): state is Entities<Entity> {\n  return state.entities && state.ids;\n}\n\n// @internal\nfunction applyMiddleware<E>(entities: HashMap<E>, preAddEntity: PreAddEntity<E>) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n}\n\n// @internal\nexport function setEntities<S extends EntityState<E>, E>({ state, entities, idKey, preAddEntity, isNativePreAdd }: SetEntitiesParams<S, E>): S {\n  let newEntities: HashMap<E>;\n  let newIds: ID[];\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => (isNaN(id as any) ? id : Number(id)));\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState as any);\n  }\n\n  return newState;\n}\n","export const currentAction = {\n  type: null,\n  entityIds: null,\n  skip: false\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?) {\n  setAction(type, entityIds);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n  ttl?: number;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false,\n  ttl: null\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n","// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { ReplaySubject, Subject } from 'rxjs';\n\n// @internal\nexport const $$deleteStore = new Subject<string>();\n// @internal\nexport const $$addStore = new ReplaySubject<string>(50, 5000);\n// @internal\nexport const $$updateStore = new Subject<string>();\n\n// @internal\nexport function dispatchDeleted(storeName: string) {\n  $$deleteStore.next(storeName);\n}\n\n// @internal\nexport function dispatchAdded(storeName: string) {\n  $$addStore.next(storeName);\n}\n\n// @internal\nexport function dispatchUpdate(storeName: string) {\n  $$updateStore.next(storeName);\n}\n","export let __DEV__ = true;\n\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n","// @internal\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n// @internal\nexport function assertStoreHasName(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function isDefined(val: any) {\n  return isNil(val) === false;\n}\n","// @internal\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","// @internal\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import { toBoolean } from './toBoolean';\n\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n","export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\nexport const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined';\n","export type StoreConfigOptions = {\n  name: string;\n  resettable?: boolean;\n  cache?: { ttl: number };\n  deepFreezeFn?: (o: any) => any;\n  idKey?: string;\n};\n\nexport type UpdatableStoreConfigOptions = {\n  cache?: { ttl: number };\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { Store } from './store';\nimport { isDev } from './env';\nimport { isBrowser } from './root';\nimport { Query } from './query';\n\n// @internal\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\n// @internal\nexport const __queries__: { [storeName: string]: Query<any> } = {};\n\nif (isBrowser && isDev()) {\n  (window as any).$$stores = __stores__;\n  (window as any).$$queries = __queries__;\n}\n","import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { resetCustomAction, setAction } from './actions';\nimport { getAkitaConfig } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { __DEV__, isDev } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey, StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { toBoolean } from './toBoolean';\nimport { commit, isTransactionInProcess } from './transaction';\nimport { StoreCache, UpdateStateCallback } from './types';\n\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport class Store<S = any> {\n  private store: BehaviorSubject<Readonly<S>>;\n  private storeValue: S;\n  private inTransaction = false;\n  private _initialState: S;\n  protected cache: StoreCache = {\n    active: new BehaviorSubject<boolean>(false),\n    ttl: null\n  };\n\n  constructor(initialState: Partial<S>, protected options: Partial<StoreConfigOptions> = {}) {\n    this.onInit(initialState as S);\n  }\n\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && setAction('Set Loading');\n      this._setState(state => ({ ...state, loading } as S & { loading: boolean }));\n    }\n  }\n\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache: boolean, options: { restartTTL: boolean } = { restartTTL: false }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = <any>setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && setAction('Set Error');\n      this._setState(state => ({ ...state, error } as S & { error: any }));\n    }\n  }\n\n  // @internal\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store.asObservable().pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  // @internal\n  _value(): S {\n    return this.storeValue;\n  }\n\n  // @internal\n  _cache(): BehaviorSubject<boolean> {\n    return this.cache.active;\n  }\n\n  // @internal\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey] || {};\n  }\n\n  // @internal\n  get storeName() {\n    return (this.config as StoreConfigOptions & { storeName: string }).storeName || (this.options as StoreConfigOptions & { storeName: string }).storeName || this.options.name;\n  }\n\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n\n  // @internal\n  _setState(newStateFn: (state: Readonly<S>) => S, _dispatchAction = true) {\n    this.storeValue = __DEV__ ? this.deepFreeze(newStateFn(this._value())) : newStateFn(this._value());\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    } else {\n      isDev() && console.warn(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   *\n   * Update the store's value\n   *\n   * @example\n   *\n   * this.store.update(state => {\n   *   return {...}\n   * })\n   */\n  update(stateCallback: UpdateStateCallback<S>);\n  /**\n   *\n   * @example\n   *\n   *  this.store.update({ token: token })\n   */\n  update(state: Partial<S>);\n  update(stateOrCallback: Partial<S> | UpdateStateCallback<S>) {\n    isDev() && setAction('Update');\n\n    this._setState(state => {\n      const newState = isFunction(stateOrCallback) ? stateOrCallback(state) : stateOrCallback;\n      const merged = this.akitaPreUpdate(state, { ...state, ...newState } as S);\n      return isPlainObject(state) ? merged : new (state as any).constructor(merged);\n    });\n  }\n\n  updateStoreConfig(newOptions: UpdatableStoreConfigOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  // @internal\n  akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S {\n    return nextState;\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? (window as any).hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n    }\n  }\n\n  private onInit(initialState: S) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n\n  private dispatch(state: S, _dispatchAction = true) {\n    this.store.next(state);\n    if (_dispatchAction) {\n      dispatchUpdate(this.storeName);\n      resetCustomAction();\n    }\n  }\n\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n\n  private isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private getCacheTTL() {\n    return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;\n  }\n}\n","// @internal\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n","import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n","import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function coerceArray<T>(value: T | T[]): T[] {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n","import { EntityState, ID, StateWithActive } from './types';\nimport { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n\nexport type RemoveEntitiesParams<State, Entity> = {\n  state: StateWithActive<State>;\n  ids: any[];\n};\n\n// @internal\nexport function removeEntities<S extends EntityState<E>, E>({ state, ids }: RemoveEntitiesParams<S, E>): S {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n}\n\n// @internal\nexport function removeAllEntities<S>(state: StateWithActive<S>): S {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n","import { EntityState } from './index';\n\n// @internal\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n","import { EntityState, ID, PreUpdateEntity, UpdateStateCallback } from './types';\nimport { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n\nexport type UpdateEntitiesParams<State, Entity> = {\n  state: State;\n  ids: any[];\n  idKey: string;\n  newStateOrFn: UpdateStateCallback<Entity> | Partial<Entity> | Partial<State>;\n  preUpdateEntity: PreUpdateEntity<Entity>;\n};\n\n// @internal\nexport function updateEntities<S extends EntityState<E>, E>({ state, ids, idKey, newStateOrFn, preUpdateEntity }: UpdateEntitiesParams<S, E>) {\n  const updatedEntities = {};\n\n  let isUpdatingIdKey = false;\n  let idToUpdate: ID;\n\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n\n    const oldEntity = state.entities[id];\n    const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;\n\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity: E;\n    idToUpdate = id;\n\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n\n    const merged = {\n      ...oldEntity,\n      ...newState\n    };\n\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new (oldEntity as any).constructor(merged);\n      } else {\n        newEntity = new (newState as any).constructor(merged);\n      }\n    }\n\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const { [id]: deletedEntity, ...rest } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n  }\n\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities\n    },\n    ids: updatedIds\n  };\n}\n","// @internal\nexport function isUndefined(value: any): value is undefined {\n  return value === undefined;\n}\n","export enum EntityActions {\n  Set,\n  Add,\n  Update,\n  Remove\n}\n\nexport interface EntityAction<IDType> {\n  type: EntityActions;\n  ids: IDType[];\n}\n","export const DEFAULT_ID_KEY = 'id';\n","import { isEmpty } from './isEmpty';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { Constructor, EntityState, EntityUICreateFn, ID, IDS, OrArray, StateWithActive, UpdateEntityPredicate, UpdateStateCallback, getEntityType, getIDType } from './types';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { removeEntities } from './removeEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { isDefined } from './isDefined';\nimport { updateEntities } from './updateEntities';\nimport { transaction } from './transaction';\nimport { isNil } from './isNil';\nimport { isFunction } from './isFunction';\nimport { isUndefined } from './isUndefined';\nimport { StoreConfigOptions } from './storeConfig';\nimport { logAction, setAction } from './actions';\nimport { isDev } from './env';\nimport { hasEntity } from './hasEntity';\nimport { Observable, Subject } from 'rxjs';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$(): Observable<EntityAction<IDType>> {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n    this._setState(state =>\n      setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd\n      })\n    );\n\n    this.setHasCache(true, { restartTTL: true });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter(id => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n    this._setState(state =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn\n      })\n    );\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true })\n   * store.upsert([2, 3], { active: true })\n   * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))\n   *\n   */\n  @transaction()\n  upsert(ids: OrArray<IDType>, newState: Partial<EntityType> | EntityType | UpdateStateCallback<EntityType> | EntityType[], options: { baseClass?: Constructor } = {}) {\n    const toArray = coerceArray(ids);\n    const predicate = isUpdate => id => hasEntity(this.entities, id) === isUpdate;\n    const isClassBased = isFunction(options.baseClass);\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map(id => {\n      let entity = isFunction(newState) ? newState({} as EntityType) : newState;\n      const withId = { ...(entity as EntityType), [this.idKey]: id };\n      if (isClassBased) {\n        return new options.baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds as any, newState as any);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState(state => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities\n      },\n      loading: !!options.loading\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    let replaced = {};\n    for (const id of toArray) {\n      newState[this.idKey] = id;\n      replaced[id] = newState;\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState(state => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced\n      }\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState(state => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities\n      },\n      ids\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter(entityId => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n    if (ids === null) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : (SetActiveOptions | S['active']));\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every(id => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState(state => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some(id => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState(state => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter(currentId => toArray.indexOf(currentId) === -1) : null\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = remove => id => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState(state => {\n      return {\n        ...state,\n        active: ids\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = id => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter(id => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n","import { Order } from './sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","// @internal\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { isFunction } from './isFunction';\n\nexport function compareKeys<T>(keysOrFuncs: any[]) {\n  return function <T>(prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if(isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n","// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || (config && config.sortBy);\n  options.sortByOrder = options.sortByOrder || (config && config.sortByOrder);\n}\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\n// @internal\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","import { EntityState, SelectOptions } from './types';\nimport { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n","import { EntityState } from './types';\nimport { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToMap<S extends EntityState<E>, E>(state: S, options) {\n  const map = {};\n  const { filterBy, limitTo } = options;\n  const { ids, entities } = state;\n\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n\n  return map;\n}\n","import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\nimport { ItemPredicate } from './types';\n\n// @internal\nexport function findEntityByPredicate<E>(predicate: ItemPredicate<E>, entities) {\n    for(const entityId of Object.keys(entities)) {\n      if(predicate(entities[entityId]) === true) {\n        return entityId;\n      }\n    }\n\n    return undefined;\n}\n\n// @internal\nexport function getEntity( id, project ) {\n  return function(entities) {\n    const entity = entities[id];\n\n    if(isUndefined(entity)) {\n      return undefined;\n    }\n\n    if(!project) {\n      return entity;\n    }\n\n    if(isString(project)) {\n      return entity[project];\n    }\n\n    return (project as Function)(entity);\n  };\n\n}\n","import { ID, IDS, ItemPredicate } from './types';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { isArray } from './isArray';\nimport { isFunction } from './isFunction';\nimport { isEmpty } from './isEmpty';\n\n// @internal\nexport function find<T>(collection: T[], idsOrPredicate: IDS | ItemPredicate, idKey: string) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n\n  return result;\n}\n\n// @internal\nexport function distinctUntilArrayItemChanged<T>(): MonoTypeOperatorFunction<T[]> {\n  return distinctUntilChanged((prevCollection: T[], currentCollection: T[]) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n\n    if (isArray(prevCollection) === false || isArray(currentCollection) === false) {\n      return false;\n    }\n\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n\n    // if item is new in the current collection but not exist in the prev collection\n    const hasNewItem = hasChange(currentCollection, prevCollection);\n\n    if (hasNewItem) {\n      return false;\n    }\n\n    const isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);\n\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\n\n// @internal\nfunction hasChange<T>(first: T[], second: T[]) {\n  const hasChange = second.some(currentItem => {\n    const oldItem = first.find(prevItem => prevItem === currentItem);\n    return oldItem === undefined;\n  });\n\n  return hasChange;\n}\n\n/**\n * Find items in a collection\n *\n * @example\n *\n *  selectEntity(1, 'comments').pipe(\n *   arrayFind(comment => comment.text = 'text')\n * )\n */\nexport function arrayFind<T>(ids: ItemPredicate<T>, idKey?: never): (source: Observable<T[]>) => Observable<T[]>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind(3)\n * )\n */\nexport function arrayFind<T>(ids: ID, idKey?: string): (source: Observable<T[]>) => Observable<T>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind([1, 2, 3])\n * )\n */\nexport function arrayFind<T>(ids: ID[], idKey?: string): (source: Observable<T[]>) => Observable<T[]>;\nexport function arrayFind<T>(idsOrPredicate: ID[] | ID | ItemPredicate<T>, idKey?: string): (source: Observable<T[]>) => Observable<T[] | T> {\n  return function(source: Observable<T[]>) {\n    return source.pipe(\n      map((collection: T[] | undefined | null) => {\n        // which means the user deleted the root entity or set the collection to nil\n        if (isArray(collection) === false) {\n          return collection;\n        }\n        return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n      }),\n      distinctUntilArrayItemChanged(),\n      map(value => {\n        if (isArray(value) === false) {\n          return value;\n        }\n\n        if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n          return value;\n        }\n\n        return value[0];\n      })\n    );\n  };\n}\n","import { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { isDefined } from './isDefined';\nimport { EntityStore } from './entityStore';\nimport { Query } from './query';\nimport { EntityState, HashMap, ID, ItemPredicate, OrArray, SelectOptions, getEntityType, getIDType } from './types';\nimport { isFunction } from './isFunction';\nimport { toBoolean } from './toBoolean';\nimport { sortByOptions } from './sortByOptions';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nimport { isArray } from './isArray';\nimport { isNil } from './isNil';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { isUndefined } from './isUndefined';\nimport { QueryConfigOptions } from './queryConfig';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { mapSkipUndefined } from './mapSkipUndefined';\n\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity<S extends EntityState, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Query<S> {\n  ui: EntityUIQuery<any, EntityType>;\n  protected store: EntityStore<S>;\n\n  // @internal\n  __store__;\n\n  constructor(store: EntityStore<S>, private options: QueryConfigOptions = {}) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.selectAll()\n   *\n   * this.query.selectAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.selectAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.selectAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   *\n   */\n  selectAll(options: SelectAllOptionsA<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsB<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsC<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsD<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsE<EntityType>): Observable<EntityType[]>;\n  selectAll(): Observable<EntityType[]>;\n  selectAll(\n    options: SelectOptions<EntityType> = {\n      asObject: false\n    }\n  ): Observable<EntityType[] | HashMap<EntityType>> {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n\n  /**\n   * Get the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.getAll()\n   *\n   * this.query.getAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.getAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.getAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   */\n  getAll(options: SelectAllOptionsA<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsB<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsC<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsD<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsE<EntityType>): EntityType[];\n  getAll(): EntityType[];\n  getAll(options: SelectOptions<EntityType> = { asObject: false, filterBy: undefined, limitTo: undefined }): EntityType[] | HashMap<EntityType> {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n\n    return entitiesToArray(this.getValue(), options);\n  }\n\n  /**\n   * Select multiple entities from the store\n   *\n   * @example\n   *\n   * this.query.selectMany([1,2,3])\n   * this.query.selectMany([1,2], entity => entity.title)\n   */\n  selectMany<R>(ids: IDType[]): Observable<EntityType[]>;\n  selectMany<R>(ids: IDType[], project: (entity: EntityType) => R): Observable<R[]>;\n  selectMany<R>(ids: IDType[], project?: (entity: EntityType) => R): Observable<EntityType[] | R[]> {\n    if (!ids || !ids.length) return of([]);\n\n    return this.select(state => state.entities).pipe(\n      map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))),\n      distinctUntilArrayItemChanged()\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity\n   *\n   * @example\n   *\n   * this.query.selectEntity(1)\n   * this.query.selectEntity(1, entity => entity.config.date)\n   * this.query.selectEntity(1, 'comments')\n   * this.query.selectEntity(e => e.title === 'title')\n   *\n   */\n  selectEntity<R>(id: IDType): Observable<EntityType>;\n  selectEntity<K extends keyof EntityType>(id: IDType, project?: K): Observable<EntityType[K]>;\n  selectEntity<R>(id: IDType, project: (entity: EntityType) => R): Observable<R>;\n  selectEntity<R>(predicate: ItemPredicate<EntityType>): Observable<EntityType>;\n  selectEntity<R>(idOrPredicate: IDType | ItemPredicate<EntityType>, project?: ((entity: EntityType) => R) | keyof EntityType): Observable<R | EntityType> {\n    let id = idOrPredicate;\n\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      (id as any) = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n\n    return this.select(state => state.entities).pipe(\n      map(getEntity(id, project)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id: IDType): EntityType {\n    return this.getValue().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId(): Observable<S['active']> {\n    return this.select(state => (state as S & { active: S['active'] }).active);\n  }\n\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId(): S['active'] {\n    return this.getValue().active;\n  }\n\n  /**\n   * Select the active entity\n   *\n   * @example\n   *\n   * this.query.selectActive()\n   * this.query.selectActive(entity => entity.title)\n   */\n  selectActive<R>(): S['active'] extends any[] ? Observable<EntityType[]> : Observable<EntityType>;\n  selectActive<R>(project?: (entity: EntityType) => R): S['active'] extends any[] ? Observable<R[]> : Observable<R>;\n  selectActive<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> | Observable<EntityType[] | R[]> {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n\n  /**\n   * Get the active entity\n   *\n   * @example\n   *\n   * this.query.getActive()\n   */\n  getActive(): S['active'] extends any[] ? EntityType[] : EntityType;\n  getActive(): OrArray<EntityType> {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id as any]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate?: (entity: EntityType, index: number) => boolean): Observable<number> {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate?: (entity: EntityType, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n\n  /**\n   *\n   * Select the last entity from the store\n   *\n   * @example\n   *\n   * this.query.selectLast()\n   * this.query.selectLast(todo => todo.title)\n   */\n  selectLast<R>(): Observable<EntityType>;\n  selectLast<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectLast<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n\n  /**\n   *\n   * Select the first entity from the store\n   *\n   * @example\n   *\n   * this.query.selectFirst()\n   * this.query.selectFirst(todo => todo.title)\n   */\n  selectFirst<R>(): Observable<EntityType>;\n  selectFirst<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectFirst<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[0], project);\n  }\n\n  /**\n   *\n   * Listen for entity actions\n   *\n   *  @example\n   *\n   *  this.query.selectEntityAction(EntityActions.Add);\n   *  this.query.selectEntityAction(EntityActions.Update);\n   *  this.query.selectEntityAction(EntityActions.Remove);\n   *\n   *  this.query.selectEntityAction();\n   */\n  selectEntityAction(action: EntityActions): Observable<IDType[]>;\n  selectEntityAction(): Observable<EntityAction<IDType>>;\n  selectEntityAction(action?: EntityActions): Observable<IDType[] | EntityAction<IDType>> {\n    if (isUndefined(action)) {\n      return this.store.selectEntityAction$;\n    }\n    return this.store.selectEntityAction$.pipe(\n      filter(ac => ac.type === action),\n      map(action => action.ids)\n    );\n  }\n\n  /**\n   * Returns whether entity exists\n   *\n   * @example\n   *\n   * this.query.hasEntity(2)\n   * this.query.hasEntity(entity => entity.completed)\n   * this.query.hasEntity([1, 2, 33])\n   *\n   */\n  hasEntity(id: IDType): boolean;\n  hasEntity(id: IDType[]): boolean;\n  hasEntity(project: (entity: EntityType) => boolean): boolean;\n  hasEntity(): boolean;\n  hasEntity(projectOrIds?: IDType | IDType[] | ((entity: EntityType) => boolean)): boolean {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.getValue().entities);\n    }\n\n    return (projectOrIds as any) in this.getValue().entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id?: IDType): boolean {\n    const active = this.getValue().active;\n    if (Array.isArray(active)) {\n      if (isDefined(id)) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isDefined(active);\n  }\n\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n\n  private selectAt<R>(mapFn: (ids: IDType[]) => IDType, project?: (entity: EntityType) => R) {\n    return this.select(state => state.ids as any[]).pipe(\n      map(mapFn),\n      distinctUntilChanged(),\n      switchMap((id: IDType) => this.selectEntity(id, project))\n    );\n  }\n}\n\n// @internal\nexport class EntityUIQuery<UIState, DEPRECATED = any> extends QueryEntity<UIState> {\n  constructor(store) {\n    super(store);\n  }\n}\n","// @internal\nexport function mapSkipUndefined<T, V>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => V) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Diff } from './types';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>) => source.pipe(filter((value): value is Diff<T, null | undefined> => value !== null && typeof value !== 'undefined'));\n","/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue( obj: any, prop: string ) {\n  /** return the whole state  */\n  if( prop.split('.').length === 1 ) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce(( acc: any, part: string ) => acc && acc[part], obj);\n}\n","/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj: any, prop: string, val: any) {\n  const split = prop.split('.');\n\n  if (split.length === 1) {\n    return { ...obj, ...val };\n  }\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n","import { filter, skip } from 'rxjs/operators';\nimport { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { HashMap, MaybeAsync } from './types';\nimport { isFunction } from './isFunction';\nimport { AkitaError } from './errors';\nimport { __stores__ } from './stores';\nimport { getValue } from './getValueByString';\nimport { setAction } from './actions';\nimport { setValue } from './setValueByString';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isNotBrowser } from './root';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: (string | ((storeName: string) => boolean))[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: typeof localStorage === 'undefined' ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    // @deprecated\n    exclude: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function(storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function(storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, exclude, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if (isNotBrowser && !enableInNonBrowser) return;\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = typeof localStorage !== 'undefined' && (storage === localStorage || storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select(state => getValue(state, path))\n        .pipe(\n          skip(1),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe(data => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe(storeName => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe(storeName => {\n        if (hasExclude && exclude.includes(storeName)) {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some(fn => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n  };\n}\n","import { __stores__ } from './stores';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things like saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for(let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      acc[storeName] = __stores__[storeName]._value();\n    }\n\n    return acc;\n  }\n\n  /**\n   * Set snapshot we get from the server\n   */\n  setStoresSnapshot(stores: { [storeName: string]: any } | string, options: { skipStorageUpdate: boolean } = { skipStorageUpdate: false } ) {\n    options.skipStorageUpdate && setSkipStorageUpdate(true);\n\n    let normalizedStores = stores;\n    if(isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    for(let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n      const storeName = keys[i];\n      if(__stores__[storeName]) {\n        __stores__[storeName]._setState(() => normalizedStores[storeName]);\n      }\n    }\n\n    options.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNil } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState);\n        });\n        return;\n      }\n      this.getStore()._setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../queryEntity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, isObservable, Observable, Subscription } from 'rxjs';\nimport { EntityState, ID, getEntityType } from '../../types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../transaction';\nimport { isUndefined } from '../../isUndefined';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n  clearStoreWithCache?: boolean;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true\n};\n\nexport class PaginatorPlugin<State extends EntityState> extends AkitaPlugin<State> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<getEntityType<State>> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = true;\n\n  constructor(protected query: QueryEntity<State>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action('@Pagination - New Page')\n  update(response: PaginationResponse<getEntityType<State>>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: getEntityType<State>[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache(options: { clearStore?: boolean } = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<getEntityType<State>>>) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<getEntityType<State>>) => {\n          page = config.currentPage;\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<State> {\n    return this.query;\n  }\n\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<getEntityType<State>>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<getEntityType<State>> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getValue() as AkitaFormProp<T>)[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","// @internal\nexport function capitalize(value: string) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { currentAction, setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './captialize';\nimport { isNotBrowser } from './root';\n\nexport type DevtoolsOptions = {\n  /** instance name visible in devtools */\n  name: string;\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  storesWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n  shallow: boolean;\n  sortAlphabetically: boolean;\n};\nlet subs = [];\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (isNotBrowser) return;\n\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  subs.length &&\n    subs.forEach(s => {\n      if (s.unsubscribe) {\n        s.unsubscribe();\n      } else {\n        s && s();\n      }\n    });\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita', shallow: true, storesWhitelist: [] };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n\n  subs.push(\n    $$addStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      appState = {\n        ...appState,\n        [storeName]: __stores__[storeName]._value()\n      };\n      devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);\n    })\n  );\n\n  subs.push(\n    $$deleteStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    })\n  );\n\n  subs.push(\n    $$updateStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      const { type, entityIds, skip } = currentAction;\n\n      if (skip) {\n        setSkipAction(false);\n        return;\n      }\n\n      const store = __stores__[storeName];\n      if (!store) {\n        return;\n      }\n\n      if (options.shallow === false && appState[storeName]) {\n        const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n        if (isEqual) return;\n      }\n\n      appState = {\n        ...appState,\n        [storeName]: store._value()\n      };\n\n      const normalize = capitalize(storeName);\n      let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      if (options.sortAlphabetically) {\n        const sortedAppState = Object.keys(appState)\n          .sort()\n          .reduce((acc, storeName) => {\n            acc[storeName] = appState[storeName];\n            return acc;\n          }, {});\n\n        devTools.send({ type: msg }, sortedAppState);\n        return;\n      }\n\n      devTools.send({ type: msg }, appState);\n    })\n  );\n\n  subs.push(\n    devTools.subscribe(message => {\n      if (message.type === 'DISPATCH') {\n        const payloadType = message.payload.type;\n\n        if (payloadType === 'COMMIT') {\n          devTools.init(appState);\n          return;\n        }\n\n        if (message.state) {\n          const rootState = JSON.parse(message.state);\n          for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n            const storeName = keys[i];\n            if (__stores__[storeName]) {\n              (ngZoneOrOptions as NgZoneLike).run(() => {\n                __stores__[storeName]._setState(() => rootState[storeName], false);\n              });\n            }\n          }\n        }\n      }\n    })\n  );\n}\n","import { Observable } from 'rxjs';\nimport { EntityState, OrArray, getIDType } from '../types';\nimport { QueryEntity } from '../queryEntity';\nimport { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n\nexport type RebaseAction<P = any> = (plugin: P) => any;\n\nexport type RebaseActions<P = any> = { beforeRemove?: RebaseAction; beforeAdd?: RebaseAction; afterAdd?: RebaseAction };\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport abstract class EntityCollectionPlugin<State extends EntityState, P> {\n  protected entities = new Map<getIDType<State>, P>();\n\n  protected constructor(protected query: QueryEntity<State>, private entityIds: OrArray<getIDType<State>>) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: getIDType<State>): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: getIDType<State>): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: getIDType<State>) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: getIDType<State>, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): any {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): getIDType<State>[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: getIDType<State>[], actions: RebaseActions<P> = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<any> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: any[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: getIDType<State>): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: getIDType<State>);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: OrArray<getIDType<State>>, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { pairwise, distinctUntilChanged } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n  watchProperty?: string;\n  comparator?: (prevState, currentState) => boolean;\n}\n\nexport type History<State> = {\n  past: State[];\n  present: State | null;\n  future: State[];\n};\n\nexport class StateHistoryPlugin<State = any> extends AkitaPlugin<State> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  /* Subjects for supporting observable hasPast$ and hasFuture$ */\n  private hasPastSubject: BehaviorSubject<boolean>;\n  private _hasPast$: Observable<boolean>;\n  private hasFutureSubject: BehaviorSubject<boolean>;\n  private _hasFuture$: Observable<boolean>;\n\n  constructor(protected query: Queries<State>, private params: StateHistoryParams = {}, private _entityId?: any) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = !!params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n\n    this.activate();\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$(): Observable<boolean> {\n    return this._hasPast$;\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$(): Observable<boolean> {\n    return this._hasFuture$;\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  private get property() {\n    return this.params.watchProperty;\n  }\n\n  /* Updates the hasPast$ hasFuture$ observables*/\n  private updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = (this as any)\n      .selectSource(this._entityId, this.property)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        /**\n         *  comparator: (prev, current) => isEqual(prev, current) === false\n         */\n        const shouldUpdate = this.params.comparator(past, present);\n\n        if (!this.skipUpdate && shouldUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n          this.updateHasHistory();\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     *\n     * newPast = past.slice(0, 2) = [1, 2];\n     * present = past[index] = 3;\n     * [...past.slice(2 + 1), ...future] = [4, 5];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future } = this.history;\n\n    const newPast = [...past, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n: number) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn?: (history: History<State>) => History<State>) {\n    this.history = isFunction(customUpdateFn)\n      ? customUpdateFn(this.history)\n      : {\n          past: [],\n          present: null,\n          future: []\n        };\n    this.updateHasHistory();\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n","import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead() {\n    return !!this.getHead();\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map(prop =>\n          this.query\n            .select(state => state[prop])\n            .pipe(\n              map(val => ({\n                val,\n                __akitaKey: prop\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<State>\n    );\n  }\n}\n","import { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './dirtyCheckPlugin';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { auditTime, map, skip } from 'rxjs/operators';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { EntityState, OrArray, getIDType, getEntityType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { coerceArray } from '../../coerceArray';\n\nexport type DirtyCheckCollectionParams<State extends EntityState> = {\n  comparator?: DirtyCheckComparator<getEntityType<State>>;\n  entityIds?: OrArray<getIDType<State>>;\n};\n\nexport class EntityDirtyCheckPlugin<State extends EntityState = any, P extends DirtyCheckPlugin<State> = DirtyCheckPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  private _someDirty = new Subject();\n  someDirty$: Observable<boolean> = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(\n    auditTime(0),\n    map(() => this.checkSomeDirty())\n  );\n\n  constructor(protected query: QueryEntity<State>, private readonly params: DirtyCheckCollectionParams<State> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        super.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: OrArray<getIDType<State>>) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids) as getIDType<State>[];\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next();\n    return this;\n  }\n\n  hasHead(id: getIDType<State>): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: OrArray<getIDType<State>>, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: getIDType<State>): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: true): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: false): boolean;\n  isDirty(id: getIDType<State>, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  someDirty(): boolean {\n    return this.checkSomeDirty();\n  }\n\n  isPathDirty(id: getIDType<State>, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n\n  protected instantiatePlugin(id: getIDType<State>): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { __stores__ } from './stores';\nimport { IDS } from './types';\nimport { AddEntitiesOptions } from './addEntities';\nimport { EntityStore } from './entityStore';\nimport { SetEntities } from './setEntities';\nimport { isNil } from './isNil';\nimport { AkitaError } from './errors';\n\nexport enum StoreActions {\n  Update,\n  AddEntities,\n  SetEntities,\n  UpdateEntities,\n  RemoveEntities,\n  UpsertEntities\n}\n\ninterface RunStoreActionSetEntities<Entity = any> {\n  payload: {\n    data: SetEntities<Entity>;\n  };\n}\n\ninterface RunStoreActionAddEntities<Entity = any> {\n  payload: {\n    data: Entity[] | Entity;\n    params?: AddEntitiesOptions;\n  };\n}\n\ninterface RunStoreActionUpdateEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>;\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionRemoveEntities<Entity = any> {\n  payload: {\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionUpsertEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>[] | Partial<Entity>;\n    entityIds?: IDS;\n  };\n}\n\ninterface RunStoreActionUpdate<State = any> {\n  payload: {\n    data: Partial<State>;\n  };\n}\n\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.Update, {\n *   payload: {\n *    data: { filter: 'New filter' }\n *   }\n * });\n */\nexport function runStoreAction<State = any>(storeName: string, action: StoreActions.Update, params: RunStoreActionUpdate<State>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.RemoveEntities, {\n *   payload: {\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.RemoveEntities, params: RunStoreActionRemoveEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpdateEntities, {\n *   payload: {\n *    data: { title: 'New title' },\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpdateEntities, params: RunStoreActionUpdateEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.SetEntities, {\n *   payload: {\n *    data: [{ id: 1 }, { id: 2 }]\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.SetEntities, params: RunStoreActionSetEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.AddEntities, {\n *   payload: {\n *    data: { id: 1 }\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.AddEntities, params: RunStoreActionAddEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: { title: 'New Title' },\n *    entityIds: [1, 2]\n *   }\n * });\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: [{ id: 2, title: 'New Title' }, { id: 3, title: 'Another title'}],\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpsertEntities, params: RunStoreActionUpsertEntities<Entity>);\nexport function runStoreAction<EntityOrState = any>(\n  storeName: string,\n  action: StoreActions,\n  params:\n    | RunStoreActionSetEntities<EntityOrState>\n    | RunStoreActionAddEntities<EntityOrState>\n    | RunStoreActionRemoveEntities<EntityOrState>\n    | RunStoreActionUpdateEntities<EntityOrState>\n    | RunStoreActionUpsertEntities<EntityOrState>\n) {\n  const store = __stores__[storeName];\n\n  if (isNil(store)) {\n    throw new AkitaError(`${storeName} doesn't exist`);\n  }\n\n  switch (action) {\n    case StoreActions.SetEntities: {\n      const { payload } = params as RunStoreActionSetEntities;\n      (store as EntityStore).set(payload.data);\n      return;\n    }\n    case StoreActions.AddEntities: {\n      const { payload } = params as RunStoreActionAddEntities;\n      (store as EntityStore).add(payload.data, payload.params);\n      return;\n    }\n\n    case StoreActions.UpdateEntities: {\n      const { payload } = params as RunStoreActionUpdateEntities;\n      (store as EntityStore).update(payload.entityIds, payload.data);\n      return;\n    }\n\n    case StoreActions.RemoveEntities: {\n      const { payload } = params as RunStoreActionRemoveEntities;\n      (store as EntityStore).remove(payload.entityIds);\n      return;\n    }\n\n    case StoreActions.UpsertEntities: {\n      const { payload } = params as RunStoreActionUpsertEntities;\n      if (payload.entityIds) {\n        (store as EntityStore).upsert(payload.entityIds, payload.data);\n      } else if (Array.isArray(payload.data)) {\n        (store as EntityStore).upsertMany(payload.data);\n      } else {\n        (store as EntityStore).upsertMany([payload.data]);\n      }\n      return;\n    }\n\n    case StoreActions.Update: {\n      const { payload } = params as RunStoreActionUpdate;\n      (store as EntityStore).update(payload.data);\n      return;\n    }\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate<Root extends any[], Entity = any>(keyOrRoot: Root, predicateOrIds: IDS | ItemPredicate<Root[0]>, obj: Partial<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey = DEFAULT_ID_KEY) {\n  let condition: ItemPredicate<Entity>;\n\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n\n  const updateFn = state =>\n    state.map(entity => {\n      if (condition(entity) === true) {\n        return isObject(entity)\n          ? {\n              ...entity,\n              ...obj\n            }\n          : obj;\n      }\n\n      return entity;\n    });\n\n  if (isArray(keyOrRoot)) {\n    return updateFn(keyOrRoot);\n  }\n\n  return root => {\n    return {\n      [keyOrRoot as string]: updateFn(root[keyOrRoot])\n    };\n  };\n}\n","import { ArrayProperties, OrArray } from './types';\nimport { coerceArray } from './coerceArray';\nimport { AddEntitiesOptions } from './addEntities';\nimport { isArray } from './isArray';\n\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\nexport function arrayAdd<Root extends any[], Entity = any>(keyOrRoot: Root, newEntity: OrArray<Root[0]>, options?: AddEntitiesOptions): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, newEntity: OrArray<Entity>, options?: AddEntitiesOptions): (state: Root) => Root;\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, newEntity: OrArray<Entity>, options: AddEntitiesOptions = {}) {\n  const newEntities = coerceArray(newEntity);\n\n  const addFn = state => (options.prepend ? [...newEntities, ...(state || [])] : [...(state || []), ...newEntities]);\n\n  if (isArray(keyOrRoot)) {\n    return addFn(keyOrRoot);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as ArrayProperties<Root>]: addFn(state[keyOrRoot])\n    };\n  };\n}\n","import { EntityState, getEntityType, getIDType } from './types';\nimport { Observable } from 'rxjs';\n\nexport abstract class EntityService<S extends EntityState> {\n  abstract get<T>(id?: getIDType<S>, config?: any): Observable<T>;\n  abstract add<T>(entity: getEntityType<EntityState>, config?: any): Observable<T>;\n  abstract update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config: any): Observable<T>;\n  abstract delete<T>(id: getIDType<S>, config: any): Observable<T>;\n}\n","/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import { DEFAULT_ID_KEY } from './defaultIDKey';\n\n// @internal\nexport function toEntitiesIds<E>(entities: E[], idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n","import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n\nexport interface ResetStoresParams {\n  exclude: string[];\n}\n\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isNumber(value: any): value is number {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n","import { ID } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert<Root extends any[]>(arr: Root, id: ID, obj: Partial<Root[0]>, idKey = DEFAULT_ID_KEY): Root[0][] {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => (entityIsObject ? entity[idKey] === id : entity === id));\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? { ...obj, [idKey]: id } : obj);\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove<Root extends any[], Entity = Root[0]>(keyOrRoot: Root, identifier: IDS | ItemPredicate<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, identifier: IDS | ItemPredicate<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, identifier: IDS | ItemPredicate<Entity>, idKey = DEFAULT_ID_KEY) {\n  let identifiers;\n  let filterFn;\n\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier as IDS);\n    filterFn = current => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n\n  if (Array.isArray(keyOrRoot)) {\n    return keyOrRoot.filter(filterFn);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as string]: state[keyOrRoot].filter(filterFn)\n    };\n  };\n}\n","// @internal\nexport function not(pred: Function): Function {\n  return function(...args) {\n    return !pred(...args);\n  };\n}\n","import { Store } from './store';\nimport { Query } from './query';\nimport { StoreConfigOptions } from './storeConfig';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nimport { QueryConfigOptions } from './queryConfig';\nimport { EntityState } from './types';\n\nexport function createStore<State>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new Store<State>(initialState, options);\n}\n\nexport function createQuery<State>(store: Store<State>) {\n  return new Query<State>(store);\n}\n\nexport function createEntityStore<State extends EntityState>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new EntityStore<State>(initialState, options);\n}\n\nexport function createEntityQuery<State extends EntityState>(store: EntityStore<State>, options: QueryConfigOptions = {}) {\n  return new QueryEntity<State>(store, options);\n}\n","import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }) {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n","import { combineLatest, Observable, ObservableInput, ObservedValueOf } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = { [P in keyof T]: T[P] extends Observable<infer R> ? R : never };\ntype Observables = [Observable<any>] | Observable<any>[];\n\nexport function combineQueries<R extends Observables>(observables: R): Observable<ReturnTypes<R>> {\n  return combineLatest(observables).pipe(auditTime(0)) as any;\n}\n","import { Store } from './store';\nimport { Observable, defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nexport function setLoading(store: Store) {\n  return function<T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n"]}
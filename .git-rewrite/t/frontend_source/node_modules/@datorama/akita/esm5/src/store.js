/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { resetCustomAction, setAction } from './actions';
import { getAkitaConfig } from './config';
import { deepFreeze } from './deepFreeze';
import { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';
import { __DEV__, isDev } from './env';
import { assertStoreHasName } from './errors';
import { isDefined } from './isDefined';
import { isFunction } from './isFunction';
import { isPlainObject } from './isPlainObject';
import { isBrowser } from './root';
import { configKey } from './storeConfig';
import { __stores__ } from './stores';
import { commit, isTransactionInProcess } from './transaction';
/**
 *
 * Store for managing any type of data
 *
 * \@example
 *
 * export interface SessionState {
 *   token: string;
 *   userDetails: UserDetails
 * }
 *
 * export function createInitialState(): SessionState {
 *  return {
 *    token: '',
 *    userDetails: null
 *  };
 * }
 *
 * \@StoreConfig({ name: 'session' })
 * export class SessionStore extends Store<SessionState> {
 *   constructor() {
 *    super(createInitialState());
 *   }
 * }
 * @template S
 */
var /**
 *
 * Store for managing any type of data
 *
 * \@example
 *
 * export interface SessionState {
 *   token: string;
 *   userDetails: UserDetails
 * }
 *
 * export function createInitialState(): SessionState {
 *  return {
 *    token: '',
 *    userDetails: null
 *  };
 * }
 *
 * \@StoreConfig({ name: 'session' })
 * export class SessionStore extends Store<SessionState> {
 *   constructor() {
 *    super(createInitialState());
 *   }
 * }
 * @template S
 */
Store = /** @class */ (function () {
    function Store(initialState, options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        this.inTransaction = false;
        this.cache = {
            active: new BehaviorSubject(false),
            ttl: null
        };
        this.onInit((/** @type {?} */ (initialState)));
    }
    /**
     *  Set the loading state
     *
     *  @example
     *
     *  store.setLoading(true)
     *
     */
    /**
     *  Set the loading state
     *
     * \@example
     *
     *  store.setLoading(true)
     *
     * @param {?=} loading
     * @return {?}
     */
    Store.prototype.setLoading = /**
     *  Set the loading state
     *
     * \@example
     *
     *  store.setLoading(true)
     *
     * @param {?=} loading
     * @return {?}
     */
    function (loading) {
        if (loading === void 0) { loading = false; }
        if (loading !== ((/** @type {?} */ (this._value()))).loading) {
            isDev() && setAction('Set Loading');
            this._setState((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return ((/** @type {?} */ (tslib_1.__assign({}, state, { loading: loading })))); }));
        }
    };
    /**
     *
     * Set whether the data is cached
     *
     * @example
     *
     * store.setHasCache(true)
     * store.setHasCache(false)
     * store.setHasCache(true, { restartTTL: true })
     *
     */
    /**
     *
     * Set whether the data is cached
     *
     * \@example
     *
     * store.setHasCache(true)
     * store.setHasCache(false)
     * store.setHasCache(true, { restartTTL: true })
     *
     * @param {?} hasCache
     * @param {?=} options
     * @return {?}
     */
    Store.prototype.setHasCache = /**
     *
     * Set whether the data is cached
     *
     * \@example
     *
     * store.setHasCache(true)
     * store.setHasCache(false)
     * store.setHasCache(true, { restartTTL: true })
     *
     * @param {?} hasCache
     * @param {?=} options
     * @return {?}
     */
    function (hasCache, options) {
        var _this = this;
        if (options === void 0) { options = { restartTTL: false }; }
        if (hasCache !== this.cache.active.value) {
            this.cache.active.next(hasCache);
        }
        if (options.restartTTL) {
            /** @type {?} */
            var ttlConfig = this.getCacheTTL();
            if (ttlConfig) {
                if (this.cache.ttl !== null) {
                    clearTimeout(this.cache.ttl);
                }
                this.cache.ttl = (/** @type {?} */ (setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.setHasCache(false); }), ttlConfig)));
            }
        }
    };
    /**
     *
     * Sometimes we need to access the store value from a store
     *
     * @example middleware
     *
     */
    /**
     *
     * Sometimes we need to access the store value from a store
     *
     * \@example middleware
     *
     * @return {?}
     */
    Store.prototype.getValue = /**
     *
     * Sometimes we need to access the store value from a store
     *
     * \@example middleware
     *
     * @return {?}
     */
    function () {
        return this.storeValue;
    };
    /**
     *  Set the error state
     *
     *  @example
     *
     *  store.setError({text: 'unable to load data' })
     *
     */
    /**
     *  Set the error state
     *
     * \@example
     *
     *  store.setError({text: 'unable to load data' })
     *
     * @template T
     * @param {?} error
     * @return {?}
     */
    Store.prototype.setError = /**
     *  Set the error state
     *
     * \@example
     *
     *  store.setError({text: 'unable to load data' })
     *
     * @template T
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error !== ((/** @type {?} */ (this._value()))).error) {
            isDev() && setAction('Set Error');
            this._setState((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return ((/** @type {?} */ (tslib_1.__assign({}, state, { error: error })))); }));
        }
    };
    // @internal
    // @internal
    /**
     * @template R
     * @param {?} project
     * @return {?}
     */
    Store.prototype._select = 
    // @internal
    /**
     * @template R
     * @param {?} project
     * @return {?}
     */
    function (project) {
        return this.store.asObservable().pipe(map(project), distinctUntilChanged());
    };
    // @internal
    // @internal
    /**
     * @return {?}
     */
    Store.prototype._value = 
    // @internal
    /**
     * @return {?}
     */
    function () {
        return this.storeValue;
    };
    // @internal
    // @internal
    /**
     * @return {?}
     */
    Store.prototype._cache = 
    // @internal
    /**
     * @return {?}
     */
    function () {
        return this.cache.active;
    };
    Object.defineProperty(Store.prototype, "config", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return this.constructor[configKey] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "storeName", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.config))).storeName || ((/** @type {?} */ (this.options))).storeName || this.options.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "deepFreeze", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "cacheConfig", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return this.config.cache || this.options.cache;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "resettable", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;
        },
        enumerable: true,
        configurable: true
    });
    // @internal
    // @internal
    /**
     * @param {?} newStateFn
     * @param {?=} _dispatchAction
     * @return {?}
     */
    Store.prototype._setState = 
    // @internal
    /**
     * @param {?} newStateFn
     * @param {?=} _dispatchAction
     * @return {?}
     */
    function (newStateFn, _dispatchAction) {
        if (_dispatchAction === void 0) { _dispatchAction = true; }
        this.storeValue = __DEV__ ? this.deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _dispatchAction);
    };
    /**
     *
     * Reset the current store back to the initial value
     *
     * @example
     *
     * store.reset()
     *
     */
    /**
     *
     * Reset the current store back to the initial value
     *
     * \@example
     *
     * store.reset()
     *
     * @return {?}
     */
    Store.prototype.reset = /**
     *
     * Reset the current store back to the initial value
     *
     * \@example
     *
     * store.reset()
     *
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isResettable()) {
            isDev() && setAction('Reset');
            this._setState((/**
             * @return {?}
             */
            function () { return Object.assign({}, _this._initialState); }));
            this.setHasCache(false);
        }
        else {
            isDev() && console.warn("You need to enable the reset functionality");
        }
    };
    /**
     * @param {?} stateOrCallback
     * @return {?}
     */
    Store.prototype.update = /**
     * @param {?} stateOrCallback
     * @return {?}
     */
    function (stateOrCallback) {
        var _this = this;
        isDev() && setAction('Update');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            /** @type {?} */
            var newState = isFunction(stateOrCallback) ? stateOrCallback(state) : stateOrCallback;
            /** @type {?} */
            var merged = _this.akitaPreUpdate(state, (/** @type {?} */ (tslib_1.__assign({}, state, newState))));
            return isPlainObject(state) ? merged : new ((/** @type {?} */ (state))).constructor(merged);
        }));
    };
    /**
     * @param {?} newOptions
     * @return {?}
     */
    Store.prototype.updateStoreConfig = /**
     * @param {?} newOptions
     * @return {?}
     */
    function (newOptions) {
        this.options = tslib_1.__assign({}, this.options, newOptions);
    };
    // @internal
    // @internal
    /**
     * @param {?} _
     * @param {?} nextState
     * @return {?}
     */
    Store.prototype.akitaPreUpdate = 
    // @internal
    /**
     * @param {?} _
     * @param {?} nextState
     * @return {?}
     */
    function (_, nextState) {
        return nextState;
    };
    /**
     * @return {?}
     */
    Store.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     *
     * Destroy the store
     *
     * @example
     *
     * store.destroy()
     *
     */
    /**
     *
     * Destroy the store
     *
     * \@example
     *
     * store.destroy()
     *
     * @return {?}
     */
    Store.prototype.destroy = /**
     *
     * Destroy the store
     *
     * \@example
     *
     * store.destroy()
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hmrEnabled = isBrowser ? ((/** @type {?} */ (window))).hmrEnabled : false;
        if (!hmrEnabled && this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
            dispatchDeleted(this.storeName);
            this.setHasCache(false);
            this.cache.active.complete();
        }
    };
    /**
     * @private
     * @param {?} initialState
     * @return {?}
     */
    Store.prototype.onInit = /**
     * @private
     * @param {?} initialState
     * @return {?}
     */
    function (initialState) {
        __stores__[this.storeName] = this;
        this._setState((/**
         * @return {?}
         */
        function () { return initialState; }));
        dispatchAdded(this.storeName);
        if (this.isResettable()) {
            this._initialState = initialState;
        }
        isDev() && assertStoreHasName(this.storeName, this.constructor.name);
    };
    /**
     * @private
     * @param {?} state
     * @param {?=} _dispatchAction
     * @return {?}
     */
    Store.prototype.dispatch = /**
     * @private
     * @param {?} state
     * @param {?=} _dispatchAction
     * @return {?}
     */
    function (state, _dispatchAction) {
        if (_dispatchAction === void 0) { _dispatchAction = true; }
        this.store.next(state);
        if (_dispatchAction) {
            dispatchUpdate(this.storeName);
            resetCustomAction();
        }
    };
    /**
     * @private
     * @return {?}
     */
    Store.prototype.watchTransaction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        commit().subscribe((/**
         * @return {?}
         */
        function () {
            _this.inTransaction = false;
            _this.dispatch(_this._value());
        }));
    };
    /**
     * @private
     * @return {?}
     */
    Store.prototype.isResettable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resettable === false) {
            return false;
        }
        return this.resettable || getAkitaConfig().resettable;
    };
    /**
     * @private
     * @return {?}
     */
    Store.prototype.handleTransaction = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    Store.prototype.getCacheTTL = /**
     * @private
     * @return {?}
     */
    function () {
        return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;
    };
    return Store;
}());
/**
 *
 * Store for managing any type of data
 *
 * \@example
 *
 * export interface SessionState {
 *   token: string;
 *   userDetails: UserDetails
 * }
 *
 * export function createInitialState(): SessionState {
 *  return {
 *    token: '',
 *    userDetails: null
 *  };
 * }
 *
 * \@StoreConfig({ name: 'session' })
 * export class SessionStore extends Store<SessionState> {
 *   constructor() {
 *    super(createInitialState());
 *   }
 * }
 * @template S
 */
export { Store };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Store.prototype.store;
    /**
     * @type {?}
     * @private
     */
    Store.prototype.storeValue;
    /**
     * @type {?}
     * @private
     */
    Store.prototype.inTransaction;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._initialState;
    /**
     * @type {?}
     * @protected
     */
    Store.prototype.cache;
    /**
     * @type {?}
     * @protected
     */
    Store.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,
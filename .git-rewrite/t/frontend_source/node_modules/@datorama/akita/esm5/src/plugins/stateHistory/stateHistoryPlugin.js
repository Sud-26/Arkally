/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { pairwise, distinctUntilChanged } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { AkitaPlugin } from '../plugin';
import { logAction } from '../../actions';
import { isFunction } from '../../isFunction';
/**
 * @record
 */
export function StateHistoryParams() { }
if (false) {
    /** @type {?|undefined} */
    StateHistoryParams.prototype.maxAge;
    /** @type {?|undefined} */
    StateHistoryParams.prototype.watchProperty;
    /** @type {?|undefined} */
    StateHistoryParams.prototype.comparator;
}
/**
 * @template State
 */
var /**
 * @template State
 */
StateHistoryPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(StateHistoryPlugin, _super);
    function StateHistoryPlugin(query, params, _entityId) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, {
            resetFn: (/**
             * @return {?}
             */
            function () { return _this.clear(); })
        }) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        _this.skip = false;
        _this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        _this.skipUpdate = false;
        params.maxAge = !!params.maxAge ? params.maxAge : 10;
        params.comparator = params.comparator || ((/**
         * @return {?}
         */
        function () { return true; }));
        _this.activate();
        return _this;
    }
    Object.defineProperty(StateHistoryPlugin.prototype, "hasPast$", {
        /**
         * Observable stream representing whether the history plugin has an available past
         *
         */
        get: /**
         * Observable stream representing whether the history plugin has an available past
         *
         * @return {?}
         */
        function () {
            return this._hasPast$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "hasFuture$", {
        /**
         * Observable stream representing whether the history plugin has an available future
         *
         */
        get: /**
         * Observable stream representing whether the history plugin has an available future
         *
         * @return {?}
         */
        function () {
            return this._hasFuture$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "hasPast", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.past.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "hasFuture", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.future.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "property", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.params.watchProperty;
        },
        enumerable: true,
        configurable: true
    });
    /* Updates the hasPast$ hasFuture$ observables*/
    /* Updates the hasPast$ hasFuture$ observables*/
    /**
     * @private
     * @return {?}
     */
    StateHistoryPlugin.prototype.updateHasHistory = /* Updates the hasPast$ hasFuture$ observables*/
    /**
     * @private
     * @return {?}
     */
    function () {
        this.hasFutureSubject.next(this.hasFuture);
        this.hasPastSubject.next(this.hasPast);
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasPastSubject = new BehaviorSubject(false);
        this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());
        this.hasFutureSubject = new BehaviorSubject(false);
        this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());
        this.history.present = this.getSource(this._entityId, this.property);
        this.subscription = ((/** @type {?} */ (this)))
            .selectSource(this._entityId, this.property)
            .pipe(pairwise())
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), past = _b[0], present = _b[1];
            if (_this.skip) {
                _this.skip = false;
                return;
            }
            /**
             *  comparator: (prev, current) => isEqual(prev, current) === false
             * @type {?}
             */
            var shouldUpdate = _this.params.comparator(past, present);
            if (!_this.skipUpdate && shouldUpdate) {
                if (_this.history.past.length === _this.params.maxAge) {
                    _this.history.past = _this.history.past.slice(1);
                }
                _this.history.past = tslib_1.__spread(_this.history.past, [past]);
                _this.history.present = present;
                _this.updateHasHistory();
            }
        }));
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.undo = /**
     * @return {?}
     */
    function () {
        if (this.history.past.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present;
            /** @type {?} */
            var previous = past[past.length - 1];
            this.history.past = past.slice(0, past.length - 1);
            this.history.present = previous;
            this.history.future = tslib_1.__spread([present], this.history.future);
            this.update();
        }
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.redo = /**
     * @return {?}
     */
    function () {
        if (this.history.future.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present;
            /** @type {?} */
            var next = this.history.future[0];
            /** @type {?} */
            var newFuture = this.history.future.slice(1);
            this.history.past = tslib_1.__spread(past, [present]);
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToPast = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /**
         *
         * const past = [1, 2, 3, 4, 5];
         *
         * newPast = past.slice(0, 2) = [1, 2];
         * present = past[index] = 3;
         * [...past.slice(2 + 1), ...future] = [4, 5];
         *
         * @type {?}
         */
        var newPast = past.slice(0, index);
        /** @type {?} */
        var newFuture = tslib_1.__spread(past.slice(index + 1), future);
        /** @type {?} */
        var newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToFuture = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /** @type {?} */
        var newPast = tslib_1.__spread(past, future.slice(0, index));
        /** @type {?} */
        var newPresent = future[index];
        /** @type {?} */
        var newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    };
    /**
     *
     * jump n steps in the past or forward
     *
     */
    /**
     *
     * jump n steps in the past or forward
     *
     * @param {?} n
     * @return {?}
     */
    StateHistoryPlugin.prototype.jump = /**
     *
     * jump n steps in the past or forward
     *
     * @param {?} n
     * @return {?}
     */
    function (n) {
        if (n > 0)
            return this.jumpToFuture(n - 1);
        if (n < 0)
            return this.jumpToPast(this.history.past.length + n);
    };
    /**
     * Clear the history
     *
     * @param customUpdateFn Callback function for only clearing part of the history
     *
     * @example
     *
     * stateHistory.clear((history) => {
     *  return {
     *    past: history.past,
     *    present: history.present,
     *    future: []
     *  };
     * });
     */
    /**
     * Clear the history
     *
     * \@example
     *
     * stateHistory.clear((history) => {
     *  return {
     *    past: history.past,
     *    present: history.present,
     *    future: []
     *  };
     * });
     * @param {?=} customUpdateFn Callback function for only clearing part of the history
     *
     * @return {?}
     */
    StateHistoryPlugin.prototype.clear = /**
     * Clear the history
     *
     * \@example
     *
     * stateHistory.clear((history) => {
     *  return {
     *    past: history.past,
     *    present: history.present,
     *    future: []
     *  };
     * });
     * @param {?=} customUpdateFn Callback function for only clearing part of the history
     *
     * @return {?}
     */
    function (customUpdateFn) {
        this.history = isFunction(customUpdateFn)
            ? customUpdateFn(this.history)
            : {
                past: [],
                present: null,
                future: []
            };
        this.updateHasHistory();
    };
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    StateHistoryPlugin.prototype.destroy = /**
     * @param {?=} clearHistory
     * @return {?}
     */
    function (clearHistory) {
        if (clearHistory === void 0) { clearHistory = false; }
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.ignoreNext = /**
     * @return {?}
     */
    function () {
        this.skip = true;
    };
    /**
     * @private
     * @param {?=} action
     * @return {?}
     */
    StateHistoryPlugin.prototype.update = /**
     * @private
     * @param {?=} action
     * @return {?}
     */
    function (action) {
        if (action === void 0) { action = 'Undo'; }
        this.skipUpdate = true;
        logAction("@StateHistory - " + action);
        this.updateStore(this.history.present, this._entityId, this.property);
        this.updateHasHistory();
        this.skipUpdate = false;
    };
    return StateHistoryPlugin;
}(AkitaPlugin));
/**
 * @template State
 */
export { StateHistoryPlugin };
if (false) {
    /**
     * Allow skipping an update from outside
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.skip;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.history;
    /**
     * Skip the update when redo/undo
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.skipUpdate;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.hasPastSubject;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._hasPast$;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.hasFutureSubject;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._hasFuture$;
    /**
     * @type {?}
     * @protected
     */
    StateHistoryPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.params;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._entityId;
}
//# sourceMappingURL=data:application/json;base64,
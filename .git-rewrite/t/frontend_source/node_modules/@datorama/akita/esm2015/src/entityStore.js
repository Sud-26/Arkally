import * as tslib_1 from "tslib";
var _a;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isEmpty } from './isEmpty';
import { setEntities } from './setEntities';
import { Store } from './store';
import { getActiveEntities } from './getActiveEntities';
import { addEntities } from './addEntities';
import { coerceArray } from './coerceArray';
import { removeEntities } from './removeEntities';
import { getInitialEntitiesState } from './getInitialEntitiesState';
import { isDefined } from './isDefined';
import { updateEntities } from './updateEntities';
import { transaction } from './transaction';
import { isNil } from './isNil';
import { isFunction } from './isFunction';
import { isUndefined } from './isUndefined';
import { logAction, setAction } from './actions';
import { isDev } from './env';
import { hasEntity } from './hasEntity';
import { Subject } from 'rxjs';
import { EntityActions } from './entityActions';
import { DEFAULT_ID_KEY } from './defaultIDKey';
/**
 *
 * Store for managing a collection of entities
 *
 * \@example
 *
 * export interface WidgetsState extends EntityState<Widget> { }
 *
 * \@StoreConfig({ name: 'widgets' })
 *  export class WidgetsStore extends EntityStore<WidgetsState> {
 *   constructor() {
 *     super();
 *   }
 * }
 *
 *
 * @template S, EntityType, IDType
 */
export class EntityStore extends Store {
    /**
     * @param {?=} initialState
     * @param {?=} options
     */
    constructor(initialState = {}, options = {}) {
        super(Object.assign({}, getInitialEntitiesState(), initialState), options);
        this.options = options;
        this.entityActions = new Subject();
    }
    // @internal
    /**
     * @return {?}
     */
    get selectEntityAction$() {
        return this.entityActions.asObservable();
    }
    // @internal
    /**
     * @return {?}
     */
    get idKey() {
        return ((/** @type {?} */ (this.config))).idKey || this.options.idKey || DEFAULT_ID_KEY;
    }
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     * @param {?} entities
     * @return {?}
     */
    set(entities) {
        if (isNil(entities))
            return;
        isDev() && setAction('Set Entity');
        /** @type {?} */
        const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => setEntities({
            state,
            entities,
            idKey: this.idKey,
            preAddEntity: this.akitaPreAddEntity,
            isNativePreAdd
        })));
        this.setHasCache(true, { restartTTL: true });
        if (this.hasInitialUIState()) {
            this.handleUICreation();
        }
        this.entityActions.next({ type: EntityActions.Set, ids: this.ids });
    }
    /**
     * Add entities
     *
     * \@example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    add(entities, options = { loading: false }) {
        /** @type {?} */
        const collection = coerceArray(entities);
        if (isEmpty(collection))
            return;
        /** @type {?} */
        const data = addEntities({
            state: this._value(),
            preAddEntity: this.akitaPreAddEntity,
            entities: collection,
            idKey: this.idKey,
            options
        });
        if (data) {
            isDev() && setAction('Add Entity');
            data.newState.loading = options.loading;
            this._setState((/**
             * @return {?}
             */
            () => data.newState));
            if (this.hasInitialUIState()) {
                this.handleUICreation(true);
            }
            this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });
        }
    }
    /**
     * @param {?} idsOrFnOrState
     * @param {?=} newStateOrFn
     * @return {?}
     */
    update(idsOrFnOrState, newStateOrFn) {
        if (isUndefined(newStateOrFn)) {
            super.update((/** @type {?} */ (idsOrFnOrState)));
            return;
        }
        /** @type {?} */
        let ids = [];
        if (isFunction(idsOrFnOrState)) {
            // We need to filter according the predicate function
            ids = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            id => ((/** @type {?} */ (idsOrFnOrState)))(this.entities[id])));
        }
        else {
            // If it's nil we want all of them
            ids = isNil(idsOrFnOrState) ? this.ids : coerceArray((/** @type {?} */ (idsOrFnOrState)));
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Update Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => updateEntities({
            idKey: this.idKey,
            ids,
            preUpdateEntity: this.akitaPreUpdateEntity,
            state,
            newStateOrFn
        })));
        this.entityActions.next({ type: EntityActions.Update, ids });
    }
    /**
     *
     * Create or update
     *
     * \@example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     * @param {?} ids
     * @param {?} newState
     * @param {?=} options
     * @return {?}
     */
    upsert(ids, newState, options = {}) {
        /** @type {?} */
        const toArray = coerceArray(ids);
        /** @type {?} */
        const predicate = (/**
         * @param {?} isUpdate
         * @return {?}
         */
        isUpdate => (/**
         * @param {?} id
         * @return {?}
         */
        id => hasEntity(this.entities, id) === isUpdate));
        /** @type {?} */
        const isClassBased = isFunction(options.baseClass);
        /** @type {?} */
        const updateIds = toArray.filter(predicate(true));
        /** @type {?} */
        const newEntities = toArray.filter(predicate(false)).map((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            let entity = isFunction(newState) ? newState((/** @type {?} */ ({}))) : newState;
            /** @type {?} */
            const withId = Object.assign({}, ((/** @type {?} */ (entity))), { [this.idKey]: id });
            if (isClassBased) {
                return new options.baseClass(withId);
            }
            return withId;
        }));
        // it can be any of the three types
        this.update((/** @type {?} */ (updateIds)), (/** @type {?} */ (newState)));
        this.add(newEntities);
        isDev() && logAction('Upsert Entity');
    }
    /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * \@example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    upsertMany(entities, options = {}) {
        /** @type {?} */
        const addedIds = [];
        /** @type {?} */
        const updatedIds = [];
        /** @type {?} */
        const updatedEntities = {};
        // Update the state directly to optimize performance
        for (const entity of entities) {
            /** @type {?} */
            const withPreCheckHook = this.akitaPreCheckEntity(entity);
            /** @type {?} */
            const id = withPreCheckHook[this.idKey];
            if (hasEntity(this.entities, id)) {
                /** @type {?} */
                const prev = this._value().entities[id];
                /** @type {?} */
                const merged = Object.assign({}, this._value().entities[id], withPreCheckHook);
                /** @type {?} */
                const next = options.baseClass ? new options.baseClass(merged) : merged;
                /** @type {?} */
                const withHook = this.akitaPreUpdateEntity(prev, next);
                /** @type {?} */
                const nextId = withHook[this.idKey];
                updatedEntities[nextId] = withHook;
                updatedIds.push(nextId);
            }
            else {
                /** @type {?} */
                const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;
                /** @type {?} */
                const withHook = this.akitaPreAddEntity(newEntity);
                /** @type {?} */
                const nextId = withHook[this.idKey];
                addedIds.push(nextId);
                updatedEntities[nextId] = withHook;
            }
        }
        isDev() && logAction('Upsert Many');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => (Object.assign({}, state, { ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids, entities: Object.assign({}, state.entities, updatedEntities), loading: !!options.loading }))));
        updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });
        addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });
        if (addedIds.length && this.hasUIStore()) {
            this.handleUICreation(true);
        }
    }
    /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * \@example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     * @param {?} ids
     * @param {?} newState
     * @return {?}
     */
    replace(ids, newState) {
        /** @type {?} */
        const toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        let replaced = {};
        for (const id of toArray) {
            newState[this.idKey] = id;
            replaced[id] = newState;
        }
        isDev() && setAction('Replace Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => (Object.assign({}, state, { entities: Object.assign({}, state.entities, replaced) }))));
    }
    /**
     *
     * Move entity inside the collection
     *
     *
     * \@example
     *
     * this.store.move(fromIndex, toIndex)
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    move(from, to) {
        /** @type {?} */
        const ids = this.ids.slice();
        ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);
        isDev() && setAction('Move Entity');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => (Object.assign({}, state, { entities: Object.assign({}, state.entities), ids }))));
    }
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    remove(idsOrFn) {
        if (isEmpty(this.ids))
            return;
        /** @type {?} */
        const idPassed = isDefined(idsOrFn);
        // null means remove all
        /** @type {?} */
        let ids = [];
        if (isFunction(idsOrFn)) {
            ids = this.ids.filter((/**
             * @param {?} entityId
             * @return {?}
             */
            entityId => idsOrFn(this.entities[entityId])));
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Remove Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        (state) => removeEntities({ state, ids })));
        if (ids === null) {
            this.setHasCache(false);
        }
        this.handleUIRemove(ids);
        this.entityActions.next({ type: EntityActions.Remove, ids });
    }
    /**
     *
     * Update the active entity
     *
     * \@example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateOrCallback
     * @return {?}
     */
    updateActive(newStateOrCallback) {
        /** @type {?} */
        const ids = coerceArray(this.active);
        isDev() && setAction('Update Active', ids);
        this.update(ids, (/** @type {?} */ (newStateOrCallback)));
    }
    /**
     * @param {?} idOrOptions
     * @return {?}
     */
    setActive(idOrOptions) {
        /** @type {?} */
        const active = getActiveEntities(idOrOptions, this.ids, this.active);
        if (active === undefined) {
            return;
        }
        isDev() && setAction('Set Active', active);
        this._setActive(active);
    }
    /**
     * Add active entities
     *
     * \@example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     * @template T
     * @param {?} ids
     * @return {?}
     */
    addActive(ids) {
        /** @type {?} */
        const toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        const everyExist = toArray.every((/**
         * @param {?} id
         * @return {?}
         */
        id => this.active.indexOf(id) > -1));
        if (everyExist)
            return;
        isDev() && setAction('Add Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            /**
             * Protect against case that one of the items in the array exist
             * @type {?}
             */
            const uniques = Array.from(new Set([...((/** @type {?} */ (state.active))), ...toArray]));
            return Object.assign({}, state, { active: uniques });
        }));
    }
    /**
     * Remove active entities
     *
     * \@example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    removeActive(ids) {
        /** @type {?} */
        const toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        const someExist = toArray.some((/**
         * @param {?} id
         * @return {?}
         */
        id => this.active.indexOf(id) > -1));
        if (!someExist)
            return;
        isDev() && setAction('Remove Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            return Object.assign({}, state, { active: Array.isArray(state.active) ? state.active.filter((/**
                 * @param {?} currentId
                 * @return {?}
                 */
                currentId => toArray.indexOf(currentId) === -1)) : null });
        }));
    }
    /**
     * Toggle active entities
     *
     * \@example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    toggleActive(ids) {
        /** @type {?} */
        const toArray = coerceArray(ids);
        /** @type {?} */
        const filterExists = (/**
         * @param {?} remove
         * @return {?}
         */
        remove => (/**
         * @param {?} id
         * @return {?}
         */
        id => this.active.includes(id) === remove));
        /** @type {?} */
        const remove = toArray.filter(filterExists(true));
        /** @type {?} */
        const add = toArray.filter(filterExists(false));
        this.removeActive(remove);
        this.addActive(add);
        isDev() && logAction('Toggle Active');
    }
    /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * \@example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     * @param {?=} initialState
     * @param {?=} storeConfig
     * @return {?}
     */
    createUIStore(initialState = {}, storeConfig = {}) {
        /** @type {?} */
        const defaults = { name: `UI/${this.storeName}`, idKey: this.idKey };
        this.ui = new EntityUIStore(initialState, Object.assign({}, defaults, storeConfig));
        return this.ui;
    }
    // @internal
    /**
     * @return {?}
     */
    destroy() {
        super.destroy();
        if (this.ui instanceof EntityStore) {
            this.ui.destroy();
        }
        this.entityActions.complete();
    }
    // @internal
    /**
     * @param {?} _
     * @param {?} nextEntity
     * @return {?}
     */
    akitaPreUpdateEntity(_, nextEntity) {
        return (/** @type {?} */ (nextEntity));
    }
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    akitaPreAddEntity(newEntity) {
        return (/** @type {?} */ (newEntity));
    }
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    akitaPreCheckEntity(newEntity) {
        return newEntity;
    }
    /**
     * @private
     * @return {?}
     */
    get ids() {
        return this._value().ids;
    }
    /**
     * @private
     * @return {?}
     */
    get entities() {
        return this._value().entities;
    }
    /**
     * @private
     * @return {?}
     */
    get active() {
        return this._value().active;
    }
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    _setActive(ids) {
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            return Object.assign({}, state, { active: ids });
        }));
    }
    /**
     * @private
     * @param {?=} add
     * @return {?}
     */
    handleUICreation(add = false) {
        /** @type {?} */
        const ids = this.ids;
        /** @type {?} */
        const isFunc = isFunction(this.ui._akitaCreateEntityFn);
        /** @type {?} */
        let uiEntities;
        /** @type {?} */
        const createFn = (/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const current = this.entities[id];
            /** @type {?} */
            const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;
            return Object.assign({ [this.idKey]: current[this.idKey] }, ui);
        });
        if (add) {
            uiEntities = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            id => isUndefined(this.ui.entities[id]))).map(createFn);
        }
        else {
            uiEntities = ids.map(createFn);
        }
        add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);
    }
    /**
     * @private
     * @return {?}
     */
    hasInitialUIState() {
        return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;
    }
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    handleUIRemove(ids) {
        if (this.hasUIStore()) {
            this.ui.remove(ids);
        }
    }
    /**
     * @private
     * @return {?}
     */
    hasUIStore() {
        return this.ui instanceof EntityUIStore;
    }
}
tslib_1.__decorate([
    transaction(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], EntityStore.prototype, "upsert", null);
tslib_1.__decorate([
    transaction(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", void 0)
], EntityStore.prototype, "toggleActive", null);
if (false) {
    /** @type {?} */
    EntityStore.prototype.ui;
    /**
     * @type {?}
     * @private
     */
    EntityStore.prototype.entityActions;
    /**
     * @type {?}
     * @protected
     */
    EntityStore.prototype.options;
}
// @internal
/**
 * @template UIState, DEPRECATED
 */
export class EntityUIStore extends EntityStore {
    /**
     * @param {?=} initialState
     * @param {?=} storeConfig
     */
    constructor(initialState = {}, storeConfig = {}) {
        super(initialState, storeConfig);
    }
    /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * \@example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     * @template EntityUI, Entity
     * @param {?} createFn
     * @return {?}
     */
    setInitialEntityState(createFn) {
        this._akitaCreateEntityFn = createFn;
    }
}
if (false) {
    /** @type {?} */
    EntityUIStore.prototype._akitaCreateEntityFn;
}
//# sourceMappingURL=data:application/json;base64,
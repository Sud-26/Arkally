import { Component, ChangeDetectionStrategy, Inject, ChangeDetectorRef, Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { debounceTime, tap, filter, startWith, take, concatMap, finalize, map } from 'rxjs/operators';
import { QuickForm, QuickFormModule } from 'ng-quick-form';
import { FormGroup, FormArray, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MDC_DIALOG_DATA, MdcDialog, MdcButtonModule, MdcCheckboxModule, MdcDialogModule, MdcFormFieldModule, MdcLinearProgressModule, MdcRadioModule, MdcSelectModule, MdcSwitchModule, MdcTextFieldModule } from '@angular-mdc/web';
import { throwError } from 'rxjs';
import { MdcDialog as MdcDialog$1 } from '@angular-mdc/web/dialog';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
class DialogService {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AlertComponent {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
AlertComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class ProgressComponent {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<mat-spinner></mat-spinner>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:flex;flex-direction:column;align-items:center}"]
            }] }
];
/** @nocollapse */
ProgressComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class ConfirmComponent {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
ConfirmComponent.decorators = [
    { type: Component, args: [{
                template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n    <button mat-button [mat-dialog-close]=\"false\">{{data.cancelButton}}</button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
ConfirmComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const assert = (/**
 * @param {?} condition
 * @param {?=} message
 * @return {?}
 */
(condition, message) => {
    if (!condition) {
        if (message) {
            throw new Error(`Assertion error: ${message}`);
        }
        else {
            throw new Error('Assertion error: Unexpected condition');
        }
    }
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Mark form control and all descendents as dirty and touched.
 *
 * \@param control
 * @type {?}
 */
const markAllAsDirtyAndTouched = (/**
 * @param {?} control
 * @return {?}
 */
(control) => {
    control.markAsDirty();
    control.markAsTouched();
    if (control instanceof FormGroup) {
        /** @type {?} */
        const keys = Object.keys(control.controls);
        for (let key of keys) {
            markAllAsDirtyAndTouched(control.controls[key]);
        }
    }
    else if (control instanceof FormArray) {
        for (let child of control.controls) {
            markAllAsDirtyAndTouched(child);
        }
    }
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Manage form creation and submission.
 */
class BaseFormComponent {
    /**
     * @param {?} cd
     * @param {?} dialogService
     * @param {?} closeable
     * @param {?} cancelMessage
     * @param {?} formFields
     * @param {?} rawValue
     * @param {?=} valueChanges
     * @param {?=} formCreated
     */
    constructor(cd, dialogService, closeable, cancelMessage, formFields, rawValue, valueChanges, formCreated) {
        this.cd = cd;
        this.dialogService = dialogService;
        this.closeable = closeable;
        this.cancelMessage = cancelMessage;
        this.formFields = formFields;
        this.rawValue = rawValue;
        this.valueChanges = valueChanges;
        this.formCreated = formCreated;
        this.submitted = false;
        this.form = QuickForm.makeForm(this.formFields);
        if (formCreated) {
            formCreated(this.form, this.cd);
        }
        if (this.valueChanges) {
            this.formSubscription = this.form.valueChanges.pipe(debounceTime(100), tap((/**
             * @param {?} value
             * @return {?}
             */
            value => (/** @type {?} */ (this.valueChanges)).next({
                value, form: this.form, cd
            })))).subscribe();
        }
    }
    /**
     * @return {?}
     */
    doClose() {
        // close form dialog, return false as result
        this.dialogService.withConfirm(this.cancelMessage).pipe(filter((/**
         * @param {?} confirm
         * @return {?}
         */
        confirm => confirm)), tap((/**
         * @return {?}
         */
        () => this.closeable.close(false)))).subscribe();
    }
    /**
     * @return {?}
     */
    doSubmit() {
        if (this.form.status === 'PENDING') {
            // if form is pending validation, let's wait...
            this.dialogService.withProgress(this.form.statusChanges.pipe(startWith(this.form.status), filter((/**
             * @param {?} status
             * @return {?}
             */
            status => status !== 'PENDING')), take(1), tap((/**
             * @return {?}
             */
            () => this.doNonPendingSubmit()))));
        }
        else {
            this.doNonPendingSubmit();
        }
    }
    /**
     * @return {?}
     */
    doNonPendingSubmit() {
        assert(this.form.status !== 'PENDING', 'Form status should not be pending');
        markAllAsDirtyAndTouched(this.form);
        this.submitted = true; // attempted to submit (affects validation messages)
        this.cd.markForCheck();
        if (!this.form.valid) {
            return;
        }
        // close form dialog, return form value object as result
        this.closeable.close(QuickForm.preProcessFormValues(this.rawValue ? this.form.getRawValue() : this.form.value));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class FormComponent extends BaseFormComponent {
    /**
     * @param {?} cd
     * @param {?} dialogRef
     * @param {?} dialogService
     * @param {?} data
     */
    constructor(cd, dialogRef, dialogService, data) {
        super(cd, dialogService, dialogRef, data.cancelMessage, data.fields, data.rawValue, data.valueChanges, data.formCreated);
        this.data = data;
    }
    /**
     * @return {?}
     */
    get attrFlexCell() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell ? true : null;
    }
    /**
     * @return {?}
     */
    get attrGutter() {
        /** @type {?} */
        const gutter = this.data.layout && this.data.layout.gutter
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return gutter ? true : null;
    }
    /**
     * @return {?}
     */
    get attrGrowItems() {
        /** @type {?} */
        const growItems = this.data.layout && this.data.layout.growItems
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return growItems ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDefaultCell6() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell === 6 ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDefaultCell12() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell === 12 ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDebug() {
        /** @type {?} */
        const debug = this.data.layout && this.data.layout.debug
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return debug ? true : null;
    }
}
FormComponent.decorators = [
    { type: Component, args: [{
                template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content>\n    <div *ngIf=\"data.content\" [innerHtml]=\"data.content\" class=\"content\"></div>\n    <div>\n        <form [formGroup]=\"form\"\n              [attr.flex-cell]=\"attrFlexCell\"\n              [attr.gutter]=\"attrGutter\"\n              [attr.grow-items]=\"attrGrowItems\"\n              [attr.default-cell-6]=\"attrDefaultCell6\"\n              [attr.default-cell-12]=\"attrDefaultCell12\"\n              [attr.debug]=\"attrDebug\"\n              autocomplete=\"off\">\n            <quick-form-field [field]=\"field\" [form]=\"form\"\n                              *ngFor=\"let field of formFields\"></quick-form-field>\n        </form>\n    </div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button color=\"primary\" type=\"button\"\n            (click)=\"doSubmit()\">{{data.submitButton}}</button>\n    <button mat-button type=\"button\" (click)=\"doClose()\">{{data.cancelButton}}</button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: MatDialogRef },
    { type: DialogService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatDialogService extends DialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        super();
        this.dialog = dialog;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    withProgress(work, title, options) {
        title = title || 'Please Wait...';
        /** @type {?} */
        let workOutput;
        /** @type {?} */
        const ref = this.dialog.open(ProgressComponent, Object.assign({ disableClose: true, data: { title } }, (options && options.dialogOptions || {})));
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        () => work)), tap((/**
         * @param {?} val
         * @return {?}
         */
        val => workOutput = val)), // set workOutput
        finalize((/**
         * @return {?}
         */
        () => ref.close()))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        () => workOutput)) // return workOutput
        );
    }
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    withAlert(title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        const dialogRef = this.dialog.open(AlertComponent, Object.assign({ disableClose: true, minWidth: 200, data: Object.assign({ title }, options) }, (options && options.dialogOptions || {})));
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result === true)));
    }
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    withConfirm(title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        const ref = this.dialog.open(ConfirmComponent, Object.assign({ disableClose: true, data: Object.assign({ title }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result)));
    }
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    withForm(title, fields, options) {
        options = options || {};
        options.submitButton = options.submitButton || 'Submit';
        options.cancelButton = options.cancelButton || 'Cancel';
        options.cancelMessage = options.cancelMessage || 'Cancel?';
        options.rawValue = options.rawValue || false;
        /** @type {?} */
        const ref = this.dialog.open(FormComponent, Object.assign({ disableClose: true, data: Object.assign({ title, fields }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed();
    }
}
MatDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
MatDialogService.ctorParameters = () => [
    { type: MatDialog }
];
/** @nocollapse */ MatDialogService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatDialogService_Factory() { return new MatDialogService(ɵɵinject(MatDialog)); }, token: MatDialogService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatDialogServiceModule {
}
MatDialogServiceModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AlertComponent,
                    ConfirmComponent,
                    FormComponent,
                    ProgressComponent
                ],
                entryComponents: [
                    AlertComponent,
                    ConfirmComponent,
                    FormComponent,
                    ProgressComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatButtonModule,
                    MatCheckboxModule,
                    MatDialogModule,
                    MatInputModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatSlideToggleModule,
                    QuickFormModule
                ],
                providers: [
                    MatDialogService,
                    { provide: DialogService, useClass: MatDialogService }
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class ProgressComponent$1 {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
ProgressComponent$1.decorators = [
    { type: Component, args: [{
                template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content>\n                <mdc-linear-progress></mdc-linear-progress>\n            </mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton>Ok</button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["button[mdcDialogButton]{opacity:0}mdc-dialog-actions{margin-top:-48px}"]
            }] }
];
/** @nocollapse */
ProgressComponent$1.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AlertComponent$1 {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
AlertComponent$1.decorators = [
    { type: Component, args: [{
                template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
AlertComponent$1.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class ConfirmComponent$1 {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
ConfirmComponent$1.decorators = [
    { type: Component, args: [{
                template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n                <button mdcDialogButton mdcDialogAction=\"close\">\n                    {{data.cancelButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
ConfirmComponent$1.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated No longer supported. Not enough time to maintain this implementation, contributions
 * welcomed.
 */
class MdcDialogService extends DialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        super();
        this.dialog = dialog;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @return {?}
     */
    withProgress(work, title) {
        title = title || 'Please Wait...';
        /** @type {?} */
        let workOutput;
        /** @type {?} */
        const ref = this.dialog.open(ProgressComponent$1, {
            clickOutsideToClose: false,
            escapeToClose: false,
            data: { title }
        });
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        () => work)), tap((/**
         * @param {?} val
         * @return {?}
         */
        val => workOutput = val)), // set workOutput
        finalize((/**
         * @return {?}
         */
        () => ref.close()))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        () => workOutput)) // return workOutput
        );
    }
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    withAlert(title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        const dialogRef = this.dialog.open(AlertComponent$1, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: Object.assign({ title }, options)
        });
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result === 'accept')));
    }
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    withConfirm(title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        const ref = this.dialog.open(ConfirmComponent$1, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: Object.assign({ title }, options)
        });
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result === 'accept')));
    }
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    withForm(title, fields, options) {
        return throwError('withForm() is not supported in MDC mode');
    }
}
MdcDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
MdcDialogService.ctorParameters = () => [
    { type: MdcDialog }
];
/** @nocollapse */ MdcDialogService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MdcDialogService_Factory() { return new MdcDialogService(ɵɵinject(MdcDialog$1)); }, token: MdcDialogService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MdcDialogServiceModule {
}
MdcDialogServiceModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AlertComponent$1,
                    ConfirmComponent$1,
                    ProgressComponent$1
                ],
                entryComponents: [
                    AlertComponent$1,
                    ConfirmComponent$1,
                    ProgressComponent$1
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MdcButtonModule,
                    MdcCheckboxModule,
                    MdcDialogModule,
                    MdcFormFieldModule,
                    MdcLinearProgressModule,
                    MdcRadioModule,
                    MdcSelectModule,
                    MdcSwitchModule,
                    MdcTextFieldModule
                ],
                providers: [
                    MdcDialogService,
                    { provide: DialogService, useClass: MdcDialogService }
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DialogService, MatDialogService, MatDialogServiceModule, MdcDialogService, MdcDialogServiceModule, AlertComponent as ɵa, ConfirmComponent as ɵb, FormComponent as ɵc, BaseFormComponent as ɵd, ProgressComponent as ɵe, AlertComponent$1 as ɵf, ConfirmComponent$1 as ɵg, ProgressComponent$1 as ɵh };
//# sourceMappingURL=dialog-service.js.map

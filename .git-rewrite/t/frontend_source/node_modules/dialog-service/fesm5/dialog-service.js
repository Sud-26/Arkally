import { __values, __extends, __assign } from 'tslib';
import { Component, ChangeDetectionStrategy, Inject, ChangeDetectorRef, Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { filter, tap, startWith, take, debounceTime, concatMap, finalize, map } from 'rxjs/operators';
import { QuickForm, QuickFormModule } from 'ng-quick-form';
import { FormGroup, FormArray, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MDC_DIALOG_DATA, MdcDialog, MdcButtonModule, MdcCheckboxModule, MdcDialogModule, MdcFormFieldModule, MdcLinearProgressModule, MdcRadioModule, MdcSelectModule, MdcSwitchModule, MdcTextFieldModule } from '@angular-mdc/web';
import { throwError } from 'rxjs';
import { MdcDialog as MdcDialog$1 } from '@angular-mdc/web/dialog';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
var  /**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
DialogService = /** @class */ (function () {
    function DialogService() {
    }
    return DialogService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var AlertComponent = /** @class */ (function () {
    function AlertComponent(data) {
        this.data = data;
    }
    AlertComponent.decorators = [
        { type: Component, args: [{
                    template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return AlertComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var ProgressComponent = /** @class */ (function () {
    function ProgressComponent(data) {
        this.data = data;
    }
    ProgressComponent.decorators = [
        { type: Component, args: [{
                    template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<mat-spinner></mat-spinner>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:flex;flex-direction:column;align-items:center}"]
                }] }
    ];
    /** @nocollapse */
    ProgressComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return ProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var ConfirmComponent = /** @class */ (function () {
    function ConfirmComponent(data) {
        this.data = data;
    }
    ConfirmComponent.decorators = [
        { type: Component, args: [{
                    template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n    <button mat-button [mat-dialog-close]=\"false\">{{data.cancelButton}}</button>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    ConfirmComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return ConfirmComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var assert = (/**
 * @param {?} condition
 * @param {?=} message
 * @return {?}
 */
function (condition, message) {
    if (!condition) {
        if (message) {
            throw new Error("Assertion error: " + message);
        }
        else {
            throw new Error('Assertion error: Unexpected condition');
        }
    }
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Mark form control and all descendents as dirty and touched.
 *
 * \@param control
 * @type {?}
 */
var markAllAsDirtyAndTouched = (/**
 * @param {?} control
 * @return {?}
 */
function (control) {
    var e_1, _a, e_2, _b;
    control.markAsDirty();
    control.markAsTouched();
    if (control instanceof FormGroup) {
        /** @type {?} */
        var keys = Object.keys(control.controls);
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                markAllAsDirtyAndTouched(control.controls[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else if (control instanceof FormArray) {
        try {
            for (var _c = __values(control.controls), _d = _c.next(); !_d.done; _d = _c.next()) {
                var child = _d.value;
                markAllAsDirtyAndTouched(child);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Manage form creation and submission.
 */
var  /**
 * Manage form creation and submission.
 */
BaseFormComponent = /** @class */ (function () {
    function BaseFormComponent(cd, dialogService, closeable, cancelMessage, formFields, rawValue, valueChanges, formCreated) {
        var _this = this;
        this.cd = cd;
        this.dialogService = dialogService;
        this.closeable = closeable;
        this.cancelMessage = cancelMessage;
        this.formFields = formFields;
        this.rawValue = rawValue;
        this.valueChanges = valueChanges;
        this.formCreated = formCreated;
        this.submitted = false;
        this.form = QuickForm.makeForm(this.formFields);
        if (formCreated) {
            formCreated(this.form, this.cd);
        }
        if (this.valueChanges) {
            this.formSubscription = this.form.valueChanges.pipe(debounceTime(100), tap((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return (/** @type {?} */ (_this.valueChanges)).next({
                value: value, form: _this.form, cd: cd
            }); }))).subscribe();
        }
    }
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doClose = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // close form dialog, return false as result
        this.dialogService.withConfirm(this.cancelMessage).pipe(filter((/**
         * @param {?} confirm
         * @return {?}
         */
        function (confirm) { return confirm; })), tap((/**
         * @return {?}
         */
        function () { return _this.closeable.close(false); }))).subscribe();
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doSubmit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.form.status === 'PENDING') {
            // if form is pending validation, let's wait...
            this.dialogService.withProgress(this.form.statusChanges.pipe(startWith(this.form.status), filter((/**
             * @param {?} status
             * @return {?}
             */
            function (status) { return status !== 'PENDING'; })), take(1), tap((/**
             * @return {?}
             */
            function () { return _this.doNonPendingSubmit(); }))));
        }
        else {
            this.doNonPendingSubmit();
        }
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doNonPendingSubmit = /**
     * @return {?}
     */
    function () {
        assert(this.form.status !== 'PENDING', 'Form status should not be pending');
        markAllAsDirtyAndTouched(this.form);
        this.submitted = true; // attempted to submit (affects validation messages)
        this.cd.markForCheck();
        if (!this.form.valid) {
            return;
        }
        // close form dialog, return form value object as result
        this.closeable.close(QuickForm.preProcessFormValues(this.rawValue ? this.form.getRawValue() : this.form.value));
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
    };
    return BaseFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var FormComponent = /** @class */ (function (_super) {
    __extends(FormComponent, _super);
    function FormComponent(cd, dialogRef, dialogService, data) {
        var _this = _super.call(this, cd, dialogService, dialogRef, data.cancelMessage, data.fields, data.rawValue, data.valueChanges, data.formCreated) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(FormComponent.prototype, "attrFlexCell", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var flexCell = this.data.layout && this.data.layout.flexCell
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return flexCell ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormComponent.prototype, "attrGutter", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var gutter = this.data.layout && this.data.layout.gutter
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return gutter ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormComponent.prototype, "attrGrowItems", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var growItems = this.data.layout && this.data.layout.growItems
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return growItems ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormComponent.prototype, "attrDefaultCell6", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var flexCell = this.data.layout && this.data.layout.flexCell
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return flexCell === 6 ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormComponent.prototype, "attrDefaultCell12", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var flexCell = this.data.layout && this.data.layout.flexCell
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return flexCell === 12 ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormComponent.prototype, "attrDebug", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var debug = this.data.layout && this.data.layout.debug
            // must return null for Angular to remove the attribute
            ;
            // must return null for Angular to remove the attribute
            return debug ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    FormComponent.decorators = [
        { type: Component, args: [{
                    template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content>\n    <div *ngIf=\"data.content\" [innerHtml]=\"data.content\" class=\"content\"></div>\n    <div>\n        <form [formGroup]=\"form\"\n              [attr.flex-cell]=\"attrFlexCell\"\n              [attr.gutter]=\"attrGutter\"\n              [attr.grow-items]=\"attrGrowItems\"\n              [attr.default-cell-6]=\"attrDefaultCell6\"\n              [attr.default-cell-12]=\"attrDefaultCell12\"\n              [attr.debug]=\"attrDebug\"\n              autocomplete=\"off\">\n            <quick-form-field [field]=\"field\" [form]=\"form\"\n                              *ngFor=\"let field of formFields\"></quick-form-field>\n        </form>\n    </div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button color=\"primary\" type=\"button\"\n            (click)=\"doSubmit()\">{{data.submitButton}}</button>\n    <button mat-button type=\"button\" (click)=\"doClose()\">{{data.cancelButton}}</button>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: MatDialogRef },
        { type: DialogService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return FormComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatDialogService = /** @class */ (function (_super) {
    __extends(MatDialogService, _super);
    function MatDialogService(dialog) {
        var _this = _super.call(this) || this;
        _this.dialog = dialog;
        return _this;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withProgress = /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (work, title, options) {
        title = title || 'Please Wait...';
        /** @type {?} */
        var workOutput;
        /** @type {?} */
        var ref = this.dialog.open(ProgressComponent, __assign({ disableClose: true, data: { title: title } }, (options && options.dialogOptions || {})));
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        function () { return work; })), tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return workOutput = val; })), // set workOutput
        finalize((/**
         * @return {?}
         */
        function () { return ref.close(); }))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        function () { return workOutput; })) // return workOutput
        );
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withAlert = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        var dialogRef = this.dialog.open(AlertComponent, __assign({ disableClose: true, minWidth: 200, data: __assign({ title: title }, options) }, (options && options.dialogOptions || {})));
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === true; })));
    };
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withConfirm = /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        var ref = this.dialog.open(ConfirmComponent, __assign({ disableClose: true, data: __assign({ title: title }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result; })));
    };
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withForm = /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    function (title, fields, options) {
        options = options || {};
        options.submitButton = options.submitButton || 'Submit';
        options.cancelButton = options.cancelButton || 'Cancel';
        options.cancelMessage = options.cancelMessage || 'Cancel?';
        options.rawValue = options.rawValue || false;
        /** @type {?} */
        var ref = this.dialog.open(FormComponent, __assign({ disableClose: true, data: __assign({ title: title, fields: fields }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed();
    };
    MatDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MatDialogService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    /** @nocollapse */ MatDialogService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatDialogService_Factory() { return new MatDialogService(ɵɵinject(MatDialog)); }, token: MatDialogService, providedIn: "root" });
    return MatDialogService;
}(DialogService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatDialogServiceModule = /** @class */ (function () {
    function MatDialogServiceModule() {
    }
    MatDialogServiceModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        AlertComponent,
                        ConfirmComponent,
                        FormComponent,
                        ProgressComponent
                    ],
                    entryComponents: [
                        AlertComponent,
                        ConfirmComponent,
                        FormComponent,
                        ProgressComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MatButtonModule,
                        MatCheckboxModule,
                        MatDialogModule,
                        MatInputModule,
                        MatProgressSpinnerModule,
                        MatRadioModule,
                        MatSelectModule,
                        MatSlideToggleModule,
                        QuickFormModule
                    ],
                    providers: [
                        MatDialogService,
                        { provide: DialogService, useClass: MatDialogService }
                    ]
                },] }
    ];
    return MatDialogServiceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var ProgressComponent$1 = /** @class */ (function () {
    function ProgressComponent(data) {
        this.data = data;
    }
    ProgressComponent.decorators = [
        { type: Component, args: [{
                    template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content>\n                <mdc-linear-progress></mdc-linear-progress>\n            </mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton>Ok</button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["button[mdcDialogButton]{opacity:0}mdc-dialog-actions{margin-top:-48px}"]
                }] }
    ];
    /** @nocollapse */
    ProgressComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
    ]; };
    return ProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var AlertComponent$1 = /** @class */ (function () {
    function AlertComponent(data) {
        this.data = data;
    }
    AlertComponent.decorators = [
        { type: Component, args: [{
                    template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
    ]; };
    return AlertComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var ConfirmComponent$1 = /** @class */ (function () {
    function ConfirmComponent(data) {
        this.data = data;
    }
    ConfirmComponent.decorators = [
        { type: Component, args: [{
                    template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n                <button mdcDialogButton mdcDialogAction=\"close\">\n                    {{data.cancelButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    ConfirmComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MDC_DIALOG_DATA,] }] }
    ]; };
    return ConfirmComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated No longer supported. Not enough time to maintain this implementation, contributions
 * welcomed.
 */
var MdcDialogService = /** @class */ (function (_super) {
    __extends(MdcDialogService, _super);
    function MdcDialogService(dialog) {
        var _this = _super.call(this) || this;
        _this.dialog = dialog;
        return _this;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @return {?}
     */
    MdcDialogService.prototype.withProgress = /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @return {?}
     */
    function (work, title) {
        title = title || 'Please Wait...';
        /** @type {?} */
        var workOutput;
        /** @type {?} */
        var ref = this.dialog.open(ProgressComponent$1, {
            clickOutsideToClose: false,
            escapeToClose: false,
            data: { title: title }
        });
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        function () { return work; })), tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return workOutput = val; })), // set workOutput
        finalize((/**
         * @return {?}
         */
        function () { return ref.close(); }))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        function () { return workOutput; })) // return workOutput
        );
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withAlert = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        var dialogRef = this.dialog.open(AlertComponent$1, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: __assign({ title: title }, options)
        });
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === 'accept'; })));
    };
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withConfirm = /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        var ref = this.dialog.open(ConfirmComponent$1, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: __assign({ title: title }, options)
        });
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === 'accept'; })));
    };
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withForm = /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    function (title, fields, options) {
        return throwError('withForm() is not supported in MDC mode');
    };
    MdcDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MdcDialogService.ctorParameters = function () { return [
        { type: MdcDialog }
    ]; };
    /** @nocollapse */ MdcDialogService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MdcDialogService_Factory() { return new MdcDialogService(ɵɵinject(MdcDialog$1)); }, token: MdcDialogService, providedIn: "root" });
    return MdcDialogService;
}(DialogService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcDialogServiceModule = /** @class */ (function () {
    function MdcDialogServiceModule() {
    }
    MdcDialogServiceModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        AlertComponent$1,
                        ConfirmComponent$1,
                        ProgressComponent$1
                    ],
                    entryComponents: [
                        AlertComponent$1,
                        ConfirmComponent$1,
                        ProgressComponent$1
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MdcButtonModule,
                        MdcCheckboxModule,
                        MdcDialogModule,
                        MdcFormFieldModule,
                        MdcLinearProgressModule,
                        MdcRadioModule,
                        MdcSelectModule,
                        MdcSwitchModule,
                        MdcTextFieldModule
                    ],
                    providers: [
                        MdcDialogService,
                        { provide: DialogService, useClass: MdcDialogService }
                    ]
                },] }
    ];
    return MdcDialogServiceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DialogService, MatDialogService, MatDialogServiceModule, MdcDialogService, MdcDialogServiceModule, AlertComponent as ɵa, ConfirmComponent as ɵb, FormComponent as ɵc, BaseFormComponent as ɵd, ProgressComponent as ɵe, AlertComponent$1 as ɵf, ConfirmComponent$1 as ɵg, ProgressComponent$1 as ɵh };
//# sourceMappingURL=dialog-service.js.map

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/dialog'), require('rxjs/operators'), require('ng-quick-form'), require('@angular/forms'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/input'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/slide-toggle'), require('@angular-mdc/web'), require('rxjs'), require('@angular-mdc/web/dialog')) :
    typeof define === 'function' && define.amd ? define('dialog-service', ['exports', '@angular/core', '@angular/material/dialog', 'rxjs/operators', 'ng-quick-form', '@angular/forms', '@angular/common', '@angular/material/button', '@angular/material/checkbox', '@angular/material/input', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/slide-toggle', '@angular-mdc/web', 'rxjs', '@angular-mdc/web/dialog'], factory) :
    (global = global || self, factory(global['dialog-service'] = {}, global.ng.core, global.ng.material.dialog, global.rxjs.operators, global.ngQuickForm, global.ng.forms, global.ng.common, global.ng.material.button, global.ng.material.checkbox, global.ng.material.input, global.ng.material['progress-spinner'], global.ng.material.radio, global.ng.material.select, global.ng.material['slide-toggle'], global.web, global.rxjs, global.dialog$1));
}(this, function (exports, core, dialog, operators, ngQuickForm, forms, common, button, checkbox, input, progressSpinner, radio, select, slideToggle, web, rxjs, dialog$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The DialogService class exposes functions used to create alert, confirmation, progress and form
     *  based dialogs.
     * @abstract
     */
    var   /**
     * The DialogService class exposes functions used to create alert, confirmation, progress and form
     *  based dialogs.
     * @abstract
     */
    DialogService = /** @class */ (function () {
        function DialogService() {
        }
        return DialogService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var AlertComponent = /** @class */ (function () {
        function AlertComponent(data) {
            this.data = data;
        }
        AlertComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        AlertComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
        ]; };
        return AlertComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var ProgressComponent = /** @class */ (function () {
        function ProgressComponent(data) {
            this.data = data;
        }
        ProgressComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<mat-spinner></mat-spinner>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host{display:flex;flex-direction:column;align-items:center}"]
                    }] }
        ];
        /** @nocollapse */
        ProgressComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
        ]; };
        return ProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var ConfirmComponent = /** @class */ (function () {
        function ConfirmComponent(data) {
            this.data = data;
        }
        ConfirmComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content *ngIf=\"data.content\">\n    <div [innerHtml]=\"data.content\" class=\"content\"></div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>{{data.acceptButton}}</button>\n    <button mat-button [mat-dialog-close]=\"false\">{{data.cancelButton}}</button>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        ConfirmComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
        ]; };
        return ConfirmComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var assert = (/**
     * @param {?} condition
     * @param {?=} message
     * @return {?}
     */
    function (condition, message) {
        if (!condition) {
            if (message) {
                throw new Error("Assertion error: " + message);
            }
            else {
                throw new Error('Assertion error: Unexpected condition');
            }
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Mark form control and all descendents as dirty and touched.
     *
     * \@param control
     * @type {?}
     */
    var markAllAsDirtyAndTouched = (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var e_1, _a, e_2, _b;
        control.markAsDirty();
        control.markAsTouched();
        if (control instanceof forms.FormGroup) {
            /** @type {?} */
            var keys = Object.keys(control.controls);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    markAllAsDirtyAndTouched(control.controls[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (control instanceof forms.FormArray) {
            try {
                for (var _c = __values(control.controls), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var child = _d.value;
                    markAllAsDirtyAndTouched(child);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Manage form creation and submission.
     */
    var   /**
     * Manage form creation and submission.
     */
    BaseFormComponent = /** @class */ (function () {
        function BaseFormComponent(cd, dialogService, closeable, cancelMessage, formFields, rawValue, valueChanges, formCreated) {
            var _this = this;
            this.cd = cd;
            this.dialogService = dialogService;
            this.closeable = closeable;
            this.cancelMessage = cancelMessage;
            this.formFields = formFields;
            this.rawValue = rawValue;
            this.valueChanges = valueChanges;
            this.formCreated = formCreated;
            this.submitted = false;
            this.form = ngQuickForm.QuickForm.makeForm(this.formFields);
            if (formCreated) {
                formCreated(this.form, this.cd);
            }
            if (this.valueChanges) {
                this.formSubscription = this.form.valueChanges.pipe(operators.debounceTime(100), operators.tap((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return (/** @type {?} */ (_this.valueChanges)).next({
                    value: value, form: _this.form, cd: cd
                }); }))).subscribe();
            }
        }
        /**
         * @return {?}
         */
        BaseFormComponent.prototype.doClose = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // close form dialog, return false as result
            this.dialogService.withConfirm(this.cancelMessage).pipe(operators.filter((/**
             * @param {?} confirm
             * @return {?}
             */
            function (confirm) { return confirm; })), operators.tap((/**
             * @return {?}
             */
            function () { return _this.closeable.close(false); }))).subscribe();
        };
        /**
         * @return {?}
         */
        BaseFormComponent.prototype.doSubmit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.form.status === 'PENDING') {
                // if form is pending validation, let's wait...
                this.dialogService.withProgress(this.form.statusChanges.pipe(operators.startWith(this.form.status), operators.filter((/**
                 * @param {?} status
                 * @return {?}
                 */
                function (status) { return status !== 'PENDING'; })), operators.take(1), operators.tap((/**
                 * @return {?}
                 */
                function () { return _this.doNonPendingSubmit(); }))));
            }
            else {
                this.doNonPendingSubmit();
            }
        };
        /**
         * @return {?}
         */
        BaseFormComponent.prototype.doNonPendingSubmit = /**
         * @return {?}
         */
        function () {
            assert(this.form.status !== 'PENDING', 'Form status should not be pending');
            markAllAsDirtyAndTouched(this.form);
            this.submitted = true; // attempted to submit (affects validation messages)
            this.cd.markForCheck();
            if (!this.form.valid) {
                return;
            }
            // close form dialog, return form value object as result
            this.closeable.close(ngQuickForm.QuickForm.preProcessFormValues(this.rawValue ? this.form.getRawValue() : this.form.value));
        };
        /**
         * @return {?}
         */
        BaseFormComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.formSubscription) {
                this.formSubscription.unsubscribe();
            }
        };
        return BaseFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var FormComponent = /** @class */ (function (_super) {
        __extends(FormComponent, _super);
        function FormComponent(cd, dialogRef, dialogService, data) {
            var _this = _super.call(this, cd, dialogService, dialogRef, data.cancelMessage, data.fields, data.rawValue, data.valueChanges, data.formCreated) || this;
            _this.data = data;
            return _this;
        }
        Object.defineProperty(FormComponent.prototype, "attrFlexCell", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var flexCell = this.data.layout && this.data.layout.flexCell
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return flexCell ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "attrGutter", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var gutter = this.data.layout && this.data.layout.gutter
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return gutter ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "attrGrowItems", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var growItems = this.data.layout && this.data.layout.growItems
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return growItems ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "attrDefaultCell6", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var flexCell = this.data.layout && this.data.layout.flexCell
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return flexCell === 6 ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "attrDefaultCell12", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var flexCell = this.data.layout && this.data.layout.flexCell
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return flexCell === 12 ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "attrDebug", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var debug = this.data.layout && this.data.layout.debug
                // must return null for Angular to remove the attribute
                ;
                // must return null for Angular to remove the attribute
                return debug ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        FormComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content>\n    <div *ngIf=\"data.content\" [innerHtml]=\"data.content\" class=\"content\"></div>\n    <div>\n        <form [formGroup]=\"form\"\n              [attr.flex-cell]=\"attrFlexCell\"\n              [attr.gutter]=\"attrGutter\"\n              [attr.grow-items]=\"attrGrowItems\"\n              [attr.default-cell-6]=\"attrDefaultCell6\"\n              [attr.default-cell-12]=\"attrDefaultCell12\"\n              [attr.debug]=\"attrDebug\"\n              autocomplete=\"off\">\n            <quick-form-field [field]=\"field\" [form]=\"form\"\n                              *ngFor=\"let field of formFields\"></quick-form-field>\n        </form>\n    </div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button color=\"primary\" type=\"button\"\n            (click)=\"doSubmit()\">{{data.submitButton}}</button>\n    <button mat-button type=\"button\" (click)=\"doClose()\">{{data.cancelButton}}</button>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        FormComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: dialog.MatDialogRef },
            { type: DialogService },
            { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
        ]; };
        return FormComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatDialogService = /** @class */ (function (_super) {
        __extends(MatDialogService, _super);
        function MatDialogService(dialog) {
            var _this = _super.call(this) || this;
            _this.dialog = dialog;
            return _this;
        }
        /**
         * @template T
         * @param {?} work
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        MatDialogService.prototype.withProgress = /**
         * @template T
         * @param {?} work
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        function (work, title, options) {
            title = title || 'Please Wait...';
            /** @type {?} */
            var workOutput;
            /** @type {?} */
            var ref = this.dialog.open(ProgressComponent, __assign({ disableClose: true, data: { title: title } }, (options && options.dialogOptions || {})));
            ref.afterOpened().pipe(operators.concatMap((/**
             * @return {?}
             */
            function () { return work; })), operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return workOutput = val; })), // set workOutput
            operators.finalize((/**
             * @return {?}
             */
            function () { return ref.close(); }))).subscribe();
            return ref.afterClosed().pipe(operators.map((/**
             * @return {?}
             */
            function () { return workOutput; })) // return workOutput
            );
        };
        /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
        MatDialogService.prototype.withAlert = /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
        function (title, options) {
            options = options || {};
            options.acceptButton = options.acceptButton || 'OK';
            /** @type {?} */
            var dialogRef = this.dialog.open(AlertComponent, __assign({ disableClose: true, minWidth: 200, data: __assign({ title: title }, options) }, (options && options.dialogOptions || {})));
            return dialogRef.afterClosed().pipe(operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result === true; })));
        };
        /**
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        MatDialogService.prototype.withConfirm = /**
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        function (title, options) {
            title = title || 'Confirm?';
            options = options || {};
            options.acceptButton = options.acceptButton || 'Yes';
            options.cancelButton = options.cancelButton || 'No';
            /** @type {?} */
            var ref = this.dialog.open(ConfirmComponent, __assign({ disableClose: true, data: __assign({ title: title }, options) }, (options && options.dialogOptions || {})));
            return ref.afterClosed().pipe(operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result; })));
        };
        /**
         * @param {?} title
         * @param {?} fields
         * @param {?=} options
         * @return {?}
         */
        MatDialogService.prototype.withForm = /**
         * @param {?} title
         * @param {?} fields
         * @param {?=} options
         * @return {?}
         */
        function (title, fields, options) {
            options = options || {};
            options.submitButton = options.submitButton || 'Submit';
            options.cancelButton = options.cancelButton || 'Cancel';
            options.cancelMessage = options.cancelMessage || 'Cancel?';
            options.rawValue = options.rawValue || false;
            /** @type {?} */
            var ref = this.dialog.open(FormComponent, __assign({ disableClose: true, data: __assign({ title: title, fields: fields }, options) }, (options && options.dialogOptions || {})));
            return ref.afterClosed();
        };
        MatDialogService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        MatDialogService.ctorParameters = function () { return [
            { type: dialog.MatDialog }
        ]; };
        /** @nocollapse */ MatDialogService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MatDialogService_Factory() { return new MatDialogService(core.ɵɵinject(dialog.MatDialog)); }, token: MatDialogService, providedIn: "root" });
        return MatDialogService;
    }(DialogService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatDialogServiceModule = /** @class */ (function () {
        function MatDialogServiceModule() {
        }
        MatDialogServiceModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            AlertComponent,
                            ConfirmComponent,
                            FormComponent,
                            ProgressComponent
                        ],
                        entryComponents: [
                            AlertComponent,
                            ConfirmComponent,
                            FormComponent,
                            ProgressComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            button.MatButtonModule,
                            checkbox.MatCheckboxModule,
                            dialog.MatDialogModule,
                            input.MatInputModule,
                            progressSpinner.MatProgressSpinnerModule,
                            radio.MatRadioModule,
                            select.MatSelectModule,
                            slideToggle.MatSlideToggleModule,
                            ngQuickForm.QuickFormModule
                        ],
                        providers: [
                            MatDialogService,
                            { provide: DialogService, useClass: MatDialogService }
                        ]
                    },] }
        ];
        return MatDialogServiceModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var ProgressComponent$1 = /** @class */ (function () {
        function ProgressComponent(data) {
            this.data = data;
        }
        ProgressComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content>\n                <mdc-linear-progress></mdc-linear-progress>\n            </mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton>Ok</button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["button[mdcDialogButton]{opacity:0}mdc-dialog-actions{margin-top:-48px}"]
                    }] }
        ];
        /** @nocollapse */
        ProgressComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [web.MDC_DIALOG_DATA,] }] }
        ]; };
        return ProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var AlertComponent$1 = /** @class */ (function () {
        function AlertComponent(data) {
            this.data = data;
        }
        AlertComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        AlertComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [web.MDC_DIALOG_DATA,] }] }
        ]; };
        return AlertComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var ConfirmComponent$1 = /** @class */ (function () {
        function ConfirmComponent(data) {
            this.data = data;
        }
        ConfirmComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<mdc-dialog>\n    <mdc-dialog-container>\n        <mdc-dialog-surface>\n            <mdc-dialog-title>{{data.title}}</mdc-dialog-title>\n            <mdc-dialog-content *ngIf=\"data.content\">{{data.content}}</mdc-dialog-content>\n            <mdc-dialog-actions>\n                <button mdcDialogButton mdcDialogAction=\"accept\">\n                    {{data.acceptButton}}\n                </button>\n                <button mdcDialogButton mdcDialogAction=\"close\">\n                    {{data.cancelButton}}\n                </button>\n            </mdc-dialog-actions>\n        </mdc-dialog-surface>\n    </mdc-dialog-container>\n</mdc-dialog>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        ConfirmComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [web.MDC_DIALOG_DATA,] }] }
        ]; };
        return ConfirmComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated No longer supported. Not enough time to maintain this implementation, contributions
     * welcomed.
     */
    var MdcDialogService = /** @class */ (function (_super) {
        __extends(MdcDialogService, _super);
        function MdcDialogService(dialog) {
            var _this = _super.call(this) || this;
            _this.dialog = dialog;
            return _this;
        }
        /**
         * @template T
         * @param {?} work
         * @param {?=} title
         * @return {?}
         */
        MdcDialogService.prototype.withProgress = /**
         * @template T
         * @param {?} work
         * @param {?=} title
         * @return {?}
         */
        function (work, title) {
            title = title || 'Please Wait...';
            /** @type {?} */
            var workOutput;
            /** @type {?} */
            var ref = this.dialog.open(ProgressComponent$1, {
                clickOutsideToClose: false,
                escapeToClose: false,
                data: { title: title }
            });
            ref.afterOpened().pipe(operators.concatMap((/**
             * @return {?}
             */
            function () { return work; })), operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return workOutput = val; })), // set workOutput
            operators.finalize((/**
             * @return {?}
             */
            function () { return ref.close(); }))).subscribe();
            return ref.afterClosed().pipe(operators.map((/**
             * @return {?}
             */
            function () { return workOutput; })) // return workOutput
            );
        };
        /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
        MdcDialogService.prototype.withAlert = /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
        function (title, options) {
            options = options || {};
            options.acceptButton = options.acceptButton || 'OK';
            /** @type {?} */
            var dialogRef = this.dialog.open(AlertComponent$1, {
                escapeToClose: false,
                clickOutsideToClose: false,
                data: __assign({ title: title }, options)
            });
            return dialogRef.afterClosed().pipe(operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result === 'accept'; })));
        };
        /**
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        MdcDialogService.prototype.withConfirm = /**
         * @param {?=} title
         * @param {?=} options
         * @return {?}
         */
        function (title, options) {
            title = title || 'Confirm?';
            options = options || {};
            options.acceptButton = options.acceptButton || 'Yes';
            options.cancelButton = options.cancelButton || 'No';
            /** @type {?} */
            var ref = this.dialog.open(ConfirmComponent$1, {
                escapeToClose: false,
                clickOutsideToClose: false,
                data: __assign({ title: title }, options)
            });
            return ref.afterClosed().pipe(operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result === 'accept'; })));
        };
        /**
         * @param {?} title
         * @param {?} fields
         * @param {?=} options
         * @return {?}
         */
        MdcDialogService.prototype.withForm = /**
         * @param {?} title
         * @param {?} fields
         * @param {?=} options
         * @return {?}
         */
        function (title, fields, options) {
            return rxjs.throwError('withForm() is not supported in MDC mode');
        };
        MdcDialogService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        MdcDialogService.ctorParameters = function () { return [
            { type: web.MdcDialog }
        ]; };
        /** @nocollapse */ MdcDialogService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MdcDialogService_Factory() { return new MdcDialogService(core.ɵɵinject(dialog$1.MdcDialog)); }, token: MdcDialogService, providedIn: "root" });
        return MdcDialogService;
    }(DialogService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MdcDialogServiceModule = /** @class */ (function () {
        function MdcDialogServiceModule() {
        }
        MdcDialogServiceModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            AlertComponent$1,
                            ConfirmComponent$1,
                            ProgressComponent$1
                        ],
                        entryComponents: [
                            AlertComponent$1,
                            ConfirmComponent$1,
                            ProgressComponent$1
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            web.MdcButtonModule,
                            web.MdcCheckboxModule,
                            web.MdcDialogModule,
                            web.MdcFormFieldModule,
                            web.MdcLinearProgressModule,
                            web.MdcRadioModule,
                            web.MdcSelectModule,
                            web.MdcSwitchModule,
                            web.MdcTextFieldModule
                        ],
                        providers: [
                            MdcDialogService,
                            { provide: DialogService, useClass: MdcDialogService }
                        ]
                    },] }
        ];
        return MdcDialogServiceModule;
    }());

    exports.DialogService = DialogService;
    exports.MatDialogService = MatDialogService;
    exports.MatDialogServiceModule = MatDialogServiceModule;
    exports.MdcDialogService = MdcDialogService;
    exports.MdcDialogServiceModule = MdcDialogServiceModule;
    exports.ɵa = AlertComponent;
    exports.ɵb = ConfirmComponent;
    exports.ɵc = FormComponent;
    exports.ɵd = BaseFormComponent;
    exports.ɵe = ProgressComponent;
    exports.ɵf = AlertComponent$1;
    exports.ɵg = ConfirmComponent$1;
    exports.ɵh = ProgressComponent$1;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=dialog-service.umd.js.map

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, filter, startWith, take, tap } from 'rxjs/operators';
import { assert } from './util/assert';
import { QuickForm } from 'ng-quick-form';
import { markAllAsDirtyAndTouched } from './util/markAllAsDirtyAndTouched';
/**
 * Manage form creation and submission.
 */
export class BaseFormComponent {
    /**
     * @param {?} cd
     * @param {?} dialogService
     * @param {?} closeable
     * @param {?} cancelMessage
     * @param {?} formFields
     * @param {?} rawValue
     * @param {?=} valueChanges
     * @param {?=} formCreated
     */
    constructor(cd, dialogService, closeable, cancelMessage, formFields, rawValue, valueChanges, formCreated) {
        this.cd = cd;
        this.dialogService = dialogService;
        this.closeable = closeable;
        this.cancelMessage = cancelMessage;
        this.formFields = formFields;
        this.rawValue = rawValue;
        this.valueChanges = valueChanges;
        this.formCreated = formCreated;
        this.submitted = false;
        this.form = QuickForm.makeForm(this.formFields);
        if (formCreated) {
            formCreated(this.form, this.cd);
        }
        if (this.valueChanges) {
            this.formSubscription = this.form.valueChanges.pipe(debounceTime(100), tap((/**
             * @param {?} value
             * @return {?}
             */
            value => (/** @type {?} */ (this.valueChanges)).next({
                value, form: this.form, cd
            })))).subscribe();
        }
    }
    /**
     * @return {?}
     */
    doClose() {
        // close form dialog, return false as result
        this.dialogService.withConfirm(this.cancelMessage).pipe(filter((/**
         * @param {?} confirm
         * @return {?}
         */
        confirm => confirm)), tap((/**
         * @return {?}
         */
        () => this.closeable.close(false)))).subscribe();
    }
    /**
     * @return {?}
     */
    doSubmit() {
        if (this.form.status === 'PENDING') {
            // if form is pending validation, let's wait...
            this.dialogService.withProgress(this.form.statusChanges.pipe(startWith(this.form.status), filter((/**
             * @param {?} status
             * @return {?}
             */
            status => status !== 'PENDING')), take(1), tap((/**
             * @return {?}
             */
            () => this.doNonPendingSubmit()))));
        }
        else {
            this.doNonPendingSubmit();
        }
    }
    /**
     * @return {?}
     */
    doNonPendingSubmit() {
        assert(this.form.status !== 'PENDING', 'Form status should not be pending');
        markAllAsDirtyAndTouched(this.form);
        this.submitted = true; // attempted to submit (affects validation messages)
        this.cd.markForCheck();
        if (!this.form.valid) {
            return;
        }
        // close form dialog, return form value object as result
        this.closeable.close(QuickForm.preProcessFormValues(this.rawValue ? this.form.getRawValue() : this.form.value));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
    }
}
if (false) {
    /** @type {?} */
    BaseFormComponent.prototype.submitted;
    /** @type {?} */
    BaseFormComponent.prototype.form;
    /** @type {?} */
    BaseFormComponent.prototype.formSubscription;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.dialogService;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.closeable;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.cancelMessage;
    /** @type {?} */
    BaseFormComponent.prototype.formFields;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.rawValue;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.valueChanges;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.formCreated;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUZvcm1Db21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kaWFsb2ctc2VydmljZS8iLCJzb3VyY2VzIjpbImxpYi9CYXNlRm9ybUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQWtCLE1BQU0sZUFBZSxDQUFBO0FBQ3pELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFBOzs7O0FBVTFFLE1BQU0sT0FBTyxpQkFBaUI7Ozs7Ozs7Ozs7O0lBSzVCLFlBQ1UsRUFBcUIsRUFDckIsYUFBNEIsRUFDNUIsU0FBb0IsRUFDcEIsYUFBcUIsRUFDdEIsVUFBNEIsRUFDM0IsUUFBaUIsRUFDakIsWUFBOEUsRUFDOUUsV0FBOEQ7UUFQOUQsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDckIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUN0QixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGlCQUFZLEdBQVosWUFBWSxDQUFrRTtRQUM5RSxnQkFBVyxHQUFYLFdBQVcsQ0FBbUQ7UUFaeEUsY0FBUyxHQUFHLEtBQUssQ0FBQTtRQWNmLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFL0MsSUFBSSxXQUFXLEVBQUU7WUFDZixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDaEM7UUFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDakQsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixHQUFHOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxtQkFBQSxJQUFJLENBQUMsWUFBWSxFQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTthQUMzQixDQUFDLEVBQUMsQ0FDSixDQUFDLFNBQVMsRUFBRSxDQUFBO1NBQ2Q7SUFDSCxDQUFDOzs7O0lBRUQsT0FBTztRQUNMLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUNyRCxNQUFNOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUMsRUFDMUIsR0FBRzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FDdkMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNmLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDbEMsK0NBQStDO1lBQy9DLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDMUQsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzNCLE1BQU07Ozs7WUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUMsRUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUc7OztZQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFDLENBQ3JDLENBQUMsQ0FBQTtTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQTtTQUMxQjtJQUNILENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFBO1FBRTNFLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQSxDQUFDLG9EQUFvRDtRQUMxRSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNwQixPQUFNO1NBQ1A7UUFFRCx3REFBd0Q7UUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUE7U0FDcEM7SUFDSCxDQUFDO0NBQ0Y7OztJQXZFQyxzQ0FBaUI7O0lBQ2pCLGlDQUFlOztJQUNmLDZDQUErQjs7Ozs7SUFHN0IsK0JBQTZCOzs7OztJQUM3QiwwQ0FBb0M7Ozs7O0lBQ3BDLHNDQUE0Qjs7Ozs7SUFDNUIsMENBQTZCOztJQUM3Qix1Q0FBbUM7Ozs7O0lBQ25DLHFDQUF5Qjs7Ozs7SUFDekIseUNBQXNGOzs7OztJQUN0Rix3Q0FBc0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3JtcydcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4vRGlhbG9nU2VydmljZSdcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyLCBzdGFydFdpdGgsIHRha2UsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi91dGlsL2Fzc2VydCdcbmltcG9ydCB7IFF1aWNrRm9ybSwgUXVpY2tGb3JtRmllbGQgfSBmcm9tICduZy1xdWljay1mb3JtJ1xuaW1wb3J0IHsgbWFya0FsbEFzRGlydHlBbmRUb3VjaGVkIH0gZnJvbSAnLi91dGlsL21hcmtBbGxBc0RpcnR5QW5kVG91Y2hlZCdcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnXG5cbnR5cGUgQ2xvc2VhYmxlID0ge1xuICBjbG9zZTogKHJlc3VsdDogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogTWFuYWdlIGZvcm0gY3JlYXRpb24gYW5kIHN1Ym1pc3Npb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHN1Ym1pdHRlZCA9IGZhbHNlXG4gIGZvcm06IEZvcm1Hcm91cFxuICBmb3JtU3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uXG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBwcml2YXRlIGNsb3NlYWJsZTogQ2xvc2VhYmxlLFxuICAgIHByaXZhdGUgY2FuY2VsTWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyBmb3JtRmllbGRzOiBRdWlja0Zvcm1GaWVsZFtdLFxuICAgIHByaXZhdGUgcmF3VmFsdWU6IGJvb2xlYW4sXG4gICAgcHJpdmF0ZSB2YWx1ZUNoYW5nZXM/OiBTdWJqZWN0PHsgdmFsdWU6IGFueSwgZm9ybTogRm9ybUdyb3VwLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYgfT4sXG4gICAgcHJpdmF0ZSBmb3JtQ3JlYXRlZD86IChmb3JtOiBGb3JtR3JvdXAsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikgPT4gdm9pZFxuICApIHtcbiAgICB0aGlzLmZvcm0gPSBRdWlja0Zvcm0ubWFrZUZvcm0odGhpcy5mb3JtRmllbGRzKVxuXG4gICAgaWYgKGZvcm1DcmVhdGVkKSB7XG4gICAgICBmb3JtQ3JlYXRlZCh0aGlzLmZvcm0sIHRoaXMuY2QpXG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlQ2hhbmdlcykge1xuICAgICAgdGhpcy5mb3JtU3Vic2NyaXB0aW9uID0gdGhpcy5mb3JtLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoMTAwKSxcbiAgICAgICAgdGFwKHZhbHVlID0+IHRoaXMudmFsdWVDaGFuZ2VzIS5uZXh0KHtcbiAgICAgICAgICB2YWx1ZSwgZm9ybTogdGhpcy5mb3JtLCBjZFxuICAgICAgICB9KSlcbiAgICAgICkuc3Vic2NyaWJlKClcbiAgICB9XG4gIH1cblxuICBkb0Nsb3NlICgpIHtcbiAgICAvLyBjbG9zZSBmb3JtIGRpYWxvZywgcmV0dXJuIGZhbHNlIGFzIHJlc3VsdFxuICAgIHRoaXMuZGlhbG9nU2VydmljZS53aXRoQ29uZmlybSh0aGlzLmNhbmNlbE1lc3NhZ2UpLnBpcGUoXG4gICAgICBmaWx0ZXIoY29uZmlybSA9PiBjb25maXJtKSxcbiAgICAgIHRhcCgoKSA9PiB0aGlzLmNsb3NlYWJsZS5jbG9zZShmYWxzZSkpXG4gICAgKS5zdWJzY3JpYmUoKVxuICB9XG5cbiAgZG9TdWJtaXQgKCkge1xuICAgIGlmICh0aGlzLmZvcm0uc3RhdHVzID09PSAnUEVORElORycpIHtcbiAgICAgIC8vIGlmIGZvcm0gaXMgcGVuZGluZyB2YWxpZGF0aW9uLCBsZXQncyB3YWl0Li4uXG4gICAgICB0aGlzLmRpYWxvZ1NlcnZpY2Uud2l0aFByb2dyZXNzKHRoaXMuZm9ybS5zdGF0dXNDaGFuZ2VzLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aCh0aGlzLmZvcm0uc3RhdHVzKSxcbiAgICAgICAgZmlsdGVyKHN0YXR1cyA9PiBzdGF0dXMgIT09ICdQRU5ESU5HJyksXG4gICAgICAgIHRha2UoMSksXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmRvTm9uUGVuZGluZ1N1Ym1pdCgpKVxuICAgICAgKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb05vblBlbmRpbmdTdWJtaXQoKVxuICAgIH1cbiAgfVxuXG4gIGRvTm9uUGVuZGluZ1N1Ym1pdCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMuZm9ybS5zdGF0dXMgIT09ICdQRU5ESU5HJywgJ0Zvcm0gc3RhdHVzIHNob3VsZCBub3QgYmUgcGVuZGluZycpXG5cbiAgICBtYXJrQWxsQXNEaXJ0eUFuZFRvdWNoZWQodGhpcy5mb3JtKVxuICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZSAvLyBhdHRlbXB0ZWQgdG8gc3VibWl0IChhZmZlY3RzIHZhbGlkYXRpb24gbWVzc2FnZXMpXG4gICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKVxuICAgIGlmICghdGhpcy5mb3JtLnZhbGlkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjbG9zZSBmb3JtIGRpYWxvZywgcmV0dXJuIGZvcm0gdmFsdWUgb2JqZWN0IGFzIHJlc3VsdFxuICAgIHRoaXMuY2xvc2VhYmxlLmNsb3NlKFF1aWNrRm9ybS5wcmVQcm9jZXNzRm9ybVZhbHVlcyhcbiAgICAgIHRoaXMucmF3VmFsdWUgPyB0aGlzLmZvcm0uZ2V0UmF3VmFsdWUoKSA6IHRoaXMuZm9ybS52YWx1ZSkpXG4gIH1cblxuICBuZ09uRGVzdHJveSAoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZm9ybVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5mb3JtU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgICB9XG4gIH1cbn1cbiJdfQ==
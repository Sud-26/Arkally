/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
export class DialogService {
}
if (false) {
    /**
     * Display progress dialog that blocks UI interaction until processing of completes.
     *
     * When observable completes, return the last value emitted by observable workload.
     *
     * If observable throws error, progress dialog will close with undefined value.
     *
     * @abstract
     * @template T
     * @param {?} work Observable workload
     * @param {?=} title Dialog title (defaults to 'Please Wait...')
     * @param {?=} options Dialog options. 'dialogOptions' are options that will be passed to underlying
     * dialog implementation (i.e. Angular Material). It provides a way to supply options to
     * MatDialogConfig.
     * @return {?}
     */
    DialogService.prototype.withProgress = function (work, title, options) { };
    /**
     * Display alert dialog.
     *
     * @abstract
     * @param {?} title Dialog title
     * @param {?=} options Dialog options. 'content' represents content to be display in dialog
     * @return {?} Observable with true value if user clicks OK to accept the alert message, false
     * otherwise
     */
    DialogService.prototype.withAlert = function (title, options) { };
    /**
     * Display confirmation dialog.
     *
     * @abstract
     * @param {?=} title Optional dialog title (defaults to 'Confirm?')
     * @param {?=} options Dialog options. 'content' represents content to be display in dialog;
     * 'acceptButton' represents label to accept confirmation (defaults to 'Yes'); 'cancelButton'
     * represents label to cancel confirmation (defaults to 'No')
     * @return {?} Observable with true value if user accepts the confirmation, false otherwise
     */
    DialogService.prototype.withConfirm = function (title, options) { };
    /**
     * Display a dialog with form fields for data collection. Each form field definition describes:
     *
     * - title. Label for the field. Required.
     *
     * - id. Unique identifier for the field. Optional. Defaults to camel case representation of
     * title.
     *
     * - type. Field type. Valid values are 'text', 'textarea', 'switch', 'radio', 'checkbox',
     * 'select' and 'password'. Optional. Defaults to 'text'.
     *
     * - value. Default value for the field when the form is displayed. Optional.
     *
     * - options. List of possible options for 'radio', 'checkbox' and 'select' field types. Options
     * can be specified as an "array of string" or an "array of object with 'value' and 'label' as
     * keys". Optional.
     *
     * - required. Flag to indicate that field input is required. Optional. Defaults to false.
     *
     * - validators. Array of Angular validation functions (i.e. ValidatorFn). Optional.
     *
     * - asyncValidators. Array of asynchronous Angular validation functions (i.e. AsyncValidatorFn).
     * Optional.
     *
     * The dialog will close and return form values (as a JSON object) when user clicks on submit
     * button (provided all field validation passed).If user cancels the form, the dialog will close
     * and return false.
     *
     * @abstract
     * @param {?} title
     * @param {?} fields
     * @param {?=} options Dialog options.
     *  - 'content' represents content to be display in dialog;
     *  - 'submitButton' represents label to submit form (defaults to 'Submit');
     *  - 'cancelButton' represents label to cancel form (defaults to 'Cancel');
     *  - 'layout' defines the form's layout attributes (uses "flex-cell");
     *  - 'rawValue' is used to get form raw value. Default is false.
     *  - 'valueChanges' is used to receive form value change (experimental)
     *  - 'formCreated' if specified, this callback function is called when the form is created. It
     *      let user perform post FormGroup creation processing (experimental). e.g. to listen to
     *      specific field value changes for advanced form manipulation/validation requirements.
     * @return {?} Observable with form value object on submission, or false if form was cancelled
     */
    DialogService.prototype.withForm = function (title, fields, options) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlhbG9nU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RpYWxvZy1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL0RpYWxvZ1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBU0EsTUFBTSxPQUFnQixhQUFhO0NBb0hsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBdEdDLDJFQUc2RDs7Ozs7Ozs7OztJQVU3RCxrRUFPc0I7Ozs7Ozs7Ozs7O0lBV3RCLG9FQVNzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUE0Q3RCLHlFQWlCcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcydcbmltcG9ydCB7IFF1aWNrRm9ybUZpZWxkIH0gZnJvbSAnbmctcXVpY2stZm9ybSdcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJ1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuXG4vKipcbiAqIFRoZSBEaWFsb2dTZXJ2aWNlIGNsYXNzIGV4cG9zZXMgZnVuY3Rpb25zIHVzZWQgdG8gY3JlYXRlIGFsZXJ0LCBjb25maXJtYXRpb24sIHByb2dyZXNzIGFuZCBmb3JtXG4gKiAgYmFzZWQgZGlhbG9ncy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERpYWxvZ1NlcnZpY2Uge1xuICAvKipcbiAgICogRGlzcGxheSBwcm9ncmVzcyBkaWFsb2cgdGhhdCBibG9ja3MgVUkgaW50ZXJhY3Rpb24gdW50aWwgcHJvY2Vzc2luZyBvZiBjb21wbGV0ZXMuXG4gICAqXG4gICAqIFdoZW4gb2JzZXJ2YWJsZSBjb21wbGV0ZXMsIHJldHVybiB0aGUgbGFzdCB2YWx1ZSBlbWl0dGVkIGJ5IG9ic2VydmFibGUgd29ya2xvYWQuXG4gICAqXG4gICAqIElmIG9ic2VydmFibGUgdGhyb3dzIGVycm9yLCBwcm9ncmVzcyBkaWFsb2cgd2lsbCBjbG9zZSB3aXRoIHVuZGVmaW5lZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHdvcmsgT2JzZXJ2YWJsZSB3b3JrbG9hZFxuICAgKiBAcGFyYW0gdGl0bGUgRGlhbG9nIHRpdGxlIChkZWZhdWx0cyB0byAnUGxlYXNlIFdhaXQuLi4nKVxuICAgKiBAcGFyYW0gb3B0aW9ucyBEaWFsb2cgb3B0aW9ucy4gJ2RpYWxvZ09wdGlvbnMnIGFyZSBvcHRpb25zIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdW5kZXJseWluZ1xuICAgKiBkaWFsb2cgaW1wbGVtZW50YXRpb24gKGkuZS4gQW5ndWxhciBNYXRlcmlhbCkuIEl0IHByb3ZpZGVzIGEgd2F5IHRvIHN1cHBseSBvcHRpb25zIHRvXG4gICAqIE1hdERpYWxvZ0NvbmZpZy5cbiAgICovXG4gIGFic3RyYWN0IHdpdGhQcm9ncmVzczxUID0gYW55PiAod29yazogT2JzZXJ2YWJsZTxUPiwgdGl0bGU/OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ09wdGlvbnM/OiB7IFsga2V5OiBzdHJpbmcgXTogYW55IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTogT2JzZXJ2YWJsZTxUIHwgdW5kZWZpbmVkPlxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGFsZXJ0IGRpYWxvZy5cbiAgICpcbiAgICogQHBhcmFtIHRpdGxlIERpYWxvZyB0aXRsZVxuICAgKiBAcGFyYW0gb3B0aW9ucyBEaWFsb2cgb3B0aW9ucy4gJ2NvbnRlbnQnIHJlcHJlc2VudHMgY29udGVudCB0byBiZSBkaXNwbGF5IGluIGRpYWxvZ1xuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIHdpdGggdHJ1ZSB2YWx1ZSBpZiB1c2VyIGNsaWNrcyBPSyB0byBhY2NlcHQgdGhlIGFsZXJ0IG1lc3NhZ2UsIGZhbHNlXG4gICAqIG90aGVyd2lzZVxuICAgKi9cbiAgYWJzdHJhY3Qgd2l0aEFsZXJ0IChcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBjb250ZW50Pzogc3RyaW5nXG4gICAgICBhY2NlcHRCdXR0b24/OiBzdHJpbmdcbiAgICAgIGRpYWxvZ09wdGlvbnM/OiB7IFsga2V5OiBzdHJpbmcgXTogYW55IH1cbiAgICB9XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj5cblxuICAvKipcbiAgICogRGlzcGxheSBjb25maXJtYXRpb24gZGlhbG9nLlxuICAgKlxuICAgKiBAcGFyYW0gdGl0bGUgT3B0aW9uYWwgZGlhbG9nIHRpdGxlIChkZWZhdWx0cyB0byAnQ29uZmlybT8nKVxuICAgKiBAcGFyYW0gb3B0aW9ucyBEaWFsb2cgb3B0aW9ucy4gJ2NvbnRlbnQnIHJlcHJlc2VudHMgY29udGVudCB0byBiZSBkaXNwbGF5IGluIGRpYWxvZztcbiAgICogJ2FjY2VwdEJ1dHRvbicgcmVwcmVzZW50cyBsYWJlbCB0byBhY2NlcHQgY29uZmlybWF0aW9uIChkZWZhdWx0cyB0byAnWWVzJyk7ICdjYW5jZWxCdXR0b24nXG4gICAqIHJlcHJlc2VudHMgbGFiZWwgdG8gY2FuY2VsIGNvbmZpcm1hdGlvbiAoZGVmYXVsdHMgdG8gJ05vJylcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWUgaWYgdXNlciBhY2NlcHRzIHRoZSBjb25maXJtYXRpb24sIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgYWJzdHJhY3Qgd2l0aENvbmZpcm0gKFxuICAgIHRpdGxlPzogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBjb250ZW50Pzogc3RyaW5nXG4gICAgICBhY2NlcHRCdXR0b24/OiBzdHJpbmdcbiAgICAgIGNhbmNlbEJ1dHRvbj86IHN0cmluZ1xuICAgICAgY2FuY2VsTWVzc2FnZT86IHN0cmluZ1xuICAgICAgZGlhbG9nT3B0aW9ucz86IHsgWyBrZXk6IHN0cmluZyBdOiBhbnkgfVxuICAgIH1cbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuPlxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGEgZGlhbG9nIHdpdGggZm9ybSBmaWVsZHMgZm9yIGRhdGEgY29sbGVjdGlvbi4gRWFjaCBmb3JtIGZpZWxkIGRlZmluaXRpb24gZGVzY3JpYmVzOlxuICAgKlxuICAgKiAtIHRpdGxlLiBMYWJlbCBmb3IgdGhlIGZpZWxkLiBSZXF1aXJlZC5cbiAgICpcbiAgICogLSBpZC4gVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBmaWVsZC4gT3B0aW9uYWwuIERlZmF1bHRzIHRvIGNhbWVsIGNhc2UgcmVwcmVzZW50YXRpb24gb2ZcbiAgICogdGl0bGUuXG4gICAqXG4gICAqIC0gdHlwZS4gRmllbGQgdHlwZS4gVmFsaWQgdmFsdWVzIGFyZSAndGV4dCcsICd0ZXh0YXJlYScsICdzd2l0Y2gnLCAncmFkaW8nLCAnY2hlY2tib3gnLFxuICAgKiAnc2VsZWN0JyBhbmQgJ3Bhc3N3b3JkJy4gT3B0aW9uYWwuIERlZmF1bHRzIHRvICd0ZXh0Jy5cbiAgICpcbiAgICogLSB2YWx1ZS4gRGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGZpZWxkIHdoZW4gdGhlIGZvcm0gaXMgZGlzcGxheWVkLiBPcHRpb25hbC5cbiAgICpcbiAgICogLSBvcHRpb25zLiBMaXN0IG9mIHBvc3NpYmxlIG9wdGlvbnMgZm9yICdyYWRpbycsICdjaGVja2JveCcgYW5kICdzZWxlY3QnIGZpZWxkIHR5cGVzLiBPcHRpb25zXG4gICAqIGNhbiBiZSBzcGVjaWZpZWQgYXMgYW4gXCJhcnJheSBvZiBzdHJpbmdcIiBvciBhbiBcImFycmF5IG9mIG9iamVjdCB3aXRoICd2YWx1ZScgYW5kICdsYWJlbCcgYXNcbiAgICoga2V5c1wiLiBPcHRpb25hbC5cbiAgICpcbiAgICogLSByZXF1aXJlZC4gRmxhZyB0byBpbmRpY2F0ZSB0aGF0IGZpZWxkIGlucHV0IGlzIHJlcXVpcmVkLiBPcHRpb25hbC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqXG4gICAqIC0gdmFsaWRhdG9ycy4gQXJyYXkgb2YgQW5ndWxhciB2YWxpZGF0aW9uIGZ1bmN0aW9ucyAoaS5lLiBWYWxpZGF0b3JGbikuIE9wdGlvbmFsLlxuICAgKlxuICAgKiAtIGFzeW5jVmFsaWRhdG9ycy4gQXJyYXkgb2YgYXN5bmNocm9ub3VzIEFuZ3VsYXIgdmFsaWRhdGlvbiBmdW5jdGlvbnMgKGkuZS4gQXN5bmNWYWxpZGF0b3JGbikuXG4gICAqIE9wdGlvbmFsLlxuICAgKlxuICAgKiBUaGUgZGlhbG9nIHdpbGwgY2xvc2UgYW5kIHJldHVybiBmb3JtIHZhbHVlcyAoYXMgYSBKU09OIG9iamVjdCkgd2hlbiB1c2VyIGNsaWNrcyBvbiBzdWJtaXRcbiAgICogYnV0dG9uIChwcm92aWRlZCBhbGwgZmllbGQgdmFsaWRhdGlvbiBwYXNzZWQpLklmIHVzZXIgY2FuY2VscyB0aGUgZm9ybSwgdGhlIGRpYWxvZyB3aWxsIGNsb3NlXG4gICAqIGFuZCByZXR1cm4gZmFsc2UuXG4gICAqXG4gICAqIEBwYXJhbSB0aXRsZVxuICAgKiBAcGFyYW0gZmllbGRzXG4gICAqIEBwYXJhbSBvcHRpb25zIERpYWxvZyBvcHRpb25zLlxuICAgKiAgLSAnY29udGVudCcgcmVwcmVzZW50cyBjb250ZW50IHRvIGJlIGRpc3BsYXkgaW4gZGlhbG9nO1xuICAgKiAgLSAnc3VibWl0QnV0dG9uJyByZXByZXNlbnRzIGxhYmVsIHRvIHN1Ym1pdCBmb3JtIChkZWZhdWx0cyB0byAnU3VibWl0Jyk7XG4gICAqICAtICdjYW5jZWxCdXR0b24nIHJlcHJlc2VudHMgbGFiZWwgdG8gY2FuY2VsIGZvcm0gKGRlZmF1bHRzIHRvICdDYW5jZWwnKTtcbiAgICogIC0gJ2xheW91dCcgZGVmaW5lcyB0aGUgZm9ybSdzIGxheW91dCBhdHRyaWJ1dGVzICh1c2VzIFwiZmxleC1jZWxsXCIpO1xuICAgKiAgLSAncmF3VmFsdWUnIGlzIHVzZWQgdG8gZ2V0IGZvcm0gcmF3IHZhbHVlLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKiAgLSAndmFsdWVDaGFuZ2VzJyBpcyB1c2VkIHRvIHJlY2VpdmUgZm9ybSB2YWx1ZSBjaGFuZ2UgKGV4cGVyaW1lbnRhbClcbiAgICogIC0gJ2Zvcm1DcmVhdGVkJyBpZiBzcGVjaWZpZWQsIHRoaXMgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gdGhlIGZvcm0gaXMgY3JlYXRlZC4gSXRcbiAgICogICAgICBsZXQgdXNlciBwZXJmb3JtIHBvc3QgRm9ybUdyb3VwIGNyZWF0aW9uIHByb2Nlc3NpbmcgKGV4cGVyaW1lbnRhbCkuIGUuZy4gdG8gbGlzdGVuIHRvXG4gICAqICAgICAgc3BlY2lmaWMgZmllbGQgdmFsdWUgY2hhbmdlcyBmb3IgYWR2YW5jZWQgZm9ybSBtYW5pcHVsYXRpb24vdmFsaWRhdGlvbiByZXF1aXJlbWVudHMuXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgd2l0aCBmb3JtIHZhbHVlIG9iamVjdCBvbiBzdWJtaXNzaW9uLCBvciBmYWxzZSBpZiBmb3JtIHdhcyBjYW5jZWxsZWRcbiAgICovXG4gIGFic3RyYWN0IHdpdGhGb3JtIChcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGZpZWxkczogUXVpY2tGb3JtRmllbGRbXSxcbiAgICBvcHRpb25zPzoge1xuICAgICAgY29udGVudD86IHN0cmluZ1xuICAgICAgc3VibWl0QnV0dG9uPzogc3RyaW5nXG4gICAgICBjYW5jZWxCdXR0b24/OiBzdHJpbmdcbiAgICAgIGxheW91dD86IHtcbiAgICAgICAgZmxleENlbGw/OiBib29sZWFuIHwgNiB8IDEyXG4gICAgICAgIGd1dHRlcj86IGJvb2xlYW5cbiAgICAgICAgZ3Jvd0l0ZW1zPzogYm9vbGVhblxuICAgICAgICBkZWJ1Zz86IGJvb2xlYW5cbiAgICAgIH0sXG4gICAgICByYXdWYWx1ZT86IGJvb2xlYW4sXG4gICAgICB2YWx1ZUNoYW5nZXM/OiBTdWJqZWN0PHsgdmFsdWU6IGFueSwgZm9ybTogRm9ybUdyb3VwLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYgfT5cbiAgICAgIGZvcm1DcmVhdGVkPzogKGZvcm06IEZvcm1Hcm91cCwgY2Q6IENoYW5nZURldGVjdG9yUmVmKSA9PiB2b2lkXG4gICAgICBkaWFsb2dPcHRpb25zPzogeyBbIGtleTogc3RyaW5nIF06IGFueSB9XG4gICAgfSk6IE9ic2VydmFibGU8YW55PlxufVxuIl19
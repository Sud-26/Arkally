/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DialogService } from './DialogService';
import { MatDialog } from '@angular/material/dialog';
import { concatMap, finalize, map, tap } from 'rxjs/operators';
import { AlertComponent } from './mat/Alert.component';
import { ProgressComponent } from './mat/Progress.component';
import { ConfirmComponent } from './mat/Confirm.component';
import { FormComponent } from './mat/Form.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
export class MatDialogService extends DialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        super();
        this.dialog = dialog;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    withProgress(work, title, options) {
        title = title || 'Please Wait...';
        /** @type {?} */
        let workOutput;
        /** @type {?} */
        const ref = this.dialog.open(ProgressComponent, Object.assign({ disableClose: true, data: { title } }, (options && options.dialogOptions || {})));
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        () => work)), tap((/**
         * @param {?} val
         * @return {?}
         */
        val => workOutput = val)), // set workOutput
        finalize((/**
         * @return {?}
         */
        () => ref.close()))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        () => workOutput)) // return workOutput
        );
    }
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    withAlert(title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        const dialogRef = this.dialog.open(AlertComponent, Object.assign({ disableClose: true, minWidth: 200, data: Object.assign({ title }, options) }, (options && options.dialogOptions || {})));
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result === true)));
    }
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    withConfirm(title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        const ref = this.dialog.open(ConfirmComponent, Object.assign({ disableClose: true, data: Object.assign({ title }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => result)));
    }
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    withForm(title, fields, options) {
        options = options || {};
        options.submitButton = options.submitButton || 'Submit';
        options.cancelButton = options.cancelButton || 'Cancel';
        options.cancelMessage = options.cancelMessage || 'Cancel?';
        options.rawValue = options.rawValue || false;
        /** @type {?} */
        const ref = this.dialog.open(FormComponent, Object.assign({ disableClose: true, data: Object.assign({ title, fields }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed();
    }
}
MatDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
MatDialogService.ctorParameters = () => [
    { type: MatDialog }
];
/** @nocollapse */ MatDialogService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MatDialogService_Factory() { return new MatDialogService(i0.ɵɵinject(i1.MatDialog)); }, token: MatDialogService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,
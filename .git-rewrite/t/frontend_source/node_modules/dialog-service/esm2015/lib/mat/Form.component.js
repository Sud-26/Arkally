/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';
import { DialogService } from '../DialogService';
import { BaseFormComponent } from '../BaseFormComponent';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
// @dynamic
export class FormComponent extends BaseFormComponent {
    /**
     * @param {?} cd
     * @param {?} dialogRef
     * @param {?} dialogService
     * @param {?} data
     */
    constructor(cd, dialogRef, dialogService, data) {
        super(cd, dialogService, dialogRef, data.cancelMessage, data.fields, data.rawValue, data.valueChanges, data.formCreated);
        this.data = data;
    }
    /**
     * @return {?}
     */
    get attrFlexCell() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell ? true : null;
    }
    /**
     * @return {?}
     */
    get attrGutter() {
        /** @type {?} */
        const gutter = this.data.layout && this.data.layout.gutter
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return gutter ? true : null;
    }
    /**
     * @return {?}
     */
    get attrGrowItems() {
        /** @type {?} */
        const growItems = this.data.layout && this.data.layout.growItems
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return growItems ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDefaultCell6() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell === 6 ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDefaultCell12() {
        /** @type {?} */
        const flexCell = this.data.layout && this.data.layout.flexCell
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return flexCell === 12 ? true : null;
    }
    /**
     * @return {?}
     */
    get attrDebug() {
        /** @type {?} */
        const debug = this.data.layout && this.data.layout.debug
        // must return null for Angular to remove the attribute
        ;
        // must return null for Angular to remove the attribute
        return debug ? true : null;
    }
}
FormComponent.decorators = [
    { type: Component, args: [{
                template: "<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content>\n    <div *ngIf=\"data.content\" [innerHtml]=\"data.content\" class=\"content\"></div>\n    <div>\n        <form [formGroup]=\"form\"\n              [attr.flex-cell]=\"attrFlexCell\"\n              [attr.gutter]=\"attrGutter\"\n              [attr.grow-items]=\"attrGrowItems\"\n              [attr.default-cell-6]=\"attrDefaultCell6\"\n              [attr.default-cell-12]=\"attrDefaultCell12\"\n              [attr.debug]=\"attrDebug\"\n              autocomplete=\"off\">\n            <quick-form-field [field]=\"field\" [form]=\"form\"\n                              *ngFor=\"let field of formFields\"></quick-form-field>\n        </form>\n    </div>\n</div>\n<div mat-dialog-actions>\n    <button mat-button color=\"primary\" type=\"button\"\n            (click)=\"doSubmit()\">{{data.submitButton}}</button>\n    <button mat-button type=\"button\" (click)=\"doClose()\">{{data.cancelButton}}</button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: MatDialogRef },
    { type: DialogService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    FormComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kaWFsb2ctc2VydmljZS8iLCJzb3VyY2VzIjpbImxpYi9tYXQvRm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzdGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUNoRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFBOztBQVd4RSxNQUFNLE9BQU8sYUFBYyxTQUFRLGlCQUFpQjs7Ozs7OztJQUNsRCxZQUNFLEVBQXFCLEVBQ3JCLFNBQXNDLEVBQ3RDLGFBQTRCLEVBQ0ksSUFnQi9CO1FBRUQsS0FBSyxDQUFDLEVBQUUsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFDakUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQW5CckIsU0FBSSxHQUFKLElBQUksQ0FnQm5DO0lBSUgsQ0FBQzs7OztJQUVELElBQUksWUFBWTs7Y0FDUixRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUM5RCx1REFBdUQ7O1FBQXZELHVEQUF1RDtRQUN2RCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDL0IsQ0FBQzs7OztJQUVELElBQUksVUFBVTs7Y0FDTixNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtRQUMxRCx1REFBdUQ7O1FBQXZELHVEQUF1RDtRQUN2RCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDN0IsQ0FBQzs7OztJQUVELElBQUksYUFBYTs7Y0FDVCxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUztRQUNoRSx1REFBdUQ7O1FBQXZELHVEQUF1RDtRQUN2RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDaEMsQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCOztjQUNaLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQzlELHVEQUF1RDs7UUFBdkQsdURBQXVEO1FBQ3ZELE9BQU8sUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDckMsQ0FBQzs7OztJQUVELElBQUksaUJBQWlCOztjQUNiLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQzlELHVEQUF1RDs7UUFBdkQsdURBQXVEO1FBQ3ZELE9BQU8sUUFBUSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDdEMsQ0FBQzs7OztJQUVELElBQUksU0FBUzs7Y0FDTCxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztRQUN4RCx1REFBdUQ7O1FBQXZELHVEQUF1RDtRQUN2RCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDNUIsQ0FBQzs7O1lBbEVGLFNBQVMsU0FBQztnQkFDVCxtK0JBQW9DO2dCQUNwQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQVppQyxpQkFBaUI7WUFHekIsWUFBWTtZQUY3QixhQUFhOzRDQWtCakIsTUFBTSxTQUFDLGVBQWU7Ozs7SUFBdkIsNkJBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vRGlhbG9nU2VydmljZSdcbmltcG9ydCB7IEJhc2VGb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vQmFzZUZvcm1Db21wb25lbnQnXG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZydcbmltcG9ydCB7IFF1aWNrRm9ybUZpZWxkIH0gZnJvbSAnbmctcXVpY2stZm9ybSdcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnXG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL0Zvcm0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcblxuZXhwb3J0IGNsYXNzIEZvcm1Db21wb25lbnQgZXh0ZW5kcyBCYXNlRm9ybUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8Rm9ybUNvbXBvbmVudD4sXG4gICAgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IHtcbiAgICAgIHRpdGxlOiBzdHJpbmdcbiAgICAgIGZpZWxkczogUXVpY2tGb3JtRmllbGRbXVxuICAgICAgY29udGVudD86IHN0cmluZ1xuICAgICAgc3VibWl0QnV0dG9uOiBzdHJpbmdcbiAgICAgIGNhbmNlbEJ1dHRvbjogc3RyaW5nXG4gICAgICBjYW5jZWxNZXNzYWdlOiBzdHJpbmdcbiAgICAgIHJhd1ZhbHVlOiBib29sZWFuXG4gICAgICBsYXlvdXQ/OiB7XG4gICAgICAgIGZsZXhDZWxsPzogYm9vbGVhbiB8IDYgfCAxMlxuICAgICAgICBndXR0ZXI/OiBib29sZWFuXG4gICAgICAgIGdyb3dJdGVtcz86IGJvb2xlYW5cbiAgICAgICAgZGVidWc/OiBib29sZWFuXG4gICAgICB9XG4gICAgICB2YWx1ZUNoYW5nZXM/OiBTdWJqZWN0PHsgdmFsdWU6IGFueSwgZm9ybTogRm9ybUdyb3VwLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYgfT4sXG4gICAgICBmb3JtQ3JlYXRlZD86IChmb3JtOiBGb3JtR3JvdXAsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikgPT4gdm9pZFxuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoY2QsIGRpYWxvZ1NlcnZpY2UsIGRpYWxvZ1JlZiwgZGF0YS5jYW5jZWxNZXNzYWdlLCBkYXRhLmZpZWxkcyxcbiAgICAgIGRhdGEucmF3VmFsdWUsIGRhdGEudmFsdWVDaGFuZ2VzLCBkYXRhLmZvcm1DcmVhdGVkKVxuICB9XG5cbiAgZ2V0IGF0dHJGbGV4Q2VsbCAoKSB7XG4gICAgY29uc3QgZmxleENlbGwgPSB0aGlzLmRhdGEubGF5b3V0ICYmIHRoaXMuZGF0YS5sYXlvdXQuZmxleENlbGxcbiAgICAvLyBtdXN0IHJldHVybiBudWxsIGZvciBBbmd1bGFyIHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlXG4gICAgcmV0dXJuIGZsZXhDZWxsID8gdHJ1ZSA6IG51bGxcbiAgfVxuXG4gIGdldCBhdHRyR3V0dGVyICgpIHtcbiAgICBjb25zdCBndXR0ZXIgPSB0aGlzLmRhdGEubGF5b3V0ICYmIHRoaXMuZGF0YS5sYXlvdXQuZ3V0dGVyXG4gICAgLy8gbXVzdCByZXR1cm4gbnVsbCBmb3IgQW5ndWxhciB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZVxuICAgIHJldHVybiBndXR0ZXIgPyB0cnVlIDogbnVsbFxuICB9XG5cbiAgZ2V0IGF0dHJHcm93SXRlbXMgKCkge1xuICAgIGNvbnN0IGdyb3dJdGVtcyA9IHRoaXMuZGF0YS5sYXlvdXQgJiYgdGhpcy5kYXRhLmxheW91dC5ncm93SXRlbXNcbiAgICAvLyBtdXN0IHJldHVybiBudWxsIGZvciBBbmd1bGFyIHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlXG4gICAgcmV0dXJuIGdyb3dJdGVtcyA/IHRydWUgOiBudWxsXG4gIH1cblxuICBnZXQgYXR0ckRlZmF1bHRDZWxsNiAoKSB7XG4gICAgY29uc3QgZmxleENlbGwgPSB0aGlzLmRhdGEubGF5b3V0ICYmIHRoaXMuZGF0YS5sYXlvdXQuZmxleENlbGxcbiAgICAvLyBtdXN0IHJldHVybiBudWxsIGZvciBBbmd1bGFyIHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlXG4gICAgcmV0dXJuIGZsZXhDZWxsID09PSA2ID8gdHJ1ZSA6IG51bGxcbiAgfVxuXG4gIGdldCBhdHRyRGVmYXVsdENlbGwxMiAoKSB7XG4gICAgY29uc3QgZmxleENlbGwgPSB0aGlzLmRhdGEubGF5b3V0ICYmIHRoaXMuZGF0YS5sYXlvdXQuZmxleENlbGxcbiAgICAvLyBtdXN0IHJldHVybiBudWxsIGZvciBBbmd1bGFyIHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlXG4gICAgcmV0dXJuIGZsZXhDZWxsID09PSAxMiA/IHRydWUgOiBudWxsXG4gIH1cblxuICBnZXQgYXR0ckRlYnVnICgpIHtcbiAgICBjb25zdCBkZWJ1ZyA9IHRoaXMuZGF0YS5sYXlvdXQgJiYgdGhpcy5kYXRhLmxheW91dC5kZWJ1Z1xuICAgIC8vIG11c3QgcmV0dXJuIG51bGwgZm9yIEFuZ3VsYXIgdG8gcmVtb3ZlIHRoZSBhdHRyaWJ1dGVcbiAgICByZXR1cm4gZGVidWcgPyB0cnVlIDogbnVsbFxuICB9XG59XG4iXX0=
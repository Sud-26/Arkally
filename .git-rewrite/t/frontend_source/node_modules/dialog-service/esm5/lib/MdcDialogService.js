/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { MdcDialog } from '@angular-mdc/web';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { concatMap, finalize, map, tap } from 'rxjs/operators';
import { DialogService } from './DialogService';
import { ProgressComponent } from './mdc/Progress.component';
import { AlertComponent } from './mdc/Alert.component';
import { ConfirmComponent } from './mdc/Confirm.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular-mdc/web/dialog";
/**
 * @deprecated No longer supported. Not enough time to maintain this implementation, contributions
 * welcomed.
 */
var MdcDialogService = /** @class */ (function (_super) {
    tslib_1.__extends(MdcDialogService, _super);
    function MdcDialogService(dialog) {
        var _this = _super.call(this) || this;
        _this.dialog = dialog;
        return _this;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @return {?}
     */
    MdcDialogService.prototype.withProgress = /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @return {?}
     */
    function (work, title) {
        title = title || 'Please Wait...';
        /** @type {?} */
        var workOutput;
        /** @type {?} */
        var ref = this.dialog.open(ProgressComponent, {
            clickOutsideToClose: false,
            escapeToClose: false,
            data: { title: title }
        });
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        function () { return work; })), tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return workOutput = val; })), // set workOutput
        finalize((/**
         * @return {?}
         */
        function () { return ref.close(); }))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        function () { return workOutput; })) // return workOutput
        );
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withAlert = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        var dialogRef = this.dialog.open(AlertComponent, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: tslib_1.__assign({ title: title }, options)
        });
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === 'accept'; })));
    };
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withConfirm = /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        var ref = this.dialog.open(ConfirmComponent, {
            escapeToClose: false,
            clickOutsideToClose: false,
            data: tslib_1.__assign({ title: title }, options)
        });
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === 'accept'; })));
    };
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    MdcDialogService.prototype.withForm = /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    function (title, fields, options) {
        return throwError('withForm() is not supported in MDC mode');
    };
    MdcDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MdcDialogService.ctorParameters = function () { return [
        { type: MdcDialog }
    ]; };
    /** @nocollapse */ MdcDialogService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MdcDialogService_Factory() { return new MdcDialogService(i0.ɵɵinject(i1.MdcDialog)); }, token: MdcDialogService, providedIn: "root" });
    return MdcDialogService;
}(DialogService));
export { MdcDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MdcDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWRjRGlhbG9nU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RpYWxvZy1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL01kY0RpYWxvZ1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFBOzs7Ozs7O0FBTzFEO0lBR3NDLDRDQUFhO0lBQ2pELDBCQUFxQixNQUFpQjtRQUF0QyxZQUNFLGlCQUFPLFNBQ1I7UUFGb0IsWUFBTSxHQUFOLE1BQU0sQ0FBVzs7SUFFdEMsQ0FBQzs7Ozs7OztJQUVELHVDQUFZOzs7Ozs7SUFBWixVQUF1QixJQUFtQixFQUFFLEtBQWM7UUFDeEQsS0FBSyxHQUFHLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQTs7WUFDN0IsVUFBYTs7WUFFWCxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDOUMsbUJBQW1CLEVBQUUsS0FBSztZQUMxQixhQUFhLEVBQUUsS0FBSztZQUNwQixJQUFJLEVBQUUsRUFBRSxLQUFLLE9BQUEsRUFBRTtTQUNoQixDQUFDO1FBRUYsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FDcEIsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLEVBQUMsRUFDckIsR0FBRzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsVUFBVSxHQUFHLEdBQUcsRUFBaEIsQ0FBZ0IsRUFBQyxFQUFFLGlCQUFpQjtRQUMvQyxRQUFROzs7UUFBQyxjQUFNLE9BQUEsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFYLENBQVcsRUFBQyxDQUM1QixDQUFDLFNBQVMsRUFBRSxDQUFBO1FBRWIsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUMzQixHQUFHOzs7UUFBQyxjQUFNLE9BQUEsVUFBVSxFQUFWLENBQVUsRUFBQyxDQUFDLG9CQUFvQjtTQUMzQyxDQUFBO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsb0NBQVM7Ozs7O0lBQVQsVUFBVyxLQUFhLEVBQUUsT0FBcUQ7UUFDN0UsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUE7UUFDdkIsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQTs7WUFFN0MsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNqRCxhQUFhLEVBQUUsS0FBSztZQUNwQixtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLElBQUkscUJBQUksS0FBSyxPQUFBLElBQUssT0FBTyxDQUFFO1NBQzVCLENBQUM7UUFFRixPQUFPLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQ2pDLEdBQUc7Ozs7UUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sS0FBSyxRQUFRLEVBQW5CLENBQW1CLEVBQUMsQ0FDbkMsQ0FBQTtJQUNILENBQUM7Ozs7OztJQUVELHNDQUFXOzs7OztJQUFYLFVBQWEsS0FBYyxFQUFFLE9BSTVCO1FBQ0MsS0FBSyxHQUFHLEtBQUssSUFBSSxVQUFVLENBQUE7UUFDM0IsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUE7UUFDdkIsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQTtRQUNwRCxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFBOztZQUU3QyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDN0MsYUFBYSxFQUFFLEtBQUs7WUFDcEIsbUJBQW1CLEVBQUUsS0FBSztZQUMxQixJQUFJLHFCQUFJLEtBQUssT0FBQSxJQUFLLE9BQU8sQ0FBRTtTQUM1QixDQUFDO1FBQ0YsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUMzQixHQUFHOzs7O1FBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLEtBQUssUUFBUSxFQUFuQixDQUFtQixFQUFDLENBQ25DLENBQUE7SUFDSCxDQUFDOzs7Ozs7O0lBRUQsbUNBQVE7Ozs7OztJQUFSLFVBQVUsS0FBYSxFQUFFLE1BQXdCLEVBQUUsT0FLbEQ7UUFDQyxPQUFPLFVBQVUsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7O2dCQXZFRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQWhCUSxTQUFTOzs7MkJBQWxCO0NBc0ZDLEFBeEVELENBR3NDLGFBQWEsR0FxRWxEO1NBckVZLGdCQUFnQjs7Ozs7O0lBQ2Qsa0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWRjRGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXItbWRjL3dlYidcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBjb25jYXRNYXAsIGZpbmFsaXplLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4vRGlhbG9nU2VydmljZSdcbmltcG9ydCB7IFByb2dyZXNzQ29tcG9uZW50IH0gZnJvbSAnLi9tZGMvUHJvZ3Jlc3MuY29tcG9uZW50J1xuaW1wb3J0IHsgQWxlcnRDb21wb25lbnQgfSBmcm9tICcuL21kYy9BbGVydC5jb21wb25lbnQnXG5pbXBvcnQgeyBDb25maXJtQ29tcG9uZW50IH0gZnJvbSAnLi9tZGMvQ29uZmlybS5jb21wb25lbnQnXG5pbXBvcnQgeyBRdWlja0Zvcm1GaWVsZCB9IGZyb20gJ25nLXF1aWNrLWZvcm0nXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgTm8gbG9uZ2VyIHN1cHBvcnRlZC4gTm90IGVub3VnaCB0aW1lIHRvIG1haW50YWluIHRoaXMgaW1wbGVtZW50YXRpb24sIGNvbnRyaWJ1dGlvbnNcbiAqIHdlbGNvbWVkLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNZGNEaWFsb2dTZXJ2aWNlIGV4dGVuZHMgRGlhbG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIGRpYWxvZzogTWRjRGlhbG9nKSB7XG4gICAgc3VwZXIoKVxuICB9XG5cbiAgd2l0aFByb2dyZXNzPFQgPSBhbnk+ICh3b3JrOiBPYnNlcnZhYmxlPFQ+LCB0aXRsZT86IHN0cmluZyk6IE9ic2VydmFibGU8VCB8IHVuZGVmaW5lZD4ge1xuICAgIHRpdGxlID0gdGl0bGUgfHwgJ1BsZWFzZSBXYWl0Li4uJ1xuICAgIGxldCB3b3JrT3V0cHV0OiBUXG5cbiAgICBjb25zdCByZWYgPSB0aGlzLmRpYWxvZy5vcGVuKFByb2dyZXNzQ29tcG9uZW50LCB7XG4gICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiBmYWxzZSxcbiAgICAgIGVzY2FwZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgZGF0YTogeyB0aXRsZSB9XG4gICAgfSlcblxuICAgIHJlZi5hZnRlck9wZW5lZCgpLnBpcGUoXG4gICAgICBjb25jYXRNYXAoKCkgPT4gd29yayksXG4gICAgICB0YXAodmFsID0+IHdvcmtPdXRwdXQgPSB2YWwpLCAvLyBzZXQgd29ya091dHB1dFxuICAgICAgZmluYWxpemUoKCkgPT4gcmVmLmNsb3NlKCkpXG4gICAgKS5zdWJzY3JpYmUoKVxuXG4gICAgcmV0dXJuIHJlZi5hZnRlckNsb3NlZCgpLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gd29ya091dHB1dCkgLy8gcmV0dXJuIHdvcmtPdXRwdXRcbiAgICApXG4gIH1cblxuICB3aXRoQWxlcnQgKHRpdGxlOiBzdHJpbmcsIG9wdGlvbnM/OiB7IGNvbnRlbnQ/OiBzdHJpbmcsIGFjY2VwdEJ1dHRvbj86IHN0cmluZyB9KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICBvcHRpb25zLmFjY2VwdEJ1dHRvbiA9IG9wdGlvbnMuYWNjZXB0QnV0dG9uIHx8ICdPSydcblxuICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW4oQWxlcnRDb21wb25lbnQsIHtcbiAgICAgIGVzY2FwZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogZmFsc2UsXG4gICAgICBkYXRhOiB7IHRpdGxlLCAuLi5vcHRpb25zIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnBpcGUoXG4gICAgICBtYXAocmVzdWx0ID0+IHJlc3VsdCA9PT0gJ2FjY2VwdCcpXG4gICAgKVxuICB9XG5cbiAgd2l0aENvbmZpcm0gKHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzoge1xuICAgIGNvbnRlbnQ/OiBzdHJpbmdcbiAgICBhY2NlcHRCdXR0b24/OiBzdHJpbmdcbiAgICBjYW5jZWxCdXR0b24/OiBzdHJpbmdcbiAgfSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHRpdGxlID0gdGl0bGUgfHwgJ0NvbmZpcm0/J1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgb3B0aW9ucy5hY2NlcHRCdXR0b24gPSBvcHRpb25zLmFjY2VwdEJ1dHRvbiB8fCAnWWVzJ1xuICAgIG9wdGlvbnMuY2FuY2VsQnV0dG9uID0gb3B0aW9ucy5jYW5jZWxCdXR0b24gfHwgJ05vJ1xuXG4gICAgY29uc3QgcmVmID0gdGhpcy5kaWFsb2cub3BlbihDb25maXJtQ29tcG9uZW50LCB7XG4gICAgICBlc2NhcGVUb0Nsb3NlOiBmYWxzZSxcbiAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgZGF0YTogeyB0aXRsZSwgLi4ub3B0aW9ucyB9XG4gICAgfSlcbiAgICByZXR1cm4gcmVmLmFmdGVyQ2xvc2VkKCkucGlwZShcbiAgICAgIG1hcChyZXN1bHQgPT4gcmVzdWx0ID09PSAnYWNjZXB0JylcbiAgICApXG4gIH1cblxuICB3aXRoRm9ybSAodGl0bGU6IHN0cmluZywgZmllbGRzOiBRdWlja0Zvcm1GaWVsZFtdLCBvcHRpb25zPzoge1xuICAgIGNvbnRlbnQ/OiBzdHJpbmdcbiAgICBzdWJtaXRCdXR0b24/OiBzdHJpbmdcbiAgICBjYW5jZWxCdXR0b24/OiBzdHJpbmdcbiAgICBjYW5jZWxNZXNzYWdlPzogc3RyaW5nXG4gIH0pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aHJvd0Vycm9yKCd3aXRoRm9ybSgpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gTURDIG1vZGUnKVxuICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, filter, startWith, take, tap } from 'rxjs/operators';
import { assert } from './util/assert';
import { QuickForm } from 'ng-quick-form';
import { markAllAsDirtyAndTouched } from './util/markAllAsDirtyAndTouched';
/**
 * Manage form creation and submission.
 */
var /**
 * Manage form creation and submission.
 */
BaseFormComponent = /** @class */ (function () {
    function BaseFormComponent(cd, dialogService, closeable, cancelMessage, formFields, rawValue, valueChanges, formCreated) {
        var _this = this;
        this.cd = cd;
        this.dialogService = dialogService;
        this.closeable = closeable;
        this.cancelMessage = cancelMessage;
        this.formFields = formFields;
        this.rawValue = rawValue;
        this.valueChanges = valueChanges;
        this.formCreated = formCreated;
        this.submitted = false;
        this.form = QuickForm.makeForm(this.formFields);
        if (formCreated) {
            formCreated(this.form, this.cd);
        }
        if (this.valueChanges) {
            this.formSubscription = this.form.valueChanges.pipe(debounceTime(100), tap((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return (/** @type {?} */ (_this.valueChanges)).next({
                value: value, form: _this.form, cd: cd
            }); }))).subscribe();
        }
    }
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doClose = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // close form dialog, return false as result
        this.dialogService.withConfirm(this.cancelMessage).pipe(filter((/**
         * @param {?} confirm
         * @return {?}
         */
        function (confirm) { return confirm; })), tap((/**
         * @return {?}
         */
        function () { return _this.closeable.close(false); }))).subscribe();
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doSubmit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.form.status === 'PENDING') {
            // if form is pending validation, let's wait...
            this.dialogService.withProgress(this.form.statusChanges.pipe(startWith(this.form.status), filter((/**
             * @param {?} status
             * @return {?}
             */
            function (status) { return status !== 'PENDING'; })), take(1), tap((/**
             * @return {?}
             */
            function () { return _this.doNonPendingSubmit(); }))));
        }
        else {
            this.doNonPendingSubmit();
        }
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.doNonPendingSubmit = /**
     * @return {?}
     */
    function () {
        assert(this.form.status !== 'PENDING', 'Form status should not be pending');
        markAllAsDirtyAndTouched(this.form);
        this.submitted = true; // attempted to submit (affects validation messages)
        this.cd.markForCheck();
        if (!this.form.valid) {
            return;
        }
        // close form dialog, return form value object as result
        this.closeable.close(QuickForm.preProcessFormValues(this.rawValue ? this.form.getRawValue() : this.form.value));
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
    };
    return BaseFormComponent;
}());
/**
 * Manage form creation and submission.
 */
export { BaseFormComponent };
if (false) {
    /** @type {?} */
    BaseFormComponent.prototype.submitted;
    /** @type {?} */
    BaseFormComponent.prototype.form;
    /** @type {?} */
    BaseFormComponent.prototype.formSubscription;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.dialogService;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.closeable;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.cancelMessage;
    /** @type {?} */
    BaseFormComponent.prototype.formFields;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.rawValue;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.valueChanges;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.formCreated;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUZvcm1Db21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kaWFsb2ctc2VydmljZS8iLCJzb3VyY2VzIjpbImxpYi9CYXNlRm9ybUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQWtCLE1BQU0sZUFBZSxDQUFBO0FBQ3pELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFBOzs7O0FBVTFFOzs7O0lBS0UsMkJBQ1UsRUFBcUIsRUFDckIsYUFBNEIsRUFDNUIsU0FBb0IsRUFDcEIsYUFBcUIsRUFDdEIsVUFBNEIsRUFDM0IsUUFBaUIsRUFDakIsWUFBOEUsRUFDOUUsV0FBOEQ7UUFSeEUsaUJBdUJDO1FBdEJTLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQ3JCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFDdEIsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFDM0IsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixpQkFBWSxHQUFaLFlBQVksQ0FBa0U7UUFDOUUsZ0JBQVcsR0FBWCxXQUFXLENBQW1EO1FBWnhFLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFjZixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRS9DLElBQUksV0FBVyxFQUFFO1lBQ2YsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsSUFBSSxJQUFJLENBQUMs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QW1DOzs7OztJQUNuQyxxQ0FBeUI7Ozs7O0lBQ3pCLHlDQUFzRjs7Ozs7SUFDdEYsd0NBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuL0RpYWxvZ1NlcnZpY2UnXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGZpbHRlciwgc3RhcnRXaXRoLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vdXRpbC9hc3NlcnQnXG5pbXBvcnQgeyBRdWlja0Zvcm0sIFF1aWNrRm9ybUZpZWxkIH0gZnJvbSAnbmctcXVpY2stZm9ybSdcbmltcG9ydCB7IG1hcmtBbGxBc0RpcnR5QW5kVG91Y2hlZCB9IGZyb20gJy4vdXRpbC9tYXJrQWxsQXNEaXJ0eUFuZFRvdWNoZWQnXG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJ1xuXG50eXBlIENsb3NlYWJsZSA9IHtcbiAgY2xvc2U6IChyZXN1bHQ6IGFueSkgPT4gdm9pZFxufVxuXG4vKipcbiAqIE1hbmFnZSBmb3JtIGNyZWF0aW9uIGFuZCBzdWJtaXNzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZUZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBzdWJtaXR0ZWQgPSBmYWxzZVxuICBmb3JtOiBGb3JtR3JvdXBcbiAgZm9ybVN1YnNjcmlwdGlvbj86IFN1YnNjcmlwdGlvblxuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbG9zZWFibGU6IENsb3NlYWJsZSxcbiAgICBwcml2YXRlIGNhbmNlbE1lc3NhZ2U6IHN0cmluZyxcbiAgICBwdWJsaWMgZm9ybUZpZWxkczogUXVpY2tGb3JtRmllbGRbXSxcbiAgICBwcml2YXRlIHJhd1ZhbHVlOiBib29sZWFuLFxuICAgIHByaXZhdGUgdmFsdWVDaGFuZ2VzPzogU3ViamVjdDx7IHZhbHVlOiBhbnksIGZvcm06IEZvcm1Hcm91cCwgY2Q6IENoYW5nZURldGVjdG9yUmVmIH0+LFxuICAgIHByaXZhdGUgZm9ybUNyZWF0ZWQ/OiAoZm9ybTogRm9ybUdyb3VwLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpID0+IHZvaWRcbiAgKSB7XG4gICAgdGhpcy5mb3JtID0gUXVpY2tGb3JtLm1ha2VGb3JtKHRoaXMuZm9ybUZpZWxkcylcblxuICAgIGlmIChmb3JtQ3JlYXRlZCkge1xuICAgICAgZm9ybUNyZWF0ZWQodGhpcy5mb3JtLCB0aGlzLmNkKVxuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZUNoYW5nZXMpIHtcbiAgICAgIHRoaXMuZm9ybVN1YnNjcmlwdGlvbiA9IHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMucGlwZShcbiAgICAgICAgZGVib3VuY2VUaW1lKDEwMCksXG4gICAgICAgIHRhcCh2YWx1ZSA9PiB0aGlzLnZhbHVlQ2hhbmdlcyEubmV4dCh7XG4gICAgICAgICAgdmFsdWUsIGZvcm06IHRoaXMuZm9ybSwgY2RcbiAgICAgICAgfSkpXG4gICAgICApLnN1YnNjcmliZSgpXG4gICAgfVxuICB9XG5cbiAgZG9DbG9zZSAoKSB7XG4gICAgLy8gY2xvc2UgZm9ybSBkaWFsb2csIHJldHVybiBmYWxzZSBhcyByZXN1bHRcbiAgICB0aGlzLmRpYWxvZ1NlcnZpY2Uud2l0aENvbmZpcm0odGhpcy5jYW5jZWxNZXNzYWdlKS5waXBlKFxuICAgICAgZmlsdGVyKGNvbmZpcm0gPT4gY29uZmlybSksXG4gICAgICB0YXAoKCkgPT4gdGhpcy5jbG9zZWFibGUuY2xvc2UoZmFsc2UpKVxuICAgICkuc3Vic2NyaWJlKClcbiAgfVxuXG4gIGRvU3VibWl0ICgpIHtcbiAgICBpZiAodGhpcy5mb3JtLnN0YXR1cyA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAvLyBpZiBmb3JtIGlzIHBlbmRpbmcgdmFsaWRhdGlvbiwgbGV0J3Mgd2FpdC4uLlxuICAgICAgdGhpcy5kaWFsb2dTZXJ2aWNlLndpdGhQcm9ncmVzcyh0aGlzLmZvcm0uc3RhdHVzQ2hhbmdlcy5waXBlKFxuICAgICAgICBzdGFydFdpdGgodGhpcy5mb3JtLnN0YXR1cyksXG4gICAgICAgIGZpbHRlcihzdGF0dXMgPT4gc3RhdHVzICE9PSAnUEVORElORycpLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5kb05vblBlbmRpbmdTdWJtaXQoKSlcbiAgICAgICkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9Ob25QZW5kaW5nU3VibWl0KClcbiAgICB9XG4gIH1cblxuICBkb05vblBlbmRpbmdTdWJtaXQgKCkge1xuICAgIGFzc2VydCh0aGlzLmZvcm0uc3RhdHVzICE9PSAnUEVORElORycsICdGb3JtIHN0YXR1cyBzaG91bGQgbm90IGJlIHBlbmRpbmcnKVxuXG4gICAgbWFya0FsbEFzRGlydHlBbmRUb3VjaGVkKHRoaXMuZm9ybSlcbiAgICB0aGlzLnN1Ym1pdHRlZCA9IHRydWUgLy8gYXR0ZW1wdGVkIHRvIHN1Ym1pdCAoYWZmZWN0cyB2YWxpZGF0aW9uIG1lc3NhZ2VzKVxuICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKClcbiAgICBpZiAoIXRoaXMuZm9ybS52YWxpZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY2xvc2UgZm9ybSBkaWFsb2csIHJldHVybiBmb3JtIHZhbHVlIG9iamVjdCBhcyByZXN1bHRcbiAgICB0aGlzLmNsb3NlYWJsZS5jbG9zZShRdWlja0Zvcm0ucHJlUHJvY2Vzc0Zvcm1WYWx1ZXMoXG4gICAgICB0aGlzLnJhd1ZhbHVlID8gdGhpcy5mb3JtLmdldFJhd1ZhbHVlKCkgOiB0aGlzLmZvcm0udmFsdWUpKVxuICB9XG5cbiAgbmdPbkRlc3Ryb3kgKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZvcm1TdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuZm9ybVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgfVxuICB9XG59XG4iXX0=
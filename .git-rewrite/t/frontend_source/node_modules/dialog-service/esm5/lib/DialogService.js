/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
var /**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
DialogService = /** @class */ (function () {
    function DialogService() {
    }
    return DialogService;
}());
/**
 * The DialogService class exposes functions used to create alert, confirmation, progress and form
 *  based dialogs.
 * @abstract
 */
export { DialogService };
if (false) {
    /**
     * Display progress dialog that blocks UI interaction until processing of completes.
     *
     * When observable completes, return the last value emitted by observable workload.
     *
     * If observable throws error, progress dialog will close with undefined value.
     *
     * @abstract
     * @template T
     * @param {?} work Observable workload
     * @param {?=} title Dialog title (defaults to 'Please Wait...')
     * @param {?=} options Dialog options. 'dialogOptions' are options that will be passed to underlying
     * dialog implementation (i.e. Angular Material). It provides a way to supply options to
     * MatDialogConfig.
     * @return {?}
     */
    DialogService.prototype.withProgress = function (work, title, options) { };
    /**
     * Display alert dialog.
     *
     * @abstract
     * @param {?} title Dialog title
     * @param {?=} options Dialog options. 'content' represents content to be display in dialog
     * @return {?} Observable with true value if user clicks OK to accept the alert message, false
     * otherwise
     */
    DialogService.prototype.withAlert = function (title, options) { };
    /**
     * Display confirmation dialog.
     *
     * @abstract
     * @param {?=} title Optional dialog title (defaults to 'Confirm?')
     * @param {?=} options Dialog options. 'content' represents content to be display in dialog;
     * 'acceptButton' represents label to accept confirmation (defaults to 'Yes'); 'cancelButton'
     * represents label to cancel confirmation (defaults to 'No')
     * @return {?} Observable with true value if user accepts the confirmation, false otherwise
     */
    DialogService.prototype.withConfirm = function (title, options) { };
    /**
     * Display a dialog with form fields for data collection. Each form field definition describes:
     *
     * - title. Label for the field. Required.
     *
     * - id. Unique identifier for the field. Optional. Defaults to camel case representation of
     * title.
     *
     * - type. Field type. Valid values are 'text', 'textarea', 'switch', 'radio', 'checkbox',
     * 'select' and 'password'. Optional. Defaults to 'text'.
     *
     * - value. Default value for the field when the form is displayed. Optional.
     *
     * - options. List of possible options for 'radio', 'checkbox' and 'select' field types. Options
     * can be specified as an "array of string" or an "array of object with 'value' and 'label' as
     * keys". Optional.
     *
     * - required. Flag to indicate that field input is required. Optional. Defaults to false.
     *
     * - validators. Array of Angular validation functions (i.e. ValidatorFn). Optional.
     *
     * - asyncValidators. Array of asynchronous Angular validation functions (i.e. AsyncValidatorFn).
     * Optional.
     *
     * The dialog will close and return form values (as a JSON object) when user clicks on submit
     * button (provided all field validation passed).If user cancels the form, the dialog will close
     * and return false.
     *
     * @abstract
     * @param {?} title
     * @param {?} fields
     * @param {?=} options Dialog options.
     *  - 'content' represents content to be display in dialog;
     *  - 'submitButton' represents label to submit form (defaults to 'Submit');
     *  - 'cancelButton' represents label to cancel form (defaults to 'Cancel');
     *  - 'layout' defines the form's layout attributes (uses "flex-cell");
     *  - 'rawValue' is used to get form raw value. Default is false.
     *  - 'valueChanges' is used to receive form value change (experimental)
     *  - 'formCreated' if specified, this callback function is called when the form is created. It
     *      let user perform post FormGroup creation processing (experimental). e.g. to listen to
     *      specific field value changes for advanced form manipulation/validation requirements.
     * @return {?} Observable with form value object on submission, or false if form was cancelled
     */
    DialogService.prototype.withForm = function (title, fields, options) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlhbG9nU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RpYWxvZy1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL0RpYWxvZ1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBU0E7Ozs7OztJQUFBO0lBb0hBLENBQUM7SUFBRCxvQkFBQztBQUFELENBQUMsQUFwSEQsSUFvSEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXRHQywyRUFHNkQ7Ozs7Ozs7Ozs7SUFVN0Qsa0VBT3NCOzs7Ozs7Ozs7OztJQVd0QixvRUFTc0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBNEN0Qix5RUFpQnFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBRdWlja0Zvcm1GaWVsZCB9IGZyb20gJ25nLXF1aWNrLWZvcm0nXG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3JtcydcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuLyoqXG4gKiBUaGUgRGlhbG9nU2VydmljZSBjbGFzcyBleHBvc2VzIGZ1bmN0aW9ucyB1c2VkIHRvIGNyZWF0ZSBhbGVydCwgY29uZmlybWF0aW9uLCBwcm9ncmVzcyBhbmQgZm9ybVxuICogIGJhc2VkIGRpYWxvZ3MuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEaWFsb2dTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIERpc3BsYXkgcHJvZ3Jlc3MgZGlhbG9nIHRoYXQgYmxvY2tzIFVJIGludGVyYWN0aW9uIHVudGlsIHByb2Nlc3Npbmcgb2YgY29tcGxldGVzLlxuICAgKlxuICAgKiBXaGVuIG9ic2VydmFibGUgY29tcGxldGVzLCByZXR1cm4gdGhlIGxhc3QgdmFsdWUgZW1pdHRlZCBieSBvYnNlcnZhYmxlIHdvcmtsb2FkLlxuICAgKlxuICAgKiBJZiBvYnNlcnZhYmxlIHRocm93cyBlcnJvciwgcHJvZ3Jlc3MgZGlhbG9nIHdpbGwgY2xvc2Ugd2l0aCB1bmRlZmluZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB3b3JrIE9ic2VydmFibGUgd29ya2xvYWRcbiAgICogQHBhcmFtIHRpdGxlIERpYWxvZyB0aXRsZSAoZGVmYXVsdHMgdG8gJ1BsZWFzZSBXYWl0Li4uJylcbiAgICogQHBhcmFtIG9wdGlvbnMgRGlhbG9nIG9wdGlvbnMuICdkaWFsb2dPcHRpb25zJyBhcmUgb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHVuZGVybHlpbmdcbiAgICogZGlhbG9nIGltcGxlbWVudGF0aW9uIChpLmUuIEFuZ3VsYXIgTWF0ZXJpYWwpLiBJdCBwcm92aWRlcyBhIHdheSB0byBzdXBwbHkgb3B0aW9ucyB0b1xuICAgKiBNYXREaWFsb2dDb25maWcuXG4gICAqL1xuICBhYnN0cmFjdCB3aXRoUHJvZ3Jlc3M8VCA9IGFueT4gKHdvcms6IE9ic2VydmFibGU8VD4sIHRpdGxlPzogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM/OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dPcHRpb25zPzogeyBbIGtleTogc3RyaW5nIF06IGFueSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk6IE9ic2VydmFibGU8VCB8IHVuZGVmaW5lZD5cblxuICAvKipcbiAgICogRGlzcGxheSBhbGVydCBkaWFsb2cuXG4gICAqXG4gICAqIEBwYXJhbSB0aXRsZSBEaWFsb2cgdGl0bGVcbiAgICogQHBhcmFtIG9wdGlvbnMgRGlhbG9nIG9wdGlvbnMuICdjb250ZW50JyByZXByZXNlbnRzIGNvbnRlbnQgdG8gYmUgZGlzcGxheSBpbiBkaWFsb2dcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWUgaWYgdXNlciBjbGlja3MgT0sgdG8gYWNjZXB0IHRoZSBhbGVydCBtZXNzYWdlLCBmYWxzZVxuICAgKiBvdGhlcndpc2VcbiAgICovXG4gIGFic3RyYWN0IHdpdGhBbGVydCAoXG4gICAgdGl0bGU6IHN0cmluZyxcbiAgICBvcHRpb25zPzoge1xuICAgICAgY29udGVudD86IHN0cmluZ1xuICAgICAgYWNjZXB0QnV0dG9uPzogc3RyaW5nXG4gICAgICBkaWFsb2dPcHRpb25zPzogeyBbIGtleTogc3RyaW5nIF06IGFueSB9XG4gICAgfVxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+XG5cbiAgLyoqXG4gICAqIERpc3BsYXkgY29uZmlybWF0aW9uIGRpYWxvZy5cbiAgICpcbiAgICogQHBhcmFtIHRpdGxlIE9wdGlvbmFsIGRpYWxvZyB0aXRsZSAoZGVmYXVsdHMgdG8gJ0NvbmZpcm0/JylcbiAgICogQHBhcmFtIG9wdGlvbnMgRGlhbG9nIG9wdGlvbnMuICdjb250ZW50JyByZXByZXNlbnRzIGNvbnRlbnQgdG8gYmUgZGlzcGxheSBpbiBkaWFsb2c7XG4gICAqICdhY2NlcHRCdXR0b24nIHJlcHJlc2VudHMgbGFiZWwgdG8gYWNjZXB0IGNvbmZpcm1hdGlvbiAoZGVmYXVsdHMgdG8gJ1llcycpOyAnY2FuY2VsQnV0dG9uJ1xuICAgKiByZXByZXNlbnRzIGxhYmVsIHRvIGNhbmNlbCBjb25maXJtYXRpb24gKGRlZmF1bHRzIHRvICdObycpXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGUgd2l0aCB0cnVlIHZhbHVlIGlmIHVzZXIgYWNjZXB0cyB0aGUgY29uZmlybWF0aW9uLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGFic3RyYWN0IHdpdGhDb25maXJtIChcbiAgICB0aXRsZT86IHN0cmluZyxcbiAgICBvcHRpb25zPzoge1xuICAgICAgY29udGVudD86IHN0cmluZ1xuICAgICAgYWNjZXB0QnV0dG9uPzogc3RyaW5nXG4gICAgICBjYW5jZWxCdXR0b24/OiBzdHJpbmdcbiAgICAgIGNhbmNlbE1lc3NhZ2U/OiBzdHJpbmdcbiAgICAgIGRpYWxvZ09wdGlvbnM/OiB7IFsga2V5OiBzdHJpbmcgXTogYW55IH1cbiAgICB9XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj5cblxuICAvKipcbiAgICogRGlzcGxheSBhIGRpYWxvZyB3aXRoIGZvcm0gZmllbGRzIGZvciBkYXRhIGNvbGxlY3Rpb24uIEVhY2ggZm9ybSBmaWVsZCBkZWZpbml0aW9uIGRlc2NyaWJlczpcbiAgICpcbiAgICogLSB0aXRsZS4gTGFiZWwgZm9yIHRoZSBmaWVsZC4gUmVxdWlyZWQuXG4gICAqXG4gICAqIC0gaWQuIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZmllbGQuIE9wdGlvbmFsLiBEZWZhdWx0cyB0byBjYW1lbCBjYXNlIHJlcHJlc2VudGF0aW9uIG9mXG4gICAqIHRpdGxlLlxuICAgKlxuICAgKiAtIHR5cGUuIEZpZWxkIHR5cGUuIFZhbGlkIHZhbHVlcyBhcmUgJ3RleHQnLCAndGV4dGFyZWEnLCAnc3dpdGNoJywgJ3JhZGlvJywgJ2NoZWNrYm94JyxcbiAgICogJ3NlbGVjdCcgYW5kICdwYXNzd29yZCcuIE9wdGlvbmFsLiBEZWZhdWx0cyB0byAndGV4dCcuXG4gICAqXG4gICAqIC0gdmFsdWUuIERlZmF1bHQgdmFsdWUgZm9yIHRoZSBmaWVsZCB3aGVuIHRoZSBmb3JtIGlzIGRpc3BsYXllZC4gT3B0aW9uYWwuXG4gICAqXG4gICAqIC0gb3B0aW9ucy4gTGlzdCBvZiBwb3NzaWJsZSBvcHRpb25zIGZvciAncmFkaW8nLCAnY2hlY2tib3gnIGFuZCAnc2VsZWN0JyBmaWVsZCB0eXBlcy4gT3B0aW9uc1xuICAgKiBjYW4gYmUgc3BlY2lmaWVkIGFzIGFuIFwiYXJyYXkgb2Ygc3RyaW5nXCIgb3IgYW4gXCJhcnJheSBvZiBvYmplY3Qgd2l0aCAndmFsdWUnIGFuZCAnbGFiZWwnIGFzXG4gICAqIGtleXNcIi4gT3B0aW9uYWwuXG4gICAqXG4gICAqIC0gcmVxdWlyZWQuIEZsYWcgdG8gaW5kaWNhdGUgdGhhdCBmaWVsZCBpbnB1dCBpcyByZXF1aXJlZC4gT3B0aW9uYWwuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKlxuICAgKiAtIHZhbGlkYXRvcnMuIEFycmF5IG9mIEFuZ3VsYXIgdmFsaWRhdGlvbiBmdW5jdGlvbnMgKGkuZS4gVmFsaWRhdG9yRm4pLiBPcHRpb25hbC5cbiAgICpcbiAgICogLSBhc3luY1ZhbGlkYXRvcnMuIEFycmF5IG9mIGFzeW5jaHJvbm91cyBBbmd1bGFyIHZhbGlkYXRpb24gZnVuY3Rpb25zIChpLmUuIEFzeW5jVmFsaWRhdG9yRm4pLlxuICAgKiBPcHRpb25hbC5cbiAgICpcbiAgICogVGhlIGRpYWxvZyB3aWxsIGNsb3NlIGFuZCByZXR1cm4gZm9ybSB2YWx1ZXMgKGFzIGEgSlNPTiBvYmplY3QpIHdoZW4gdXNlciBjbGlja3Mgb24gc3VibWl0XG4gICAqIGJ1dHRvbiAocHJvdmlkZWQgYWxsIGZpZWxkIHZhbGlkYXRpb24gcGFzc2VkKS5JZiB1c2VyIGNhbmNlbHMgdGhlIGZvcm0sIHRoZSBkaWFsb2cgd2lsbCBjbG9zZVxuICAgKiBhbmQgcmV0dXJuIGZhbHNlLlxuICAgKlxuICAgKiBAcGFyYW0gdGl0bGVcbiAgICogQHBhcmFtIGZpZWxkc1xuICAgKiBAcGFyYW0gb3B0aW9ucyBEaWFsb2cgb3B0aW9ucy5cbiAgICogIC0gJ2NvbnRlbnQnIHJlcHJlc2VudHMgY29udGVudCB0byBiZSBkaXNwbGF5IGluIGRpYWxvZztcbiAgICogIC0gJ3N1Ym1pdEJ1dHRvbicgcmVwcmVzZW50cyBsYWJlbCB0byBzdWJtaXQgZm9ybSAoZGVmYXVsdHMgdG8gJ1N1Ym1pdCcpO1xuICAgKiAgLSAnY2FuY2VsQnV0dG9uJyByZXByZXNlbnRzIGxhYmVsIHRvIGNhbmNlbCBmb3JtIChkZWZhdWx0cyB0byAnQ2FuY2VsJyk7XG4gICAqICAtICdsYXlvdXQnIGRlZmluZXMgdGhlIGZvcm0ncyBsYXlvdXQgYXR0cmlidXRlcyAodXNlcyBcImZsZXgtY2VsbFwiKTtcbiAgICogIC0gJ3Jhd1ZhbHVlJyBpcyB1c2VkIHRvIGdldCBmb3JtIHJhdyB2YWx1ZS4gRGVmYXVsdCBpcyBmYWxzZS5cbiAgICogIC0gJ3ZhbHVlQ2hhbmdlcycgaXMgdXNlZCB0byByZWNlaXZlIGZvcm0gdmFsdWUgY2hhbmdlIChleHBlcmltZW50YWwpXG4gICAqICAtICdmb3JtQ3JlYXRlZCcgaWYgc3BlY2lmaWVkLCB0aGlzIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIHRoZSBmb3JtIGlzIGNyZWF0ZWQuIEl0XG4gICAqICAgICAgbGV0IHVzZXIgcGVyZm9ybSBwb3N0IEZvcm1Hcm91cCBjcmVhdGlvbiBwcm9jZXNzaW5nIChleHBlcmltZW50YWwpLiBlLmcuIHRvIGxpc3RlbiB0b1xuICAgKiAgICAgIHNwZWNpZmljIGZpZWxkIHZhbHVlIGNoYW5nZXMgZm9yIGFkdmFuY2VkIGZvcm0gbWFuaXB1bGF0aW9uL3ZhbGlkYXRpb24gcmVxdWlyZW1lbnRzLlxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIHdpdGggZm9ybSB2YWx1ZSBvYmplY3Qgb24gc3VibWlzc2lvbiwgb3IgZmFsc2UgaWYgZm9ybSB3YXMgY2FuY2VsbGVkXG4gICAqL1xuICBhYnN0cmFjdCB3aXRoRm9ybSAoXG4gICAgdGl0bGU6IHN0cmluZyxcbiAgICBmaWVsZHM6IFF1aWNrRm9ybUZpZWxkW10sXG4gICAgb3B0aW9ucz86IHtcbiAgICAgIGNvbnRlbnQ/OiBzdHJpbmdcbiAgICAgIHN1Ym1pdEJ1dHRvbj86IHN0cmluZ1xuICAgICAgY2FuY2VsQnV0dG9uPzogc3RyaW5nXG4gICAgICBsYXlvdXQ/OiB7XG4gICAgICAgIGZsZXhDZWxsPzogYm9vbGVhbiB8IDYgfCAxMlxuICAgICAgICBndXR0ZXI/OiBib29sZWFuXG4gICAgICAgIGdyb3dJdGVtcz86IGJvb2xlYW5cbiAgICAgICAgZGVidWc/OiBib29sZWFuXG4gICAgICB9LFxuICAgICAgcmF3VmFsdWU/OiBib29sZWFuLFxuICAgICAgdmFsdWVDaGFuZ2VzPzogU3ViamVjdDx7IHZhbHVlOiBhbnksIGZvcm06IEZvcm1Hcm91cCwgY2Q6IENoYW5nZURldGVjdG9yUmVmIH0+XG4gICAgICBmb3JtQ3JlYXRlZD86IChmb3JtOiBGb3JtR3JvdXAsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikgPT4gdm9pZFxuICAgICAgZGlhbG9nT3B0aW9ucz86IHsgWyBrZXk6IHN0cmluZyBdOiBhbnkgfVxuICAgIH0pOiBPYnNlcnZhYmxlPGFueT5cbn1cbiJdfQ==
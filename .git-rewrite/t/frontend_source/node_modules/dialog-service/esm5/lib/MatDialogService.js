/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DialogService } from './DialogService';
import { MatDialog } from '@angular/material/dialog';
import { concatMap, finalize, map, tap } from 'rxjs/operators';
import { AlertComponent } from './mat/Alert.component';
import { ProgressComponent } from './mat/Progress.component';
import { ConfirmComponent } from './mat/Confirm.component';
import { FormComponent } from './mat/Form.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
var MatDialogService = /** @class */ (function (_super) {
    tslib_1.__extends(MatDialogService, _super);
    function MatDialogService(dialog) {
        var _this = _super.call(this) || this;
        _this.dialog = dialog;
        return _this;
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withProgress = /**
     * @template T
     * @param {?} work
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (work, title, options) {
        title = title || 'Please Wait...';
        /** @type {?} */
        var workOutput;
        /** @type {?} */
        var ref = this.dialog.open(ProgressComponent, tslib_1.__assign({ disableClose: true, data: { title: title } }, (options && options.dialogOptions || {})));
        ref.afterOpened().pipe(concatMap((/**
         * @return {?}
         */
        function () { return work; })), tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return workOutput = val; })), // set workOutput
        finalize((/**
         * @return {?}
         */
        function () { return ref.close(); }))).subscribe();
        return ref.afterClosed().pipe(map((/**
         * @return {?}
         */
        function () { return workOutput; })) // return workOutput
        );
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withAlert = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        options = options || {};
        options.acceptButton = options.acceptButton || 'OK';
        /** @type {?} */
        var dialogRef = this.dialog.open(AlertComponent, tslib_1.__assign({ disableClose: true, minWidth: 200, data: tslib_1.__assign({ title: title }, options) }, (options && options.dialogOptions || {})));
        return dialogRef.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result === true; })));
    };
    /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withConfirm = /**
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        title = title || 'Confirm?';
        options = options || {};
        options.acceptButton = options.acceptButton || 'Yes';
        options.cancelButton = options.cancelButton || 'No';
        /** @type {?} */
        var ref = this.dialog.open(ConfirmComponent, tslib_1.__assign({ disableClose: true, data: tslib_1.__assign({ title: title }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed().pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result; })));
    };
    /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    MatDialogService.prototype.withForm = /**
     * @param {?} title
     * @param {?} fields
     * @param {?=} options
     * @return {?}
     */
    function (title, fields, options) {
        options = options || {};
        options.submitButton = options.submitButton || 'Submit';
        options.cancelButton = options.cancelButton || 'Cancel';
        options.cancelMessage = options.cancelMessage || 'Cancel?';
        options.rawValue = options.rawValue || false;
        /** @type {?} */
        var ref = this.dialog.open(FormComponent, tslib_1.__assign({ disableClose: true, data: tslib_1.__assign({ title: title, fields: fields }, options) }, (options && options.dialogOptions || {})));
        return ref.afterClosed();
    };
    MatDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MatDialogService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    /** @nocollapse */ MatDialogService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MatDialogService_Factory() { return new MatDialogService(i0.ɵɵinject(i1.MatDialog)); }, token: MatDialogService, providedIn: "root" });
    return MatDialogService;
}(DialogService));
export { MatDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectorRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { DialogService } from './DialogService';
import { MatDialog } from '@angular/material/dialog';
import { QuickFormField } from 'ng-quick-form';
import { FormGroup } from '@angular/forms';
export declare class MatDialogService extends DialogService {
    private dialog;
    constructor(dialog: MatDialog);
    withProgress<T = any>(work: Observable<T>, title?: string, options?: {
        dialogOptions?: {
            [key: string]: any;
        };
    }): Observable<T | undefined>;
    withAlert(title: string, options?: {
        content?: string;
        acceptButton?: string;
        dialogOptions?: {
            [key: string]: any;
        };
    }): Observable<boolean>;
    withConfirm(title?: string, options?: {
        content?: string;
        acceptButton?: string;
        cancelButton?: string;
        dialogOptions?: {
            [key: string]: any;
        };
    }): Observable<boolean>;
    withForm(title: string, fields: QuickFormField[], options?: {
        content?: string;
        submitButton?: string;
        cancelButton?: string;
        cancelMessage?: string;
        rawValue?: boolean;
        layout?: {
            flexCell?: boolean | 6 | 12;
            gutter?: boolean;
            growItems?: boolean;
            debug?: boolean;
        };
        valueChanges?: Subject<{
            value: any;
            form: FormGroup;
            cd: ChangeDetectorRef;
        }>;
        formCreated?: (form: FormGroup, cd: ChangeDetectorRef) => void;
        dialogOptions?: {
            [key: string]: any;
        };
    }): Observable<any>;
}

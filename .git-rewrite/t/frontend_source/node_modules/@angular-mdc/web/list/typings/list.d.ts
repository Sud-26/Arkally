import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { Platform } from '@angular-mdc/web/common';
import { MdcListItem, MdcListSelectionChange } from './list-item';
/** Change event that is being fired whenever the selected state of an option changes. */
export declare class MdcListItemChange {
    /** Reference to the selection list that emitted the event. */
    source: MdcList;
    /** Reference to the option that has been changed. */
    option: MdcListItem;
    constructor(
    /** Reference to the selection list that emitted the event. */
    source: MdcList, 
    /** Reference to the option that has been changed. */
    option: MdcListItem);
}
/** Notifies user action on list item including keyboard and mouse actions. */
export interface MdcListItemAction {
    index: number;
}
export declare class MdcListGroup {
    elementRef: ElementRef;
    subheader?: string;
    constructor(elementRef: ElementRef);
}
export declare class MdcListGroupSubheader {
    elementRef: ElementRef;
    constructor(elementRef: ElementRef);
}
export declare class MdcList implements AfterViewInit, OnDestroy {
    private _platform;
    private _changeDetectorRef;
    elementRef: ElementRef;
    twoLine: boolean;
    private _twoLine;
    dense: boolean;
    private _dense;
    border: boolean;
    private _border;
    avatar: boolean;
    private _avatar;
    interactive: boolean;
    private _interactive;
    disableRipple: boolean;
    private _disableRipple;
    singleSelection: boolean | undefined;
    private _singleSelection;
    useActivatedClass: boolean;
    private _useActivatedClass;
    useSelectedClass: boolean;
    private _useSelectedClass;
    verticalOrientation: boolean;
    private _verticalOrientation;
    wrapFocus: boolean;
    private _wrapFocus;
    items: QueryList<MdcListItem>;
    /** Emits a change event whenever the selected state of an option changes. */
    readonly selectionChange: EventEmitter<MdcListItemChange>;
    /** Emits an event for keyboard and mouse actions. */
    readonly actionEvent: EventEmitter<MdcListItemAction>;
    /** Subscription to changes in list items. */
    private _changeSubscription;
    /** Subscription to selection events in list items. */
    private itemSelectionSubscription;
    /** Combined stream of all of the list item selection events. */
    readonly listItemSelections: Observable<MdcListSelectionChange>;
    private _createAdapter;
    private _foundation;
    constructor(_platform: Platform, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setSelectedIndex(index: number): void;
    setSelectedValue(value: any): void;
    getSelectedItem(): MdcListItem | undefined;
    getSelectedIndex(): number;
    getSelectedValue(): any;
    getSelectedText(): string;
    getListItemByValue(value: any): MdcListItem | undefined;
    getListItemByIndex(index: number): MdcListItem | undefined;
    getListItemIndexByValue(value: any): number;
    focusItemAtIndex(index: number): void;
    focusFirstElement(): number;
    focusLastElement(): number;
    focusNextElement(index: number): number;
    focusPrevElement(index: number): number;
    setRole(role: string): void;
    reset(): void;
    private _applySelectionState;
    private _resetListItems;
    private _dropSubscriptions;
    /** Listens to selected events on each list item. */
    private _listenForListItemSelection;
    _onFocusIn(evt: FocusEvent): void;
    _onFocusOut(evt: FocusEvent): void;
    _onKeydown(evt: KeyboardEvent): void;
    _handleClickEvent(evt: MouseEvent): void;
    private _getListItemByEventTarget;
    private _getListItemIndexByEvent;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

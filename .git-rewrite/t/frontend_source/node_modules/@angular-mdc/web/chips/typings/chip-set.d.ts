import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Observable } from 'rxjs';
import { MdcChip, MdcChipInteractionEvent, MdcChipRemovedEvent, MdcChipSelectionEvent } from './chip';
export declare class MdcChipSetChange {
    source: MdcChipSet;
    value: any;
    constructor(source: MdcChipSet, value: any);
}
export declare class MdcChipSet implements AfterContentInit, OnDestroy, ControlValueAccessor {
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    ngControl: NgControl;
    /** Emits whenever the component is destroyed. */
    private _destroyed;
    /**
    * Indicates that the chips in the set are choice chips, which allow a single selection from a set of options.
    */
    choice: boolean;
    private _choice;
    /**
    * Indicates that the chips in the set are filter chips, which allow multiple selection from a set of options.
    */
    filter: boolean;
    private _filter;
    /**
    * Indicates that the chips in the set are input chips, which enable user input by converting text into chips.
    */
    input: boolean;
    private _input;
    value: any;
    protected _value: any;
    /**
     * A function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    private _compareWith;
    readonly change: EventEmitter<MdcChipSetChange>;
    chips: QueryList<MdcChip>;
    /** Function when touched */
    _onTouched: () => void;
    /** Function when changed */
    _onChange: (value: any) => void;
    /** Subscription to selection events in chips. */
    private _chipSelectionSubscription;
    /** Subscription to remove changes in chips. */
    private _chipRemoveSubscription;
    /** Subscription to interaction events in chips. */
    private _chipInteractionSubscription;
    /** Combined stream of all of the chip selection events. */
    readonly chipSelections: Observable<MdcChipSelectionEvent>;
    /** Combined stream of all of the chip interaction events. */
    readonly chipInteractions: Observable<MdcChipInteractionEvent>;
    /** Combined stream of all of the chip remove events. */
    readonly chipRemoveChanges: Observable<MdcChipRemovedEvent>;
    private _createAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    getSelectedChipIds(): string[];
    select(chipId: string): void;
    getChipById(chipId: string): MdcChip | undefined;
    selectByValue(value: any, isUserInput?: boolean): void;
    /**
     * Finds and selects the chip based on its value.
     * @returns Chip that has the corresponding value.
     */
    private _selectValue;
    private _initializeSelection;
    private _propagateChanges;
    private _resetChipSet;
    private _dropSubscriptions;
    /** Listens to selected events on each chip. */
    private _listenForChipSelection;
    private _listenToChipsInteraction;
    private _listenToChipsRemoved;
    private _findChipIndex;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

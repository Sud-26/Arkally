/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/common', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.common = {}), global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function toBoolean(value) {
        return value != null && "" + value !== 'false';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /** @type {?} */
    var UP_ARROW = 38;
    /** @type {?} */
    var DOWN_ARROW = 40;
    /** @type {?} */
    var RIGHT_ARROW = 39;
    /** @type {?} */
    var LEFT_ARROW = 37;
    /** @type {?} */
    var PAGE_UP = 33;
    /** @type {?} */
    var PAGE_DOWN = 34;
    /** @type {?} */
    var HOME = 36;
    /** @type {?} */
    var END = 35;
    /** @type {?} */
    var ENTER = 13;
    /** @type {?} */
    var SPACE = 32;
    /** @type {?} */
    var TAB = 9;
    /** @type {?} */
    var ESCAPE = 27;
    /** @type {?} */
    var BACKSPACE = 8;
    /** @type {?} */
    var DELETE = 46;
    /** @type {?} */
    var A = 65;
    /** @type {?} */
    var Z = 90;
    /** @type {?} */
    var ZERO = 48;
    /** @type {?} */
    var NINE = 57;
    /** @type {?} */
    var COMMA = 188;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @param {?=} fallbackValue
     * @return {?}
     */
    function toNumber(value, fallbackValue) {
        if (fallbackValue === void 0) { fallbackValue = 0; }
        return _isNumberValue(value) ? Number(value) : fallbackValue;
    }
    /**
     * Whether the provided value is considered a number.
     * @param {?} value
     * @return {?}
     */
    function _isNumberValue(value) {
        // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
        // and other non-number values as NaN, where Number just uses 0) but it considers the string
        // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
        return !isNaN(parseFloat((/** @type {?} */ (value)))) && !isNaN(Number(value));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Platform = /** @class */ (function () {
        function Platform(_platformId) {
            this._platformId = _platformId;
            this.isBrowser = this._platformId ?
                common.isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;
        }
        Platform.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        Platform.ctorParameters = function () { return [
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ Platform.ngInjectableDef = core.defineInjectable({ factory: function Platform_Factory() { return new Platform(core.inject(core.PLATFORM_ID)); }, token: Platform, providedIn: "root" });
        return Platform;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Class to coordinate unique selection based on name.
     * Intended to be consumed as an Angular service.
     * This service is needed because native radio change events are only fired on the item currently
     * being selected, and we still need to uncheck the previous selection.
     *
     * This service does not *store* any IDs and names because they may change at any time, so it is
     * less error-prone if they are simply passed through when the events occur.
     */
    var UniqueSelectionDispatcher = /** @class */ (function () {
        function UniqueSelectionDispatcher() {
            this._listeners = [];
        }
        /**
         * Notify other items that selection for the given name has been set.
         * @param id ID of the item.
         * @param name Name of the item.
         */
        /**
         * Notify other items that selection for the given name has been set.
         * @param {?} id ID of the item.
         * @param {?} name Name of the item.
         * @return {?}
         */
        UniqueSelectionDispatcher.prototype.notify = /**
         * Notify other items that selection for the given name has been set.
         * @param {?} id ID of the item.
         * @param {?} name Name of the item.
         * @return {?}
         */
        function (id, name) {
            for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
                var listener = _a[_i];
                listener(id, name);
            }
        };
        /**
         * Listen for future changes to item selection.
         * @return Function used to deregister listener
         */
        /**
         * Listen for future changes to item selection.
         * @param {?} listener
         * @return {?} Function used to deregister listener
         */
        UniqueSelectionDispatcher.prototype.listen = /**
         * Listen for future changes to item selection.
         * @param {?} listener
         * @return {?} Function used to deregister listener
         */
        function (listener) {
            var _this = this;
            this._listeners.push(listener);
            return (/**
             * @return {?}
             */
            function () {
                _this._listeners = _this._listeners.filter((/**
                 * @param {?} registered
                 * @return {?}
                 */
                function (registered) {
                    return listener !== registered;
                }));
            });
        };
        /**
         * @return {?}
         */
        UniqueSelectionDispatcher.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._listeners = [];
        };
        UniqueSelectionDispatcher.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = core.defineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: "root" });
        return UniqueSelectionDispatcher;
    }());

    exports.toBoolean = toBoolean;
    exports.UP_ARROW = UP_ARROW;
    exports.DOWN_ARROW = DOWN_ARROW;
    exports.RIGHT_ARROW = RIGHT_ARROW;
    exports.LEFT_ARROW = LEFT_ARROW;
    exports.PAGE_UP = PAGE_UP;
    exports.PAGE_DOWN = PAGE_DOWN;
    exports.HOME = HOME;
    exports.END = END;
    exports.ENTER = ENTER;
    exports.SPACE = SPACE;
    exports.TAB = TAB;
    exports.ESCAPE = ESCAPE;
    exports.BACKSPACE = BACKSPACE;
    exports.DELETE = DELETE;
    exports.A = A;
    exports.Z = Z;
    exports.ZERO = ZERO;
    exports.NINE = NINE;
    exports.COMMA = COMMA;
    exports.toNumber = toNumber;
    exports._isNumberValue = _isNumberValue;
    exports.Platform = Platform;
    exports.UniqueSelectionDispatcher = UniqueSelectionDispatcher;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=web-common.umd.js.map

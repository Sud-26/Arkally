{"version":3,"file":"web-icon.umd.js","sources":["../../packages/icon/icon-module.ts","../../packages/icon/icon.ts","../../packages/icon/icon-registry.ts","../../packages/icon/material-icons.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport { MdcMaterialIcons } from './material-icons';\r\nimport { MdcIcon } from './icon';\r\n\r\nconst ICON_DECLARATIONS = [\r\n  MdcIcon,\r\n  MdcMaterialIcons\r\n];\r\n\r\n@NgModule({\r\n  exports: ICON_DECLARATIONS,\r\n  declarations: ICON_DECLARATIONS\r\n})\r\nexport class MdcIconModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterViewChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { take } from 'rxjs/operators';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { toBoolean } from '@angular-mdc/web/common';\r\nimport { MdcIconRegistry } from './icon-registry';\r\n\r\nexport interface MdcIconLocation {\r\n  getPathname: () => string;\r\n}\r\n\r\nexport function MDC_ICON_LOCATION_FACTORY(): MdcIconLocation {\r\n  const _document = inject(DOCUMENT);\r\n  const _location = _document ? _document.location : null;\r\n\r\n  return {\r\n    // Note that this needs to be a function, rather than a property, because Angular\r\n    // will only resolve it once, but we want the current path on each call.\r\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\r\n  };\r\n}\r\n\r\n/**\r\n * Injection token used to provide the current location to `MdcIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n */\r\nexport const MDC_ICON_LOCATION = new InjectionToken<MdcIconLocation>('mdc-icon-location', {\r\n  providedIn: 'root',\r\n  factory: MDC_ICON_LOCATION_FACTORY\r\n});\r\n\r\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\r\nconst funcIriAttributes = [\r\n  'clip-path',\r\n  'color-profile',\r\n  'src',\r\n  'cursor',\r\n  'fill',\r\n  'filter',\r\n  'marker',\r\n  'marker-start',\r\n  'marker-mid',\r\n  'marker-end',\r\n  'mask',\r\n  'stroke'\r\n];\r\n\r\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\r\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\r\n\r\n/** Regex that can be used to extract the id out of a FuncIRI. */\r\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-icon, [mdcIcon]',\r\n  exportAs: 'mdcIcon',\r\n  host: {\r\n    '[attr.role]': 'role',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    'class': 'ngx-mdc-icon',\r\n    '[class.ngx-mdc-icon--clickable]': 'clickable',\r\n    '[class.ngx-mdc-icon--inline]': 'inline'\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcIcon implements AfterViewChecked, OnDestroy, OnChanges, OnInit {\r\n  private _previousFontSetClass?: string[] = [];\r\n  private _previousFontIconClass?: string;\r\n\r\n  /** Keeps track of the current page path. */\r\n  private _previousPath?: string;\r\n\r\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\r\n  private _elementsWithExternalReferences?: Map<Element, { name: string, value: string }[]>;\r\n\r\n  /**\r\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n   * the element the icon is contained in.\r\n   */\r\n  @Input()\r\n  get inline(): boolean { return this._inline; }\r\n  set inline(inline: boolean) {\r\n    this._inline = toBoolean(inline);\r\n  }\r\n  private _inline: boolean = false;\r\n\r\n  /** Name of the icon in the SVG icon set. */\r\n  @Input() svgIcon?: string;\r\n\r\n  @Input() role: string | null = 'img';\r\n  @Input() tabIndex: number | null = null;\r\n\r\n  /** Font set that the icon is a part of. */\r\n  @Input()\r\n  get fontSet(): string { return this._fontSet; }\r\n  set fontSet(value: string) {\r\n    this._fontSet = this._cleanupFontValue(value);\r\n  }\r\n  private _fontSet: string = '';\r\n\r\n  /** Name of an icon within a font set. */\r\n  @Input()\r\n  get fontIcon(): string { return this._fontIcon; }\r\n  set fontIcon(value: string) {\r\n    this._fontIcon = this._cleanupFontValue(value);\r\n  }\r\n  private _fontIcon: string = '';\r\n\r\n  @Input()\r\n  get clickable(): boolean { return this._clickable; }\r\n  set clickable(value: boolean) {\r\n    this._clickable = toBoolean(value);\r\n\r\n    if (this._clickable) {\r\n      this.tabIndex = 0;\r\n      this.role = 'button';\r\n    } else {\r\n      this.tabIndex = null;\r\n      this.role = null;\r\n    }\r\n  }\r\n  private _clickable: boolean = false;\r\n\r\n  constructor(\r\n    public elementRef: ElementRef<HTMLElement>,\r\n    private _iconRegistry: MdcIconRegistry,\r\n    @Attribute('aria-hidden') ariaHidden: string,\r\n    @Inject(MDC_ICON_LOCATION) private _location?: MdcIconLocation) {\r\n\r\n    if (!ariaHidden) {\r\n      this._getHostElement().setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    const cachedElements = this._elementsWithExternalReferences;\r\n    if (cachedElements && this._location && cachedElements.size) {\r\n      const newPath = this._location.getPathname();\r\n      // We need to check whether the URL has changed on each change detection since\r\n      // the browser doesn't have an API that will let us react on link clicks and\r\n      // we can't depend on the Angular router. The references need to be updated,\r\n      // because while most browsers don't care whether the URL is correct after\r\n      // the first render, Safari will break if the user navigates to a different\r\n      // page and the SVG isn't re-rendered.\r\n      if (newPath !== this._previousPath) {\r\n        this._previousPath = newPath;\r\n        this._prependPathToReferences(newPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws an error if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   `'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws Error)`\r\n   */\r\n  private _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return <[string, string]>parts;\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    if (changes.svgIcon) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\r\n          svg => this._setSvgElement(svg),\r\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\r\n        );\r\n      } else {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <mdc-icon>arrow</mdc-icon> In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  private _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\r\n\r\n  private _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n\r\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\r\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\r\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\r\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\r\n\r\n    for (let i = 0; i < styleTags.length; i++) {\r\n      styleTags[i].textContent += ' ';\r\n    }\r\n\r\n    // Note: we do this fix here, rather than the icon registry, because the\r\n    // references have to point to the URL at the time that the icon was created.\r\n    if (this._location) {\r\n      const path = this._location.getPathname();\r\n      this._previousPath = path;\r\n      this._cacheChildrenWithExternalReferences(svg);\r\n      this._prependPathToReferences(path);\r\n    }\r\n\r\n    this._getHostElement().appendChild(svg);\r\n  }\r\n\r\n  private _clearSvgElement() {\r\n    const layoutElement: HTMLElement = this._getHostElement();\r\n    let childCount = layoutElement.childNodes.length;\r\n\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n\r\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\r\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\r\n    while (childCount--) {\r\n      const child = layoutElement.childNodes[childCount];\r\n\r\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\r\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\r\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\r\n        layoutElement.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const elem: HTMLElement = this._getHostElement();\r\n    const fontSetClasses = this.fontSet ?\r\n      [this._iconRegistry.classNameForFontAlias(this.fontSet)] :\r\n      this._iconRegistry.getDefaultFontSetClass();\r\n\r\n    this._previousFontSetClass!.forEach(className => elem.classList.remove(className));\r\n    fontSetClasses.forEach(className => elem.classList.add(className));\r\n    this._previousFontSetClass = fontSetClasses;\r\n\r\n    if (this.fontIcon !== this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        elem.classList.remove(this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        elem.classList.add(this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up a value to be used as a fontIcon or fontSet.\r\n   * Since the value ends up being assigned as a CSS class, we\r\n   * have to trim the value and omit space-separated values.\r\n   */\r\n  private _cleanupFontValue(value: string) {\r\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n  }\r\n\r\n  /**\r\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n   * reference. This is required because WebKit browsers require references to be prefixed with\r\n   * the current path, if the page has a `base` tag.\r\n   */\r\n  private _prependPathToReferences(path: string) {\r\n    const elements = this._elementsWithExternalReferences;\r\n    if (elements) {\r\n      elements.forEach((attrs, element) => {\r\n        attrs.forEach(attr => {\r\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Caches the children of an SVG element that have `url()`\r\n   * references that we need to prefix with the current path.\r\n   */\r\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\r\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\r\n    const elements = this._elementsWithExternalReferences =\r\n      this._elementsWithExternalReferences || new Map();\r\n\r\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\r\n      funcIriAttributes.forEach(attr => {\r\n        const elementWithReference = elementsWithFuncIri[i];\r\n        const value = elementWithReference.getAttribute(attr);\r\n        const match = value ? value.match(funcIriPattern) : null;\r\n\r\n        if (match) {\r\n          let attributes = elements.get(elementWithReference);\r\n          if (!attributes) {\r\n            attributes = [];\r\n            elements.set(elementWithReference, attributes);\r\n          }\r\n          attributes!.push({ name: attr, value: match[1] });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  protected _getHostElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SecurityContext,\r\n  SkipSelf\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\r\nimport { forkJoin, Observable, of as observableOf, throwError as observableThrow } from 'rxjs';\r\nimport { catchError, finalize, map, share, tap } from 'rxjs/operators';\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n */\r\nexport function getMdcIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mdc-icon>` without including @angular/http.\r\n * @docs-private\r\n */\r\nexport function getMdcIconNoHttpProviderError(): Error {\r\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n    'Please include the HttpClientModule from @angular/common/http in your ' +\r\n    'app imports.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMdcIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n    `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMdcIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\r\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\r\n    `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\r\n}\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  url: SafeResourceUrl | null = null;\r\n  svgElement: SVGElement | null = null;\r\n\r\n  constructor(url: SafeResourceUrl);\r\n  constructor(svgElement: SVGElement);\r\n  constructor(data: SafeResourceUrl | SVGElement) {\r\n    // Note that we can't use `instanceof SVGElement` here,\r\n    // because it'll break during server-side rendering.\r\n    if (!!(data as any).nodeName) {\r\n      this.svgElement = data as SVGElement;\r\n    } else {\r\n      this.url = data as SafeResourceUrl;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Service to register and display icons used by the `<mdc-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class MdcIconRegistry implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS classes to apply when an `<mdc-icon>` component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = ['material-icons'];\r\n\r\n  constructor(\r\n    @Optional() private _httpClient: HttpClient,\r\n    private _sanitizer: DomSanitizer,\r\n    @Optional() @Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\r\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMdcIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the default namespace.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteral(literal: SafeHtml): this {\r\n    return this.addSvgIconSetLiteralInNamespace('', literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMdcIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdcIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mdc-icon>` element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className: string = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an `<mdc-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(...classNames: string[]): this {\r\n    this._defaultFontSetClass = classNames;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an `<mdc-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string[] {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdcIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    const cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\r\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\r\n      map(svg => cloneSvg(svg)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    const config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMdcIconNameNotFoundError(key));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._svgIconConfigs.clear();\r\n    this._iconSetConfigs.clear();\r\n    this._cachedIconsByUrl.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config).pipe(\r\n        tap(svg => config.svgElement = svg),\r\n        map(svg => cloneSvg(svg)),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n    Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\r\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\r\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the\r\n            // combined Observable won't necessarily fail.\r\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\r\n            return observableOf(null);\r\n          })\r\n        );\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMdcIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n    SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n      .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    // If the SVG for this icon set has already been parsed, do nothing.\r\n    if (config.svgElement) {\r\n      return observableOf(config.svgElement);\r\n    }\r\n\r\n    return this._fetchUrl(config.url).pipe(map(svgText => {\r\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n      // only needs to occur if the cache is yet unset.\r\n      if (!config.svgElement) {\r\n        config.svgElement = this._svgElementFromString(svgText);\r\n      }\r\n\r\n      return config.svgElement;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const iconSource = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconSource) {\r\n      return null;\r\n    }\r\n\r\n    // Clone the element and remove the ID to prevent multiple elements from being added\r\n    // to the page with the same ID.\r\n    const iconElement = iconSource.cloneNode(true) as Element;\r\n    iconElement.removeAttribute('id');\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes(iconElement as SVGElement);\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconElement);\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    const div = this._document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    } else {\r\n      const viewBox = svg.getAttribute('viewBox');\r\n      if (viewBox) {\r\n        svg.setAttribute('viewBox', viewBox);\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\r\n  private _toSvgElement(element: Element): SVGElement {\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\r\n    if (!this._httpClient) {\r\n      throw getMdcIconNoHttpProviderError();\r\n    }\r\n\r\n    if (safeUrl == null) {\r\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\r\n    }\r\n\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdcIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = this._httpClient.get(url, { responseType: 'text' }).pipe(\r\n      finalize(() => this._inProgressUrlFetches.delete(url)),\r\n      share(),\r\n    );\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon config by name in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param iconName Name under which to register the config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\r\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set config in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\r\n    const configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n  parentRegistry: MdcIconRegistry,\r\n  httpClient: HttpClient,\r\n  sanitizer: DomSanitizer,\r\n  document?: any) {\r\n  return parentRegistry || new MdcIconRegistry(httpClient, sanitizer, document);\r\n}\r\n\r\n/** @docs-private */\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MdcIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MdcIconRegistry,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), MdcIconRegistry],\r\n    [new Optional(), HttpClient],\r\n    DomSanitizer,\r\n    [new Optional(), DOCUMENT as InjectionToken<any>],\r\n  ],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[materialIcons]',\r\n  host: {\r\n    'class': 'material-icons'\r\n  }\r\n})\r\nexport class MdcMaterialIcons { }\r\n"],"names":["NgModule","Input","Inject","Attribute","ChangeDetectionStrategy","ViewEncapsulation","Component","take","toBoolean","InjectionToken","inject","DOCUMENT","Optional","DomSanitizer","HttpClient","SkipSelf","Injectable","share","finalize","SecurityContext","map","observableOf","forkJoin","catchError","tap","observableThrow","Directive"],"mappings":"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"}
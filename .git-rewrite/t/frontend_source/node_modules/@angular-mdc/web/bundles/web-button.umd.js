/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular-mdc/web/common'), require('@angular-mdc/web/ripple'), require('@angular-mdc/web/icon')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/button', ['exports', '@angular/core', '@angular/common', '@angular-mdc/web/common', '@angular-mdc/web/ripple', '@angular-mdc/web/icon'], factory) :
    (global = global || self, factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.button = {}), global.ng.core, global.ng.common, global.ng.web.common, global.ng.web.ripple, global.ng.web.icon));
}(this, function (exports, core, common, common$1, ripple, icon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MdcButtonLabel = /** @class */ (function () {
        function MdcButtonLabel() {
        }
        MdcButtonLabel.decorators = [
            { type: core.Directive, args: [{
                        selector: 'mdc-button-label, [mdcButtonLabel]',
                        exportAs: 'mdcButtonLabel',
                        host: {
                            'class': 'mdc-button__label'
                        }
                    },] },
        ];
        return MdcButtonLabel;
    }());
    var MdcButton = /** @class */ (function () {
        function MdcButton(elementRef, _ripple) {
            this.elementRef = elementRef;
            this._ripple = _ripple;
            this._raised = false;
            this._primary = false;
            this._dense = false;
            this._secondary = false;
            this._unelevated = false;
            this._outlined = false;
            this._disabled = false;
        }
        Object.defineProperty(MdcButton.prototype, "raised", {
            get: /**
             * @return {?}
             */
            function () { return this._raised; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._raised = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "primary", {
            get: /**
             * @return {?}
             */
            function () { return this._primary; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._primary = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "dense", {
            get: /**
             * @return {?}
             */
            function () { return this._dense; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._dense = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "secondary", {
            get: /**
             * @return {?}
             */
            function () { return this._secondary; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._secondary = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "unelevated", {
            get: /**
             * @return {?}
             */
            function () { return this._unelevated; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._unelevated = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "outlined", {
            get: /**
             * @return {?}
             */
            function () { return this._outlined; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._outlined = common$1.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcButton.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () { return this._disabled; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setDisabled(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdcButton.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (this._icon) {
                this._icon.elementRef.nativeElement.classList.add('mdc-button__icon');
            }
            this._ripple.init({ surface: this.getHostElement() });
        };
        /**
         * @return {?}
         */
        MdcButton.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._ripple.destroy();
        };
        /**
         * @param {?} disabled
         * @return {?}
         */
        MdcButton.prototype.setDisabled = /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = common$1.toBoolean(disabled);
            if (this._disabled) {
                this.getHostElement().setAttribute('disabled', 'true');
                this.getHostElement().setAttribute('aria-disabled', 'true');
            }
            else {
                this.getHostElement().removeAttribute('disabled');
                this.getHostElement().removeAttribute('aria-disabled');
            }
        };
        /** Focuses the button. */
        /**
         * Focuses the button.
         * @return {?}
         */
        MdcButton.prototype.focus = /**
         * Focuses the button.
         * @return {?}
         */
        function () {
            this.getHostElement().focus();
        };
        /**
         * @return {?}
         */
        MdcButton.prototype.getHostElement = /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        MdcButton.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // A disabled button shouldn't apply any actions
            if (this.disabled) {
                event.preventDefault();
                event.stopImmediatePropagation();
            }
        };
        MdcButton.decorators = [
            { type: core.Component, args: [{exportAs: 'mdcButton',
                        selector: 'button[mdc-button], a[mdc-button]',
                        host: {
                            '[tabIndex]': 'disabled ? -1 : 0',
                            'class': 'mdc-button',
                            '[class.ngx-mdc-button--primary]': 'primary',
                            '[class.ngx-mdc-button--secondary]': 'secondary',
                            '[class.mdc-button--raised]': 'raised',
                            '[class.mdc-button--dense]': 'dense',
                            '[class.mdc-button--unelevated]': 'unelevated',
                            '[class.mdc-button--outlined]': 'outlined',
                            '(click)': 'onClick($event)'
                        },
                        template: "\n  <mdc-button-label *ngIf=\"label\">{{label}}</mdc-button-label>\n  <ng-content></ng-content>\n  ",
                        providers: [ripple.MdcRipple],
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcButton.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: ripple.MdcRipple }
        ]; };
        MdcButton.propDecorators = {
            raised: [{ type: core.Input }],
            primary: [{ type: core.Input }],
            dense: [{ type: core.Input }],
            secondary: [{ type: core.Input }],
            unelevated: [{ type: core.Input }],
            outlined: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            _icon: [{ type: core.ContentChild, args: [icon.MdcIcon,] }],
            label: [{ type: core.Input }]
        };
        return MdcButton;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MdcButtonModule = /** @class */ (function () {
        function MdcButtonModule() {
        }
        MdcButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        exports: [MdcButton, MdcButtonLabel],
                        declarations: [MdcButton, MdcButtonLabel]
                    },] },
        ];
        return MdcButtonModule;
    }());

    exports.MdcButtonModule = MdcButtonModule;
    exports.MdcButtonLabel = MdcButtonLabel;
    exports.MdcButton = MdcButton;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=web-button.umd.js.map

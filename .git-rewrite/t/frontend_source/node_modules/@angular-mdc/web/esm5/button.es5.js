/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Input, ContentChild, Directive, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { toBoolean } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcButtonLabel = /** @class */ (function () {
    function MdcButtonLabel() {
    }
    MdcButtonLabel.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-button-label, [mdcButtonLabel]',
                    exportAs: 'mdcButtonLabel',
                    host: {
                        'class': 'mdc-button__label'
                    }
                },] },
    ];
    return MdcButtonLabel;
}());
var MdcButton = /** @class */ (function () {
    function MdcButton(elementRef, _ripple) {
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this._raised = false;
        this._primary = false;
        this._dense = false;
        this._secondary = false;
        this._unelevated = false;
        this._outlined = false;
        this._disabled = false;
    }
    Object.defineProperty(MdcButton.prototype, "raised", {
        get: /**
         * @return {?}
         */
        function () { return this._raised; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._raised = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "primary", {
        get: /**
         * @return {?}
         */
        function () { return this._primary; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primary = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "dense", {
        get: /**
         * @return {?}
         */
        function () { return this._dense; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dense = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "secondary", {
        get: /**
         * @return {?}
         */
        function () { return this._secondary; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._secondary = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "unelevated", {
        get: /**
         * @return {?}
         */
        function () { return this._unelevated; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._unelevated = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "outlined", {
        get: /**
         * @return {?}
         */
        function () { return this._outlined; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._outlined = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcButton.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setDisabled(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcButton.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._icon) {
            this._icon.elementRef.nativeElement.classList.add('mdc-button__icon');
        }
        this._ripple.init({ surface: this.getHostElement() });
    };
    /**
     * @return {?}
     */
    MdcButton.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._ripple.destroy();
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    MdcButton.prototype.setDisabled = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this._disabled = toBoolean(disabled);
        if (this._disabled) {
            this.getHostElement().setAttribute('disabled', 'true');
            this.getHostElement().setAttribute('aria-disabled', 'true');
        }
        else {
            this.getHostElement().removeAttribute('disabled');
            this.getHostElement().removeAttribute('aria-disabled');
        }
    };
    /** Focuses the button. */
    /**
     * Focuses the button.
     * @return {?}
     */
    MdcButton.prototype.focus = /**
     * Focuses the button.
     * @return {?}
     */
    function () {
        this.getHostElement().focus();
    };
    /**
     * @return {?}
     */
    MdcButton.prototype.getHostElement = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MdcButton.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // A disabled button shouldn't apply any actions
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    };
    MdcButton.decorators = [
        { type: Component, args: [{exportAs: 'mdcButton',
                    selector: 'button[mdc-button], a[mdc-button]',
                    host: {
                        '[tabIndex]': 'disabled ? -1 : 0',
                        'class': 'mdc-button',
                        '[class.ngx-mdc-button--primary]': 'primary',
                        '[class.ngx-mdc-button--secondary]': 'secondary',
                        '[class.mdc-button--raised]': 'raised',
                        '[class.mdc-button--dense]': 'dense',
                        '[class.mdc-button--unelevated]': 'unelevated',
                        '[class.mdc-button--outlined]': 'outlined',
                        '(click)': 'onClick($event)'
                    },
                    template: "\n  <mdc-button-label *ngIf=\"label\">{{label}}</mdc-button-label>\n  <ng-content></ng-content>\n  ",
                    providers: [MdcRipple],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcButton.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MdcRipple }
    ]; };
    MdcButton.propDecorators = {
        raised: [{ type: Input }],
        primary: [{ type: Input }],
        dense: [{ type: Input }],
        secondary: [{ type: Input }],
        unelevated: [{ type: Input }],
        outlined: [{ type: Input }],
        disabled: [{ type: Input }],
        _icon: [{ type: ContentChild, args: [MdcIcon,] }],
        label: [{ type: Input }]
    };
    return MdcButton;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcButtonModule = /** @class */ (function () {
    function MdcButtonModule() {
    }
    MdcButtonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [MdcButton, MdcButtonLabel],
                    declarations: [MdcButton, MdcButtonLabel]
                },] },
    ];
    return MdcButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MdcButtonModule, MdcButtonLabel, MdcButton };
//# sourceMappingURL=button.es5.js.map

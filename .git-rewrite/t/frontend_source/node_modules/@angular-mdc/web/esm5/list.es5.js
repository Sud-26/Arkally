/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Input, ChangeDetectorRef, Optional, Inject, Output, Directive, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { merge } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { toBoolean, ENTER, SPACE, Platform } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Change event that is fired whenever the selected state of an option changes.
 */
var  /**
 * Change event that is fired whenever the selected state of an option changes.
 */
MdcListSelectionChange = /** @class */ (function () {
    function MdcListSelectionChange(source) {
        this.source = source;
    }
    return MdcListSelectionChange;
}());
/**
 * Injection token used to provide the parent MdcList component to MdcListItem.
 * @type {?}
 */
var MDC_LIST_PARENT_COMPONENT = new InjectionToken('MDC_LIST_PARENT_COMPONENT');
/** @type {?} */
var uniqueIdCounter = 0;
var MdcListItemGraphic = /** @class */ (function () {
    function MdcListItemGraphic(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListItemGraphic.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemGraphic], mdc-list-item-graphic',
                    exportAs: 'mdcListItemGraphic',
                    host: {
                        'role': 'presentation',
                        'class': 'mdc-list-item__graphic',
                        '[attr.aria-hidden]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    MdcListItemGraphic.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MdcListItemGraphic;
}());
var MdcListItemMeta = /** @class */ (function () {
    function MdcListItemMeta(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListItemMeta.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemMeta], mdc-list-item-meta',
                    exportAs: 'mdcListItemMeta',
                    host: { 'class': 'mdc-list-item__meta' }
                },] },
    ];
    /** @nocollapse */
    MdcListItemMeta.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MdcListItemMeta;
}());
var MdcListItemText = /** @class */ (function () {
    function MdcListItemText(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListItemText.decorators = [
        { type: Component, args: [{selector: '[mdcListItemText], mdc-list-item-text',
                    exportAs: 'mdcListItemText',
                    host: { 'class': 'mdc-list-item__text' },
                    template: "\n  <ng-container>\n    <span class=\"mdc-list-item__primary-text\"><ng-content></ng-content></span>\n    <span class=\"mdc-list-item__secondary-text\" *ngIf=\"secondaryText\">{{secondaryText}}</span>\n  </ng-container>",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcListItemText.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListItemText.propDecorators = {
        secondaryText: [{ type: Input }]
    };
    return MdcListItemText;
}());
var MdcListItemSecondary = /** @class */ (function () {
    function MdcListItemSecondary(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListItemSecondary.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemSecondary], mdc-list-item-secondary',
                    exportAs: 'mdcListItemSecondary',
                    host: { 'class': 'mdc-list-item__secondary-text' }
                },] },
    ];
    /** @nocollapse */
    MdcListItemSecondary.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MdcListItemSecondary;
}());
var MdcListItem = /** @class */ (function () {
    function MdcListItem(ripple, _changeDetectorRef, elementRef, _parent) {
        this.ripple = ripple;
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._parent = _parent;
        this._id = "mdc-list-item-" + uniqueIdCounter++;
        this.tabIndex = -1;
        this._selected = false;
        this._activated = false;
        this._disabled = false;
        this.selectionChange = new EventEmitter();
    }
    Object.defineProperty(MdcListItem.prototype, "id", {
        /** The unique ID of the list item. */
        get: /**
         * The unique ID of the list item.
         * @return {?}
         */
        function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListItem.prototype, "selected", {
        /** Whether the list item is selected. */
        get: /**
         * Whether the list item is selected.
         * @return {?}
         */
        function () { return this._selected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = toBoolean(value);
            if (newValue !== this._selected) {
                this._selected = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListItem.prototype, "activated", {
        /** Whether the list item is activated. */
        get: /**
         * Whether the list item is activated.
         * @return {?}
         */
        function () { return this._activated; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = toBoolean(value);
            if (newValue !== this._activated) {
                this._activated = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListItem.prototype, "disabled", {
        /** Whether the list item is disabled. */
        get: /**
         * Whether the list item is disabled.
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = toBoolean(value);
            if (newValue !== this._disabled) {
                this._disabled = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcListItem.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._initRipple();
    };
    /**
     * @return {?}
     */
    MdcListItem.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ripple.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    MdcListItem.prototype._initRipple = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ripple.init({
            surface: this.elementRef.nativeElement
        }, Object.assign(this.ripple.createAdapter(), {
            isSurfaceDisabled: (/**
             * @return {?}
             */
            function () { return _this._disabled || _this._parent.disableRipple; })
        }));
    };
    /**
     * @return {?}
     */
    MdcListItem.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.getListItemElement().focus();
    };
    /**
     * @param {?} role
     * @return {?}
     */
    MdcListItem.prototype.setRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        this.getListItemElement().setAttribute('role', role);
    };
    /**
     * @return {?}
     */
    MdcListItem.prototype.getListItemElement = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcListItem.prototype._onKeydown = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.keyCode === ENTER || evt.keyCode === SPACE) {
            this._emitChangeEvent();
        }
    };
    /** Emits a change event if the selected state of an option changed. */
    /**
     * Emits a change event if the selected state of an option changed.
     * @return {?}
     */
    MdcListItem.prototype._emitChangeEvent = /**
     * Emits a change event if the selected state of an option changed.
     * @return {?}
     */
    function () {
        if (this._disabled) {
            return;
        }
        this.selectionChange.emit(new MdcListSelectionChange(this));
    };
    MdcListItem.decorators = [
        { type: Component, args: [{selector: 'mdc-list-item, a[mdc-list-item]',
                    exportAs: 'mdcListItem',
                    host: {
                        'role': 'listitem',
                        '[id]': 'id',
                        '[tabIndex]': 'tabIndex',
                        'class': 'mdc-list-item',
                        '[class.mdc-list-item--selected]': 'selected',
                        '[class.mdc-list-item--activated]': 'activated',
                        '[class.mdc-list-item--disabled]': 'disabled',
                        '(click)': '_emitChangeEvent()',
                        '(keydown)': '_onKeydown($event)'
                    },
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MdcRipple]
                },] },
    ];
    /** @nocollapse */
    MdcListItem.ctorParameters = function () { return [
        { type: MdcRipple },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MDC_LIST_PARENT_COMPONENT,] }] }
    ]; };
    MdcListItem.propDecorators = {
        value: [{ type: Input }],
        tabIndex: [{ type: Input }],
        selected: [{ type: Input }],
        activated: [{ type: Input }],
        disabled: [{ type: Input }],
        selectionChange: [{ type: Output }]
    };
    return MdcListItem;
}());

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @enum {string} */
var cssClasses = {
  ROOT: 'mdc-list',
  LIST_ITEM_CLASS: 'mdc-list-item',
  LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
  LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated'
};
/** @enum {string} */

var strings = {
  ARIA_ORIENTATION: 'aria-orientation',
  ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
  ARIA_SELECTED: 'aria-selected',
  ARIA_CHECKED: 'aria-checked',
  ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
  ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
  ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
  RADIO_SELECTOR: 'input[type="radio"]:not(:disabled)',
  CHECKBOX_SELECTOR: 'input[type="checkbox"]:not(:disabled)',
  CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"]:not(:disabled), input[type="radio"]:not(:disabled)',
  CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: ".".concat(cssClasses.LIST_ITEM_CLASS, " button:not(:disabled),\n  .").concat(cssClasses.LIST_ITEM_CLASS, " a"),
  FOCUSABLE_CHILD_ELEMENTS: ".".concat(cssClasses.LIST_ITEM_CLASS, " button:not(:disabled), .").concat(cssClasses.LIST_ITEM_CLASS, " a,\n  .").concat(cssClasses.LIST_ITEM_CLASS, " input[type=\"radio\"]:not(:disabled),\n  .").concat(cssClasses.LIST_ITEM_CLASS, " input[type=\"checkbox\"]:not(:disabled)"),
  ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)',
  ACTION_EVENT: 'MDCList:action'
};

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @param {!Element} element
 * @param {string} selector
 * @return {boolean}
 */


function matches(element, selector) {
  var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
  return nativeMatches.call(element, selector);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @template A
 */
var MDCFoundation =
/*#__PURE__*/
function () {
  _createClass(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }
    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }
    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }
    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }
    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  _createClass(MDCFoundation, [{
    key: "init",
    value: function init() {// Subclasses should override this method to perform initialization routines (registering events, etc.)
    }
  }, {
    key: "destroy",
    value: function destroy() {// Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    }
  }]);

  return MDCFoundation;
}();

/**
 * @template F
 */

var MDCComponent =
/*#__PURE__*/
function () {
  _createClass(MDCComponent, null, [{
    key: "attachTo",

    /**
     * @param {!Element} root
     * @return {!MDCComponent}
     */
    value: function attachTo(root) {
      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
      // returns an instantiated component with its root set to that element. Also note that in the cases of
      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
      // from getDefaultFoundation().
      return new MDCComponent(root, new MDCFoundation());
    }
    /**
     * @param {!Element} root
     * @param {F=} foundation
     * @param {...?} args
     */

  }]);

  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.

    /** @protected {!F} */

    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  _createClass(MDCComponent, [{
    key: "initialize",
    value: function initialize()
    /* ...args */
    {} // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.

    /**
     * @return {!F} foundation
     */

  }, {
    key: "getDefaultFoundation",
    value: function getDefaultFoundation() {
      // Subclasses must override this method to return a properly configured foundation class for the
      // component.
      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    }
  }, {
    key: "initialSyncWithDOM",
    value: function initialSyncWithDOM() {// Subclasses should override this method if they need to perform work to synchronize with a host DOM
      // object. An example of this would be a form control wrapper that needs to synchronize its internal state
      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // Subclasses may implement this method to release any resources / deregister any listeners they have
      // attached. An example of this might be deregistering a resize event from the window object.
      this.foundation_.destroy();
    }
    /**
     * Wrapper method to add an event listener to the component's root element. This is most useful when
     * listening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "listen",
    value: function listen(evtType, handler) {
      this.root_.addEventListener(evtType, handler);
    }
    /**
     * Wrapper method to remove an event listener to the component's root element. This is most useful when
     * unlistening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "unlisten",
    value: function unlisten(evtType, handler) {
      this.root_.removeEventListener(evtType, handler);
    }
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     * with the given data.
     * @param {string} evtType
     * @param {!Object} evtData
     * @param {boolean=} shouldBubble
     */

  }, {
    key: "emit",
    value: function emit(evtType, evtData) {
      var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var evt;

      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          detail: evtData,
          bubbles: shouldBubble
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      this.root_.dispatchEvent(evt);
    }
  }]);

  return MDCComponent;
}();

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC List. Provides an interface for managing focus.
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
var MDCListAdapter =
/*#__PURE__*/
function () {
  function MDCListAdapter() {
    _classCallCheck(this, MDCListAdapter);
  }

  _createClass(MDCListAdapter, [{
    key: "getListItemCount",

    /** @return {number} */
    value: function getListItemCount() {}
    /**
     * @return {number} */

  }, {
    key: "getFocusedElementIndex",
    value: function getFocusedElementIndex() {}
    /**
     * @param {number} index
     * @param {string} attribute
     * @param {string} value
     */

  }, {
    key: "setAttributeForElementIndex",
    value: function setAttributeForElementIndex(index, attribute, value) {}
    /**
     * @param {number} index
     * @param {string} attribute
     */

  }, {
    key: "removeAttributeForElementIndex",
    value: function removeAttributeForElementIndex(index, attribute) {}
    /**
     * @param {number} index
     * @param {string} className
     */

  }, {
    key: "addClassForElementIndex",
    value: function addClassForElementIndex(index, className) {}
    /**
     * @param {number} index
     * @param {string} className
     */

  }, {
    key: "removeClassForElementIndex",
    value: function removeClassForElementIndex(index, className) {}
    /**
     * Focuses list item at the index specified.
     * @param {number} index
     */

  }, {
    key: "focusItemAtIndex",
    value: function focusItemAtIndex(index) {}
    /**
     * Sets the tabindex to the value specified for all button/a element children of
     * the list item at the index specified.
     * @param {number} listItemIndex
     * @param {number} tabIndexValue
     */

  }, {
    key: "setTabIndexForListItemChildren",
    value: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {}
    /**
     * @param {number} index
     * @return {boolean} Returns true if radio button is present at given list item index.
     */

  }, {
    key: "hasRadioAtIndex",
    value: function hasRadioAtIndex(index) {}
    /**
     * @param {number} index
     * @return {boolean} Returns true if checkbox is present at given list item index.
     */

  }, {
    key: "hasCheckboxAtIndex",
    value: function hasCheckboxAtIndex(index) {}
    /**
     * @param {number} index
     * @return {boolean} Returns true if checkbox inside a list item is checked.
     */

  }, {
    key: "isCheckboxCheckedAtIndex",
    value: function isCheckboxCheckedAtIndex(index) {}
    /**
     * Sets the checked status of checkbox or radio at given list item index.
     * @param {number} index
     * @param {boolean} isChecked
     */

  }, {
    key: "setCheckedCheckboxOrRadioAtIndex",
    value: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {}
    /**
     * Notifies user action on list item.
     */

  }, {
    key: "notifyAction",
    value: function notifyAction(index) {}
    /**
     * @return {boolean} Returns true when the current focused element is inside list root.
     */

  }, {
    key: "isFocusInsideList",
    value: function isFocusInsideList() {}
  }]);

  return MDCListAdapter;
}();

var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];

var MDCListFoundation =
/*#__PURE__*/
function (_MDCFoundation) {
  _inherits(MDCListFoundation, _MDCFoundation);

  _createClass(MDCListFoundation, null, [{
    key: "strings",

    /** @return enum {string} */
    get: function get() {
      return strings;
    }
    /** @return enum {string} */

  }, {
    key: "cssClasses",
    get: function get() {
      return cssClasses;
    }
    /**
     * {@see MDCListAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCListAdapter}
     */

  }, {
    key: "defaultAdapter",
    get: function get() {
      return (
        /** @type {!MDCListAdapter} */
        {
          getListItemCount: function getListItemCount() {},
          getFocusedElementIndex: function getFocusedElementIndex() {},
          setAttributeForElementIndex: function setAttributeForElementIndex() {},
          removeAttributeForElementIndex: function removeAttributeForElementIndex() {},
          addClassForElementIndex: function addClassForElementIndex() {},
          removeClassForElementIndex: function removeClassForElementIndex() {},
          focusItemAtIndex: function focusItemAtIndex() {},
          setTabIndexForListItemChildren: function setTabIndexForListItemChildren() {},
          hasRadioAtIndex: function hasRadioAtIndex() {},
          hasCheckboxAtIndex: function hasCheckboxAtIndex() {},
          isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex() {},
          setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex() {},
          notifyAction: function notifyAction() {},
          isFocusInsideList: function isFocusInsideList() {}
        }
      );
    }
    /**
     * @param {!MDCListAdapter=} adapter
     */

  }]);

  function MDCListFoundation(adapter) {
    var _this;

    _classCallCheck(this, MDCListFoundation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDCListFoundation).call(this, Object.assign(MDCListFoundation.defaultAdapter, adapter)));
    /** @private {boolean} */

    _this.wrapFocus_ = false;
    /** @private {boolean} */

    _this.isVertical_ = true;
    /** @private {boolean} */

    _this.isSingleSelectionList_ = false;
    /** @private {!Index} */

    _this.selectedIndex_ = -1;
    /** @private {number} */

    _this.focusedItemIndex_ = -1;
    /** @private {boolean} */

    _this.useActivatedClass_ = false;
    /** @private {boolean} */

    _this.isCheckboxList_ = false;
    /** @private {boolean} */

    _this.isRadioList_ = false;
    return _this;
  }

  _createClass(MDCListFoundation, [{
    key: "layout",
    value: function layout() {
      if (this.adapter_.getListItemCount() === 0) return;

      if (this.adapter_.hasCheckboxAtIndex(0)) {
        this.isCheckboxList_ = true;
      } else if (this.adapter_.hasRadioAtIndex(0)) {
        this.isRadioList_ = true;
      }
    }
    /**
     * Sets the private wrapFocus_ variable.
     * @param {boolean} value
     */

  }, {
    key: "setWrapFocus",
    value: function setWrapFocus(value) {
      this.wrapFocus_ = value;
    }
    /**
     * Sets the isVertical_ private variable.
     * @param {boolean} value
     */

  }, {
    key: "setVerticalOrientation",
    value: function setVerticalOrientation(value) {
      this.isVertical_ = value;
    }
    /**
     * Sets the isSingleSelectionList_ private variable.
     * @param {boolean} value
     */

  }, {
    key: "setSingleSelection",
    value: function setSingleSelection(value) {
      this.isSingleSelectionList_ = value;
    }
    /**
     * Sets the useActivatedClass_ private variable.
     * @param {boolean} useActivated
     */

  }, {
    key: "setUseActivatedClass",
    value: function setUseActivatedClass(useActivated) {
      this.useActivatedClass_ = useActivated;
    }
    /** @return {!Index} */

  }, {
    key: "getSelectedIndex",
    value: function getSelectedIndex() {
      return this.selectedIndex_;
    }
    /** @param {!Index} index */

  }, {
    key: "setSelectedIndex",
    value: function setSelectedIndex(index) {
      if (!this.isIndexValid_(index)) return;

      if (this.isCheckboxList_) {
        this.setCheckboxAtIndex_(
        /** @type {!Array<number>} */
        index);
      } else if (this.isRadioList_) {
        this.setRadioAtIndex_(
        /** @type {number} */
        index);
      } else {
        this.setSingleSelectionAtIndex_(
        /** @type {number} */
        index);
      }
    }
    /**
     * Focus in handler for the list items.
     * @param evt
     * @param {number} listItemIndex
     */

  }, {
    key: "handleFocusIn",
    value: function handleFocusIn(evt, listItemIndex) {
      if (listItemIndex >= 0) {
        this.adapter_.setTabIndexForListItemChildren(listItemIndex, 0);
      }
    }
    /**
     * Focus out handler for the list items.
     * @param {Event} evt
     * @param {number} listItemIndex
     */

  }, {
    key: "handleFocusOut",
    value: function handleFocusOut(evt, listItemIndex) {
      var _this2 = this;

      if (listItemIndex >= 0) {
        this.adapter_.setTabIndexForListItemChildren(listItemIndex, -1);
      }
      /**
       * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus
       * is moved to next element.
       */


      setTimeout(function () {
        if (!_this2.adapter_.isFocusInsideList()) {
          _this2.setTabindexToFirstSelectedItem_();
        }
      }, 0);
    }
    /**
     * Key handler for the list.
     * @param {Event} evt
     * @param {boolean} isRootListItem
     * @param {number} listItemIndex
     */

  }, {
    key: "handleKeydown",
    value: function handleKeydown(evt, isRootListItem, listItemIndex) {
      var arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;
      var arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;
      var arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;
      var arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;
      var isHome = evt.key === 'Home' || evt.keyCode === 36;
      var isEnd = evt.key === 'End' || evt.keyCode === 35;
      var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
      var isSpace = evt.key === 'Space' || evt.keyCode === 32;
      var currentIndex = this.adapter_.getFocusedElementIndex();
      var nextIndex = -1;

      if (currentIndex === -1) {
        currentIndex = listItemIndex;

        if (currentIndex < 0) {
          // If this event doesn't have a mdc-list-item ancestor from the
          // current list (not from a sublist), return early.
          return;
        }
      }

      if (this.isVertical_ && arrowDown || !this.isVertical_ && arrowRight) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusNextElement(currentIndex);
      } else if (this.isVertical_ && arrowUp || !this.isVertical_ && arrowLeft) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusPrevElement(currentIndex);
      } else if (isHome) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusFirstElement();
      } else if (isEnd) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusLastElement();
      } else if (isEnter || isSpace) {
        if (isRootListItem) {
          // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.
          if (evt.target.tagName === 'A' && isEnter) return;
          this.preventDefaultEvent_(evt);

          if (this.isSelectableList_()) {
            this.setSelectedIndexOnAction_(currentIndex);
          }

          this.adapter_.notifyAction(currentIndex);
        }
      }

      this.focusedItemIndex_ = currentIndex;

      if (nextIndex >= 0) {
        this.setTabindexAtIndex_(nextIndex);
        this.focusedItemIndex_ = nextIndex;
      }
    }
    /**
     * Click handler for the list.
     * @param {number} index
     * @param {boolean} toggleCheckbox
     */

  }, {
    key: "handleClick",
    value: function handleClick(index, toggleCheckbox) {
      if (index === -1) return;

      if (this.isSelectableList_()) {
        this.setSelectedIndexOnAction_(index, toggleCheckbox);
      }

      this.adapter_.notifyAction(index);
      this.setTabindexAtIndex_(index);
      this.focusedItemIndex_ = index;
    }
    /**
     * Ensures that preventDefault is only called if the containing element doesn't
     * consume the event, and it will cause an unintended scroll.
     * @param {Event} evt
     * @private
     */

  }, {
    key: "preventDefaultEvent_",
    value: function preventDefaultEvent_(evt) {
      var tagName = "".concat(evt.target.tagName).toLowerCase();

      if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
        evt.preventDefault();
      }
    }
    /**
     * Focuses the next element on the list.
     * @param {number} index
     * @return {number}
     */

  }, {
    key: "focusNextElement",
    value: function focusNextElement(index) {
      var count = this.adapter_.getListItemCount();
      var nextIndex = index + 1;

      if (nextIndex >= count) {
        if (this.wrapFocus_) {
          nextIndex = 0;
        } else {
          // Return early because last item is already focused.
          return index;
        }
      }

      this.adapter_.focusItemAtIndex(nextIndex);
      return nextIndex;
    }
    /**
     * Focuses the previous element on the list.
     * @param {number} index
     * @return {number}
     */

  }, {
    key: "focusPrevElement",
    value: function focusPrevElement(index) {
      var prevIndex = index - 1;

      if (prevIndex < 0) {
        if (this.wrapFocus_) {
          prevIndex = this.adapter_.getListItemCount() - 1;
        } else {
          // Return early because first item is already focused.
          return index;
        }
      }

      this.adapter_.focusItemAtIndex(prevIndex);
      return prevIndex;
    }
    /**
     * @return {number}
     */

  }, {
    key: "focusFirstElement",
    value: function focusFirstElement() {
      this.adapter_.focusItemAtIndex(0);
      return 0;
    }
    /**
     * @return {number}
     */

  }, {
    key: "focusLastElement",
    value: function focusLastElement() {
      var lastIndex = this.adapter_.getListItemCount() - 1;
      this.adapter_.focusItemAtIndex(lastIndex);
      return lastIndex;
    }
    /**
     * @param {number} index
     * @private
     */

  }, {
    key: "setSingleSelectionAtIndex_",
    value: function setSingleSelectionAtIndex_(index) {
      var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;

      if (this.useActivatedClass_) {
        selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;
      }

      if (this.selectedIndex_ >= 0 && this.selectedIndex_ !== index) {
        this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);
        this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_SELECTED, 'false');
      }

      this.adapter_.addClassForElementIndex(index, selectedClassName);
      this.adapter_.setAttributeForElementIndex(index, strings.ARIA_SELECTED, 'true');
      this.selectedIndex_ = index;
    }
    /**
     * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.
     * @param {number} index
     * @private
     */

  }, {
    key: "setRadioAtIndex_",
    value: function setRadioAtIndex_(index) {
      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);

      if (this.selectedIndex_ >= 0) {
        this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');
      }

      this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');
      this.selectedIndex_ = index;
    }
    /**
     * @param {!Array<number>} index
     * @private
     */

  }, {
    key: "setCheckboxAtIndex_",
    value: function setCheckboxAtIndex_(index) {
      for (var i = 0; i < this.adapter_.getListItemCount(); i++) {
        var isChecked = false;

        if (index.indexOf(i) >= 0) {
          isChecked = true;
        }

        this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
        this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');
      }

      this.selectedIndex_ = index;
    }
    /**
     * @param {number} index
     * @private
     */

  }, {
    key: "setTabindexAtIndex_",
    value: function setTabindexAtIndex_(index) {
      if (this.focusedItemIndex_ === -1 && index !== 0) {
        // If no list item was selected set first list item's tabindex to -1.
        // Generally, tabindex is set to 0 on first list item of list that has no preselected items.
        this.adapter_.setAttributeForElementIndex(0, 'tabindex', -1);
      } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {
        this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', -1);
      }

      this.adapter_.setAttributeForElementIndex(index, 'tabindex', 0);
    }
    /**
     * @return {boolean} Return true if it is single selectin list, checkbox list or radio list.
     * @private
     */

  }, {
    key: "isSelectableList_",
    value: function isSelectableList_() {
      return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;
    }
    /** @private */

  }, {
    key: "setTabindexToFirstSelectedItem_",
    value: function setTabindexToFirstSelectedItem_() {
      var targetIndex = 0;

      if (this.isSelectableList_()) {
        if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== -1) {
          targetIndex = this.selectedIndex_;
        } else if (this.selectedIndex_ instanceof Array && this.selectedIndex_.length > 0) {
          targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) {
            return Math.min(currentIndex, minIndex);
          });
        }
      }

      this.setTabindexAtIndex_(targetIndex);
    }
    /**
     * @param {!Index} index
     * @return {boolean}
     * @private
     */

  }, {
    key: "isIndexValid_",
    value: function isIndexValid_(index) {
      var _this3 = this;

      if (index instanceof Array) {
        if (!this.isCheckboxList_) {
          throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
        }

        if (index.length === 0) {
          return true;
        } else {
          return index.some(function (i) {
            return _this3.isIndexInRange_(i);
          });
        }
      } else if (typeof index === 'number') {
        if (this.isCheckboxList_) {
          throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);
        }

        return this.isIndexInRange_(index);
      } else {
        return false;
      }
    }
    /**
     * @param {number} index
     * @return {boolean}
     * @private
     */

  }, {
    key: "isIndexInRange_",
    value: function isIndexInRange_(index) {
      var listSize = this.adapter_.getListItemCount();
      return index >= 0 && index < listSize;
    }
    /**
     * @param {number} index
     * @param {boolean=} toggleCheckbox
     * @private
     */

  }, {
    key: "setSelectedIndexOnAction_",
    value: function setSelectedIndexOnAction_(index) {
      var toggleCheckbox = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (this.isCheckboxList_) {
        this.toggleCheckboxAtIndex_(index, toggleCheckbox);
      } else {
        this.setSelectedIndex(index);
      }
    }
    /**
     * @param {number} index
     * @param {boolean} toggleCheckbox
     * @private
     */

  }, {
    key: "toggleCheckboxAtIndex_",
    value: function toggleCheckboxAtIndex_(index, toggleCheckbox) {
      var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);

      if (toggleCheckbox) {
        isChecked = !isChecked;
        this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
      }

      this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false'); // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.

      if (this.selectedIndex_ === -1) {
        this.selectedIndex_ = [];
      }

      if (isChecked) {
        this.selectedIndex_.push(index);
      } else {
        this.selectedIndex_ = this.selectedIndex_.filter(function (i) {
          return i !== index;
        });
      }
    }
  }]);

  return MDCListFoundation;
}(MDCFoundation);

/**
 * @extends MDCComponent<!MDCListFoundation>
 */

var MDCList =
/*#__PURE__*/
function (_MDCComponent) {
  _inherits(MDCList, _MDCComponent);

  /** @param {...?} args */
  function MDCList() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MDCList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MDCList)).call.apply(_getPrototypeOf2, [this].concat(args)));
    /** @private {!Function} */

    _this.handleKeydown_;
    /** @private {!Function} */

    _this.handleClick_;
    /** @private {!Function} */

    _this.focusInEventListener_;
    /** @private {!Function} */

    _this.focusOutEventListener_;
    return _this;
  }
  /**
   * @param {!Element} root
   * @return {!MDCList}
   */


  _createClass(MDCList, [{
    key: "destroy",
    value: function destroy() {
      this.root_.removeEventListener('keydown', this.handleKeydown_);
      this.root_.removeEventListener('click', this.handleClick_);
      this.root_.removeEventListener('focusin', this.focusInEventListener_);
      this.root_.removeEventListener('focusout', this.focusOutEventListener_);
    }
  }, {
    key: "initialSyncWithDOM",
    value: function initialSyncWithDOM() {
      this.handleClick_ = this.handleClickEvent_.bind(this);
      this.handleKeydown_ = this.handleKeydownEvent_.bind(this);
      this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);
      this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);
      this.root_.addEventListener('keydown', this.handleKeydown_);
      this.root_.addEventListener('focusin', this.focusInEventListener_);
      this.root_.addEventListener('focusout', this.focusOutEventListener_);
      this.root_.addEventListener('click', this.handleClick_);
      this.layout();
      this.initializeListType();
    }
  }, {
    key: "layout",
    value: function layout() {
      var direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);
      this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL; // List items need to have at least tabindex=-1 to be focusable.

      [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (ele) {
        ele.setAttribute('tabindex', -1);
      }); // Child button/a elements are not tabbable until the list item is focused.

      [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (ele) {
        return ele.setAttribute('tabindex', -1);
      });
      this.foundation_.layout();
    }
    /**
     * Used to figure out which list item this event is targetting. Or returns -1 if
     * there is no list item
     * @param {Event} evt
     * @private
     */

  }, {
    key: "getListItemIndex_",
    value: function getListItemIndex_(evt) {
      var eventTarget =
      /** @type {HTMLElement} */
      evt.target;
      var index = -1; // Find the first ancestor that is a list item or the list.

      while (!eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS) && !eventTarget.classList.contains(cssClasses.ROOT)) {
        eventTarget = eventTarget.parentElement;
      } // Get the index of the element if it is a list item.


      if (eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS)) {
        index = this.listElements.indexOf(eventTarget);
      }

      return index;
    }
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     * @param {Event} evt
     * @private
     */

  }, {
    key: "handleFocusInEvent_",
    value: function handleFocusInEvent_(evt) {
      var index = this.getListItemIndex_(evt);
      this.foundation_.handleFocusIn(evt, index);
    }
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     * @param {Event} evt
     * @private
     */

  }, {
    key: "handleFocusOutEvent_",
    value: function handleFocusOutEvent_(evt) {
      var index = this.getListItemIndex_(evt);
      this.foundation_.handleFocusOut(evt, index);
    }
    /**
     * Used to figure out which element was focused when keydown event occurred before sending the event to the
     * foundation.
     * @param {Event} evt
     * @private
     */

  }, {
    key: "handleKeydownEvent_",
    value: function handleKeydownEvent_(evt) {
      var index = this.getListItemIndex_(evt);

      if (index >= 0) {
        this.foundation_.handleKeydown(evt, evt.target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);
      }
    }
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     * @param {Event} evt
     * @private
     */

  }, {
    key: "handleClickEvent_",
    value: function handleClickEvent_(evt) {
      var index = this.getListItemIndex_(evt); // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.

      var toggleCheckbox = !matches(
      /** @type {!Element} */
      evt.target, strings.CHECKBOX_RADIO_SELECTOR);
      this.foundation_.handleClick(index, toggleCheckbox);
    }
    /**
     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
     */

  }, {
    key: "initializeListType",
    value: function initializeListType() {
      var _this2 = this;

      var checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);
      var singleSelectedListItem = this.root_.querySelector(".".concat(cssClasses.LIST_ITEM_ACTIVATED_CLASS, ",\n        .").concat(cssClasses.LIST_ITEM_SELECTED_CLASS));
      var radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);

      if (checkboxListItems.length) {
        var preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
        this.selectedIndex = [].map.call(preselectedItems, function (listItem) {
          return _this2.listElements.indexOf(listItem);
        });
      } else if (singleSelectedListItem) {
        if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {
          this.foundation_.setUseActivatedClass(true);
        }

        this.singleSelection = true;
        this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);
      } else if (radioSelectedListItem) {
        this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
      }
    }
    /** @param {boolean} value */

  }, {
    key: "getDefaultFoundation",

    /** @return {!MDCListFoundation} */
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new MDCListFoundation(
      /** @type {!MDCListAdapter} */
      Object.assign({
        getListItemCount: function getListItemCount() {
          return _this3.listElements.length;
        },
        getFocusedElementIndex: function getFocusedElementIndex() {
          return _this3.listElements.indexOf(document.activeElement);
        },
        setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
          var element = _this3.listElements[index];

          if (element) {
            element.setAttribute(attr, value);
          }
        },
        removeAttributeForElementIndex: function removeAttributeForElementIndex(index, attr) {
          var element = _this3.listElements[index];

          if (element) {
            element.removeAttribute(attr);
          }
        },
        addClassForElementIndex: function addClassForElementIndex(index, className) {
          var element = _this3.listElements[index];

          if (element) {
            element.classList.add(className);
          }
        },
        removeClassForElementIndex: function removeClassForElementIndex(index, className) {
          var element = _this3.listElements[index];

          if (element) {
            element.classList.remove(className);
          }
        },
        focusItemAtIndex: function focusItemAtIndex(index) {
          var element = _this3.listElements[index];

          if (element) {
            element.focus();
          }
        },
        setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
          var element = _this3.listElements[listItemIndex];
          var listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
          listItemChildren.forEach(function (ele) {
            return ele.setAttribute('tabindex', tabIndexValue);
          });
        },
        hasCheckboxAtIndex: function hasCheckboxAtIndex(index) {
          var listItem = _this3.listElements[index];
          return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);
        },
        hasRadioAtIndex: function hasRadioAtIndex(index) {
          var listItem = _this3.listElements[index];
          return !!listItem.querySelector(strings.RADIO_SELECTOR);
        },
        isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex(index) {
          var listItem = _this3.listElements[index];
          var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);
          return toggleEl.checked;
        },
        setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {
          var listItem = _this3.listElements[index];
          var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);
          toggleEl.checked = isChecked;
          var event = document.createEvent('Event');
          event.initEvent('change', true, true);
          toggleEl.dispatchEvent(event);
        },
        notifyAction: function notifyAction(index) {
          _this3.emit(strings.ACTION_EVENT, index,
          /** shouldBubble */
          true);
        },
        isFocusInsideList: function isFocusInsideList() {
          return _this3.root_.contains(document.activeElement);
        }
      }));
    }
  }, {
    key: "vertical",
    set: function set(value) {
      this.foundation_.setVerticalOrientation(value);
    }
    /** @return Array<!Element>*/

  }, {
    key: "listElements",
    get: function get() {
      return [].slice.call(this.root_.querySelectorAll(strings.ENABLED_ITEMS_SELECTOR));
    }
    /** @param {boolean} value */

  }, {
    key: "wrapFocus",
    set: function set(value) {
      this.foundation_.setWrapFocus(value);
    }
    /** @param {boolean} isSingleSelectionList */

  }, {
    key: "singleSelection",
    set: function set(isSingleSelectionList) {
      this.foundation_.setSingleSelection(isSingleSelectionList);
    }
    /** @return {!Index} */

  }, {
    key: "selectedIndex",
    get: function get() {
      return this.foundation_.getSelectedIndex();
    }
    /** @param {!Index} index */
    ,
    set: function set(index) {
      this.foundation_.setSelectedIndex(index);
    }
  }], [{
    key: "attachTo",
    value: function attachTo(root) {
      return new MDCList(root);
    }
  }]);

  return MDCList;
}(MDCComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Change event that is being fired whenever the selected state of an option changes.
 */
var  /**
 * Change event that is being fired whenever the selected state of an option changes.
 */
MdcListItemChange = /** @class */ (function () {
    function MdcListItemChange(source, option) {
        this.source = source;
        this.option = option;
    }
    return MdcListItemChange;
}());
var MdcListGroup = /** @class */ (function () {
    function MdcListGroup(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListGroup.decorators = [
        { type: Component, args: [{selector: '[mdcListGroup], mdc-list-group',
                    exportAs: 'mdcListGroup',
                    host: { 'class': 'mdc-list-group' },
                    template: "\n  <h3 class=\"mdc-list-group__subheader\" *ngIf=\"subheader\">{{subheader}}</h3>\n  <ng-content></ng-content>",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcListGroup.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListGroup.propDecorators = {
        subheader: [{ type: Input }]
    };
    return MdcListGroup;
}());
var MdcListGroupSubheader = /** @class */ (function () {
    function MdcListGroupSubheader(elementRef) {
        this.elementRef = elementRef;
    }
    MdcListGroupSubheader.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListGroupSubheader], mdc-list-group-subheader',
                    exportAs: 'mdcListGroupSubheader',
                    host: { 'class': 'mdc-list-group__subheader' }
                },] },
    ];
    /** @nocollapse */
    MdcListGroupSubheader.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MdcListGroupSubheader;
}());
var MdcList = /** @class */ (function () {
    function MdcList(_platform, _changeDetectorRef, elementRef) {
        this._platform = _platform;
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._twoLine = false;
        this._dense = false;
        this._border = false;
        this._avatar = false;
        this._interactive = true;
        this._disableRipple = false;
        this._useActivatedClass = false;
        this._useSelectedClass = false;
        this._verticalOrientation = true;
        this._wrapFocus = false;
        /**
         * Emits a change event whenever the selected state of an option changes.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Emits an event for keyboard and mouse actions.
         */
        this.actionEvent = new EventEmitter();
        /**
         * Subscription to changes in list items.
         */
        this._changeSubscription = null;
        /**
         * Subscription to selection events in list items.
         */
        this.itemSelectionSubscription = null;
        this._foundation = new MDCListFoundation(this._createAdapter());
    }
    Object.defineProperty(MdcList.prototype, "twoLine", {
        get: /**
         * @return {?}
         */
        function () { return this._twoLine; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._twoLine = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "dense", {
        get: /**
         * @return {?}
         */
        function () { return this._dense; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dense = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "border", {
        get: /**
         * @return {?}
         */
        function () { return this._border; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._border = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "avatar", {
        get: /**
         * @return {?}
         */
        function () { return this._avatar; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._avatar = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "interactive", {
        get: /**
         * @return {?}
         */
        function () { return this._interactive; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = toBoolean(value);
            if (newValue !== this._interactive) {
                this._interactive = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "disableRipple", {
        get: /**
         * @return {?}
         */
        function () { return this._disableRipple; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = toBoolean(value);
            if (newValue !== this._disableRipple) {
                this._disableRipple = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "singleSelection", {
        get: /**
         * @return {?}
         */
        function () { return this._singleSelection; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined) {
                /** @type {?} */
                var newValue = toBoolean(value);
                if (newValue !== this._singleSelection) {
                    this._singleSelection = newValue;
                    this._foundation.setSingleSelection(this._singleSelection);
                    if (this.getSelectedIndex() > -1) {
                        this.setSelectedIndex(this.getSelectedIndex());
                    }
                    this._changeDetectorRef.markForCheck();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "useActivatedClass", {
        get: /**
         * @return {?}
         */
        function () { return this._useActivatedClass; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._useActivatedClass = toBoolean(value);
            this._foundation.setUseActivatedClass(this._useActivatedClass);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "useSelectedClass", {
        get: /**
         * @return {?}
         */
        function () { return this._useSelectedClass; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._useSelectedClass = toBoolean(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "verticalOrientation", {
        get: /**
         * @return {?}
         */
        function () { return this._verticalOrientation; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._verticalOrientation = toBoolean(value);
            this._foundation.setVerticalOrientation(this._verticalOrientation);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "wrapFocus", {
        get: /**
         * @return {?}
         */
        function () { return this._wrapFocus; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._wrapFocus = toBoolean(value);
            this._foundation.setWrapFocus(this._wrapFocus);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "listItemSelections", {
        /** Combined stream of all of the list item selection events. */
        get: /**
         * Combined stream of all of the list item selection events.
         * @return {?}
         */
        function () {
            return merge.apply(void 0, this.items.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.selectionChange; })));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    MdcList.prototype._createAdapter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            getListItemCount: (/**
             * @return {?}
             */
            function () { return _this.items.length; }),
            getFocusedElementIndex: (/**
             * @return {?}
             */
            function () {
                if (!_this._platform.isBrowser && (/** @type {?} */ (document.activeElement))) {
                    return -1;
                }
                return _this.items.toArray().findIndex((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return _.getListItemElement() === (/** @type {?} */ (document.activeElement)); })) || -1;
            }),
            setAttributeForElementIndex: (/**
             * @param {?} index
             * @param {?} attr
             * @param {?} value
             * @return {?}
             */
            function (index, attr, value) {
                /** @type {?} */
                var item = _this.getListItemByIndex(index);
                if (item) {
                    item.getListItemElement().setAttribute(attr, value);
                }
            }),
            removeAttributeForElementIndex: (/**
             * @param {?} index
             * @param {?} attr
             * @return {?}
             */
            function (index, attr) {
                return _this.items.toArray()[index].getListItemElement().removeAttribute(attr);
            }),
            addClassForElementIndex: (/**
             * @param {?} index
             * @param {?} className
             * @return {?}
             */
            function (index, className) {
                return _this.items.toArray()[index].getListItemElement().classList.add(className);
            }),
            removeClassForElementIndex: (/**
             * @param {?} index
             * @param {?} className
             * @return {?}
             */
            function (index, className) {
                /** @type {?} */
                var item = _this.getListItemByIndex(index);
                if (item) {
                    item.getListItemElement().classList.remove(className);
                }
            }),
            focusItemAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) { return _this.focusItemAtIndex(index); }),
            setTabIndexForListItemChildren: (/**
             * @param {?} listItemIndex
             * @param {?} tabIndexValue
             * @return {?}
             */
            function (listItemIndex, tabIndexValue) {
                /** @type {?} */
                var listItemChildren = [].slice.call(_this.items.toArray()[listItemIndex].getListItemElement()
                    .querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
                listItemChildren.forEach((/**
                 * @param {?} ele
                 * @return {?}
                 */
                function (ele) { return ele.setAttribute('tabindex', "" + tabIndexValue); }));
            }),
            hasCheckboxAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                /** @type {?} */
                var listItem = _this.items.toArray()[index].getListItemElement();
                return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);
            }),
            hasRadioAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                /** @type {?} */
                var listItem = _this.items.toArray()[index].getListItemElement();
                return !!listItem.querySelector(strings.RADIO_SELECTOR);
            }),
            isCheckboxCheckedAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                /** @type {?} */
                var listItem = _this.items.toArray()[index].getListItemElement();
                /** @type {?} */
                var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);
                return toggleEl.checked;
            }),
            setCheckedCheckboxOrRadioAtIndex: (/**
             * @param {?} index
             * @param {?} isChecked
             * @return {?}
             */
            function (index, isChecked) {
                /** @type {?} */
                var listItem = _this.items.toArray()[index].getListItemElement();
                /** @type {?} */
                var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);
                toggleEl.checked = isChecked;
                if (_this._platform.isBrowser) {
                    /** @type {?} */
                    var event_1 = document.createEvent('Event');
                    event_1.initEvent('change', true, true);
                    toggleEl.dispatchEvent(event_1);
                }
            }),
            isFocusInsideList: (/**
             * @return {?}
             */
            function () { return _this._platform.isBrowser ?
                _this.elementRef.nativeElement.contains(document.activeElement) : false; }),
            notifyAction: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                _this.actionEvent.emit({ index: index });
            })
        };
    };
    /**
     * @return {?}
     */
    MdcList.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._foundation.init();
        this._foundation.layout();
        // When list items change, re-subscribe
        this._changeSubscription = this.items.changes.pipe(startWith(null))
            .subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.items.length) {
                _this._resetListItems();
            }
        }));
    };
    /**
     * @return {?}
     */
    MdcList.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._dropSubscriptions();
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
        }
        this._foundation.destroy();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcList.prototype.setSelectedIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.reset();
        this._foundation.setSelectedIndex(index);
        if (index === -1) {
            return;
        }
        /** @type {?} */
        var selectedItem = this.items.toArray()[index];
        if (selectedItem) {
            this._applySelectionState(selectedItem);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcList.prototype.setSelectedValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.reset();
        if (value === null) {
            return;
        }
        /** @type {?} */
        var selectedItem = this.getListItemByValue(value);
        this._foundation.setSelectedIndex(this.getListItemIndexByValue(value));
        if (selectedItem) {
            this._applySelectionState(selectedItem);
        }
    };
    /**
     * @return {?}
     */
    MdcList.prototype.getSelectedItem = /**
     * @return {?}
     */
    function () {
        return this.items ? this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.selected || _.activated; })) : undefined;
    };
    /**
     * @return {?}
     */
    MdcList.prototype.getSelectedIndex = /**
     * @return {?}
     */
    function () {
        return this.items ? this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.selected || _.activated; })) : -1;
    };
    /**
     * @return {?}
     */
    MdcList.prototype.getSelectedValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var item = this.items ? this.items.find((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.selected; })) : null;
        return item && item.value ? item.value : null;
    };
    /**
     * @return {?}
     */
    MdcList.prototype.getSelectedText = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedItem = this.getSelectedItem();
        return selectedItem && selectedItem.getListItemElement().textContent || '';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcList.prototype.getListItemByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.items ? this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.value === value; })) : undefined;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcList.prototype.getListItemByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.items ? this.items.toArray()[index] : undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcList.prototype.getListItemIndexByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.items ? this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.value === value; })) : -1;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcList.prototype.focusItemAtIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.items.toArray()[index].getListItemElement().focus();
    };
    /**
     * @return {?}
     */
    MdcList.prototype.focusFirstElement = /**
     * @return {?}
     */
    function () {
        return this._foundation.focusFirstElement();
    };
    /**
     * @return {?}
     */
    MdcList.prototype.focusLastElement = /**
     * @return {?}
     */
    function () {
        return this._foundation.focusLastElement();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcList.prototype.focusNextElement = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this._foundation.focusNextElement(index);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcList.prototype.focusPrevElement = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this._foundation.focusPrevElement(index);
    };
    /**
     * @param {?} role
     * @return {?}
     */
    MdcList.prototype.setRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        this._getHostElement().setAttribute('role', role);
    };
    /**
     * @return {?}
     */
    MdcList.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.items.forEach((/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
            _.selected = false;
            _.activated = false;
        }));
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    MdcList.prototype._applySelectionState = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.useActivatedClass) {
            item.activated = true;
        }
        else if (this.useSelectedClass) {
            item.selected = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    MdcList.prototype._resetListItems = /**
     * @private
     * @return {?}
     */
    function () {
        this._dropSubscriptions();
        this._listenForListItemSelection();
    };
    /**
     * @private
     * @return {?}
     */
    MdcList.prototype._dropSubscriptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.itemSelectionSubscription) {
            this.itemSelectionSubscription.unsubscribe();
            this.itemSelectionSubscription = null;
        }
    };
    /** Listens to selected events on each list item. */
    /**
     * Listens to selected events on each list item.
     * @private
     * @return {?}
     */
    MdcList.prototype._listenForListItemSelection = /**
     * Listens to selected events on each list item.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSelectionSubscription = this.listItemSelections.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.singleSelection) {
                _this.items.filter((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return _.id !== event.source.id && (_.activated || _.selected); }))
                    .forEach((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) {
                    _.selected = false;
                    _.activated = false;
                }));
            }
            _this._applySelectionState(event.source);
            if (!_this.singleSelection) {
                event.source.ripple.handleBlur();
            }
            _this.selectionChange.emit(new MdcListItemChange(_this, event.source));
        }));
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcList.prototype._onFocusIn = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var index = this._getListItemIndexByEvent(evt);
        this._foundation.handleFocusIn(evt, index);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcList.prototype._onFocusOut = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var index = this._getListItemIndexByEvent(evt);
        if (index >= 0) {
            this._foundation.handleFocusOut(evt, index);
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcList.prototype._onKeydown = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var index = this._getListItemIndexByEvent(evt);
        if (index >= 0) {
            this._foundation.handleKeydown(evt, ((/** @type {?} */ (evt.target))).classList.contains(cssClasses.LIST_ITEM_CLASS), index);
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcList.prototype._handleClickEvent = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var index = this._getListItemIndexByEvent(evt);
        /** @type {?} */
        var listItem = this._getListItemByEventTarget((/** @type {?} */ (evt.target)));
        if (listItem && listItem.disabled) {
            return;
        }
        // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.
        /** @type {?} */
        var toggleCheckbox = !matches((evt.target), strings.CHECKBOX_RADIO_SELECTOR);
        this._foundation.handleClick(index, toggleCheckbox);
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    MdcList.prototype._getListItemByEventTarget = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.getListItemElement() === target; }));
    };
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    MdcList.prototype._getListItemIndexByEvent = /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        return this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _.getListItemElement() === evt.target; }));
    };
    /** Retrieves the DOM element of the component host. */
    /**
     * Retrieves the DOM element of the component host.
     * @private
     * @return {?}
     */
    MdcList.prototype._getHostElement = /**
     * Retrieves the DOM element of the component host.
     * @private
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    MdcList.decorators = [
        { type: Component, args: [{selector: 'mdc-list',
                    exportAs: 'mdcList',
                    host: {
                        'role': 'list',
                        'class': 'mdc-list',
                        '[attr.aria-orientation]': 'verticalOrientation ? "vertical" : "horizontal"',
                        '[class.mdc-list--dense]': 'dense',
                        '[class.mdc-list--avatar-list]': 'avatar',
                        '[class.ngx-mdc-list--border]': 'border',
                        '[class.mdc-list--non-interactive]': '!interactive',
                        '[class.mdc-list--two-line]': 'twoLine',
                        '(click)': '_handleClickEvent($event)',
                        '(keydown)': '_onKeydown($event)',
                        '(focusin)': '_onFocusIn($event)',
                        '(focusout)': '_onFocusOut($event)'
                    },
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: MDC_LIST_PARENT_COMPONENT, useExisting: MdcList }]
                },] },
    ];
    /** @nocollapse */
    MdcList.ctorParameters = function () { return [
        { type: Platform },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    MdcList.propDecorators = {
        twoLine: [{ type: Input }],
        dense: [{ type: Input }],
        border: [{ type: Input }],
        avatar: [{ type: Input }],
        interactive: [{ type: Input }],
        disableRipple: [{ type: Input }],
        singleSelection: [{ type: Input }],
        useActivatedClass: [{ type: Input }],
        useSelectedClass: [{ type: Input }],
        verticalOrientation: [{ type: Input }],
        wrapFocus: [{ type: Input }],
        items: [{ type: ContentChildren, args: [MdcListItem, { descendants: true },] }],
        selectionChange: [{ type: Output }],
        actionEvent: [{ type: Output }]
    };
    return MdcList;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcListDivider = /** @class */ (function () {
    function MdcListDivider(elementRef) {
        this.elementRef = elementRef;
        this._inset = false;
        this._padded = false;
    }
    Object.defineProperty(MdcListDivider.prototype, "inset", {
        get: /**
         * @return {?}
         */
        function () { return this._inset; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inset = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListDivider.prototype, "padded", {
        get: /**
         * @return {?}
         */
        function () { return this._padded; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._padded = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    MdcListDivider.decorators = [
        { type: Component, args: [{selector: '[mdcListDivider], mdc-list-divider',
                    exportAs: 'mdcListDivider',
                    host: {
                        'role': 'separator',
                        'class': 'mdc-list-divider',
                        '[class.mdc-list-divider--inset]': 'inset',
                        '[class.mdc-list-divider--padded]': 'padded'
                    },
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcListDivider.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListDivider.propDecorators = {
        inset: [{ type: Input }],
        padded: [{ type: Input }]
    };
    return MdcListDivider;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LIST_DECLARATIONS = [
    MdcList,
    MdcListDivider,
    MdcListGroup,
    MdcListGroupSubheader,
    MdcListItem,
    MdcListItemGraphic,
    MdcListItemMeta,
    MdcListItemSecondary,
    MdcListItemText
];
var MdcListModule = /** @class */ (function () {
    function MdcListModule() {
    }
    MdcListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: LIST_DECLARATIONS,
                    declarations: LIST_DECLARATIONS,
                },] },
    ];
    return MdcListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MdcListItemChange, MdcListGroup, MdcListGroupSubheader, MdcList, MdcListDivider, MdcListSelectionChange, MDC_LIST_PARENT_COMPONENT, MdcListItemGraphic, MdcListItemMeta, MdcListItemText, MdcListItemSecondary, MdcListItem, MdcListModule };
//# sourceMappingURL=list.es5.js.map

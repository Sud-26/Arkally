/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectorRef, NgZone, Optional, ElementRef, Input, Output, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { toBoolean, Platform } from '@angular-mdc/web/common';

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @type {string|undefined} */
var storedTransformPropertyName_;
/**
 * Returns the name of the correct transform property to use on the current browser.
 * @param {!Window} globalObj
 * @param {boolean=} forceRefresh
 * @return {string}
 */

function getTransformPropertyName(globalObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (storedTransformPropertyName_ === undefined || forceRefresh) {
    var el = globalObj.document.createElement('div');
    var transformPropertyName = 'transform' in el.style ? 'transform' : 'webkitTransform';
    storedTransformPropertyName_ = transformPropertyName;
  }

  return storedTransformPropertyName_;
}

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @enum {string} */
var cssClasses = {
  ANCHOR: 'mdc-menu-surface--anchor',
  ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
  ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
  FIXED: 'mdc-menu-surface--fixed',
  OPEN: 'mdc-menu-surface--open',
  ROOT: 'mdc-menu-surface'
};
/** @enum {string} */

var strings = {
  CLOSED_EVENT: 'MDCMenuSurface:closed',
  OPENED_EVENT: 'MDCMenuSurface:opened',
  FOCUSABLE_ELEMENTS: 'button:not(:disabled), [href]:not([aria-disabled="true"]), input:not(:disabled), ' + 'select:not(:disabled), textarea:not(:disabled), [tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'
};
/** @enum {number} */

var numbers = {
  // Total duration of menu-surface open animation.
  TRANSITION_OPEN_DURATION: 120,
  // Total duration of menu-surface close animation.
  TRANSITION_CLOSE_DURATION: 75,
  // Margin left to the edge of the viewport when menu-surface is at maximum possible height.
  MARGIN_TO_EDGE: 32,
  // Ratio of anchor width to menu-surface width for switching from corner positioning to center positioning.
  ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67
};
/**
 * Enum for bits in the {@see Corner) bitmap.
 * @enum {number}
 */

var CornerBit = {
  BOTTOM: 1,
  CENTER: 2,
  RIGHT: 4,
  FLIP_RTL: 8
};
/**
 * Enum for representing an element corner for positioning the menu-surface.
 *
 * The START constants map to LEFT if element directionality is left
 * to right and RIGHT if the directionality is right to left.
 * Likewise END maps to RIGHT or LEFT depending on the directionality.
 *
 * @enum {number}
 */

var Corner = {
  TOP_LEFT: 0,
  TOP_RIGHT: CornerBit.RIGHT,
  BOTTOM_LEFT: CornerBit.BOTTOM,
  BOTTOM_RIGHT: CornerBit.BOTTOM | CornerBit.RIGHT,
  TOP_START: CornerBit.FLIP_RTL,
  TOP_END: CornerBit.FLIP_RTL | CornerBit.RIGHT,
  BOTTOM_START: CornerBit.BOTTOM | CornerBit.FLIP_RTL,
  BOTTOM_END: CornerBit.BOTTOM | CornerBit.RIGHT | CornerBit.FLIP_RTL
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @template A
 */
var MDCFoundation =
/*#__PURE__*/
function () {
  _createClass(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }
    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }
    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }
    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }
    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  _createClass(MDCFoundation, [{
    key: "init",
    value: function init() {// Subclasses should override this method to perform initialization routines (registering events, etc.)
    }
  }, {
    key: "destroy",
    value: function destroy() {// Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    }
  }]);

  return MDCFoundation;
}();

/**
 * @template F
 */

var MDCComponent =
/*#__PURE__*/
function () {
  _createClass(MDCComponent, null, [{
    key: "attachTo",

    /**
     * @param {!Element} root
     * @return {!MDCComponent}
     */
    value: function attachTo(root) {
      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
      // returns an instantiated component with its root set to that element. Also note that in the cases of
      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
      // from getDefaultFoundation().
      return new MDCComponent(root, new MDCFoundation());
    }
    /**
     * @param {!Element} root
     * @param {F=} foundation
     * @param {...?} args
     */

  }]);

  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.

    /** @protected {!F} */

    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  _createClass(MDCComponent, [{
    key: "initialize",
    value: function initialize()
    /* ...args */
    {} // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.

    /**
     * @return {!F} foundation
     */

  }, {
    key: "getDefaultFoundation",
    value: function getDefaultFoundation() {
      // Subclasses must override this method to return a properly configured foundation class for the
      // component.
      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    }
  }, {
    key: "initialSyncWithDOM",
    value: function initialSyncWithDOM() {// Subclasses should override this method if they need to perform work to synchronize with a host DOM
      // object. An example of this would be a form control wrapper that needs to synchronize its internal state
      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // Subclasses may implement this method to release any resources / deregister any listeners they have
      // attached. An example of this might be deregistering a resize event from the window object.
      this.foundation_.destroy();
    }
    /**
     * Wrapper method to add an event listener to the component's root element. This is most useful when
     * listening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "listen",
    value: function listen(evtType, handler) {
      this.root_.addEventListener(evtType, handler);
    }
    /**
     * Wrapper method to remove an event listener to the component's root element. This is most useful when
     * unlistening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "unlisten",
    value: function unlisten(evtType, handler) {
      this.root_.removeEventListener(evtType, handler);
    }
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     * with the given data.
     * @param {string} evtType
     * @param {!Object} evtData
     * @param {boolean=} shouldBubble
     */

  }, {
    key: "emit",
    value: function emit(evtType, evtData) {
      var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var evt;

      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          detail: evtData,
          bubbles: shouldBubble
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      this.root_.dispatchEvent(evt);
    }
  }]);

  return MDCComponent;
}();

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDCMenuSurface. Provides an interface for managing
 * - classes
 * - dom
 * - focus
 * - position
 * - dimensions
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
var MDCMenuSurfaceAdapter =
/*#__PURE__*/
function () {
  function MDCMenuSurfaceAdapter() {
    _classCallCheck(this, MDCMenuSurfaceAdapter);
  }

  _createClass(MDCMenuSurfaceAdapter, [{
    key: "addClass",

    /** @param {string} className */
    value: function addClass(className) {}
    /** @param {string} className */

  }, {
    key: "removeClass",
    value: function removeClass(className) {}
    /**
     * @param {string} className
     * @return {boolean}
     */

  }, {
    key: "hasClass",
    value: function hasClass(className) {}
    /** @return {boolean} */

  }, {
    key: "hasAnchor",
    value: function hasAnchor() {}
    /** Emits an event when the menu surface is closed. */

  }, {
    key: "notifyClose",
    value: function notifyClose() {}
    /** Emits an event when the menu surface is opened. */

  }, {
    key: "notifyOpen",
    value: function notifyOpen() {}
    /**
     * @return {boolean}
     * @param {EventTarget} el
     */

  }, {
    key: "isElementInContainer",
    value: function isElementInContainer(el) {}
    /** @return {boolean} */

  }, {
    key: "isRtl",
    value: function isRtl() {}
    /** @param {string} origin */

  }, {
    key: "setTransformOrigin",
    value: function setTransformOrigin(origin) {}
    /** @return {boolean} */

  }, {
    key: "isFocused",
    value: function isFocused() {}
    /** Saves the element that was focused before the menu surface was opened. */

  }, {
    key: "saveFocus",
    value: function saveFocus() {}
    /** Restores focus to the element that was focused before the menu surface was opened. */

  }, {
    key: "restoreFocus",
    value: function restoreFocus() {}
    /** @return {boolean} */

  }, {
    key: "isFirstElementFocused",
    value: function isFirstElementFocused() {}
    /** @return {boolean} */

  }, {
    key: "isLastElementFocused",
    value: function isLastElementFocused() {}
    /** Focuses the first focusable element in the menu-surface. */

  }, {
    key: "focusFirstElement",
    value: function focusFirstElement() {}
    /** Focuses the first focusable element in the menu-surface. */

  }, {
    key: "focusLastElement",
    value: function focusLastElement() {}
    /** @return {!{width: number, height: number}} */

  }, {
    key: "getInnerDimensions",
    value: function getInnerDimensions() {}
    /** @return {!{width: number, height: number, top: number, right: number, bottom: number, left: number}} */

  }, {
    key: "getAnchorDimensions",
    value: function getAnchorDimensions() {}
    /** @return {!{ width: number, height: number }} */

  }, {
    key: "getWindowDimensions",
    value: function getWindowDimensions() {}
    /** @return {!{ width: number, height: number }} */

  }, {
    key: "getBodyDimensions",
    value: function getBodyDimensions() {}
    /** @return {!{ width: number, height: number }} */

  }, {
    key: "getWindowScroll",
    value: function getWindowScroll() {}
    /** @param {!{
    *   top: (string|undefined),
    *   right: (string|undefined),
    *   bottom: (string|undefined),
    *   left: (string|undefined)
    * }} position */

  }, {
    key: "setPosition",
    value: function setPosition(position) {}
    /** @param {string} height */

  }, {
    key: "setMaxHeight",
    value: function setMaxHeight(height) {}
  }]);

  return MDCMenuSurfaceAdapter;
}();

/**
 * @extends {MDCFoundation<!MDCMenuSurfaceAdapter>}
 */

var MDCMenuSurfaceFoundation =
/*#__PURE__*/
function (_MDCFoundation) {
  _inherits(MDCMenuSurfaceFoundation, _MDCFoundation);

  _createClass(MDCMenuSurfaceFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      return cssClasses;
    }
    /** @return enum{string} */

  }, {
    key: "strings",
    get: function get() {
      return strings;
    }
    /** @return enum {number} */

  }, {
    key: "numbers",
    get: function get() {
      return numbers;
    }
    /** @return enum{number} */

  }, {
    key: "Corner",
    get: function get() {
      return Corner;
    }
    /**
     * {@see MDCMenuSurfaceAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCMenuSurfaceAdapter}
     */

  }, {
    key: "defaultAdapter",
    get: function get() {
      return (
        /** @type {!MDCMenuSurfaceAdapter} */
        {
          addClass: function addClass() {},
          removeClass: function removeClass() {},
          hasClass: function hasClass() {
            return false;
          },
          hasAnchor: function hasAnchor() {
            return false;
          },
          notifyClose: function notifyClose() {},
          notifyOpen: function notifyOpen() {},
          isElementInContainer: function isElementInContainer() {
            return false;
          },
          isRtl: function isRtl() {
            return false;
          },
          setTransformOrigin: function setTransformOrigin() {},
          isFocused: function isFocused() {
            return false;
          },
          saveFocus: function saveFocus() {},
          restoreFocus: function restoreFocus() {},
          isFirstElementFocused: function isFirstElementFocused() {},
          isLastElementFocused: function isLastElementFocused() {},
          focusFirstElement: function focusFirstElement() {},
          focusLastElement: function focusLastElement() {},
          getInnerDimensions: function getInnerDimensions() {
            return {};
          },
          getAnchorDimensions: function getAnchorDimensions() {
            return {};
          },
          getWindowDimensions: function getWindowDimensions() {
            return {};
          },
          getBodyDimensions: function getBodyDimensions() {
            return {};
          },
          getWindowScroll: function getWindowScroll() {
            return {};
          },
          setPosition: function setPosition() {},
          setMaxHeight: function setMaxHeight() {}
        }
      );
    }
    /** @param {!MDCMenuSurfaceAdapter} adapter */

  }]);

  function MDCMenuSurfaceFoundation(adapter) {
    var _this;

    _classCallCheck(this, MDCMenuSurfaceFoundation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDCMenuSurfaceFoundation).call(this, Object.assign(MDCMenuSurfaceFoundation.defaultAdapter, adapter)));
    /** @private {boolean} */

    _this.isOpen_ = false;
    /** @private {number} */

    _this.openAnimationEndTimerId_ = 0;
    /** @private {number} */

    _this.closeAnimationEndTimerId_ = 0;
    /** @private {number} */

    _this.animationRequestId_ = 0;
    /** @private {!{ width: number, height: number }} */

    _this.dimensions_;
    /** @private {!Corner} */

    _this.anchorCorner_ = Corner.TOP_START;
    /** @private {!AnchorMargin} */

    _this.anchorMargin_ = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    /** @private {?AutoLayoutMeasurements} */

    _this.measures_ = null;
    /** @private {boolean} */

    _this.quickOpen_ = false;
    /** @private {boolean} */

    _this.hoistedElement_ = false;
    /** @private {boolean} */

    _this.isFixedPosition_ = false;
    /** @private {!{x: number, y: number}} */

    _this.position_ = {
      x: 0,
      y: 0
    };
    return _this;
  }

  _createClass(MDCMenuSurfaceFoundation, [{
    key: "init",
    value: function init() {
      var _MDCMenuSurfaceFounda = MDCMenuSurfaceFoundation.cssClasses,
          ROOT = _MDCMenuSurfaceFounda.ROOT,
          OPEN = _MDCMenuSurfaceFounda.OPEN;

      if (!this.adapter_.hasClass(ROOT)) {
        throw new Error("".concat(ROOT, " class required in root element."));
      }

      if (this.adapter_.hasClass(OPEN)) {
        this.isOpen_ = true;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.openAnimationEndTimerId_);
      clearTimeout(this.closeAnimationEndTimerId_); // Cancel any currently running animations.

      cancelAnimationFrame(this.animationRequestId_);
    }
    /**
     * @param {!Corner} corner Default anchor corner alignment of top-left menu surface corner.
     */

  }, {
    key: "setAnchorCorner",
    value: function setAnchorCorner(corner) {
      this.anchorCorner_ = corner;
    }
    /**
     * @param {!AnchorMargin} margin set of margin values from anchor.
     */

  }, {
    key: "setAnchorMargin",
    value: function setAnchorMargin(margin) {
      this.anchorMargin_.top = typeof margin.top === 'number' ? margin.top : 0;
      this.anchorMargin_.right = typeof margin.right === 'number' ? margin.right : 0;
      this.anchorMargin_.bottom = typeof margin.bottom === 'number' ? margin.bottom : 0;
      this.anchorMargin_.left = typeof margin.left === 'number' ? margin.left : 0;
    }
    /**
     * Used to indicate if the menu-surface is hoisted to the body.
     * @param {boolean} isHoisted
     */

  }, {
    key: "setIsHoisted",
    value: function setIsHoisted(isHoisted) {
      this.hoistedElement_ = isHoisted;
    }
    /**
     * Used to set the menu-surface calculations based on a fixed position menu.
     * @param {boolean} isFixedPosition
     */

  }, {
    key: "setFixedPosition",
    value: function setFixedPosition(isFixedPosition) {
      this.isFixedPosition_ = isFixedPosition;
    }
    /**
     * Sets the menu-surface position on the page.
     * @param {number} x
     * @param {number} y
     */

  }, {
    key: "setAbsolutePosition",
    value: function setAbsolutePosition(x, y) {
      this.position_.x = this.typeCheckisFinite_(x) ? x : 0;
      this.position_.y = this.typeCheckisFinite_(y) ? y : 0;
    }
    /** @param {boolean} quickOpen */

  }, {
    key: "setQuickOpen",
    value: function setQuickOpen(quickOpen) {
      this.quickOpen_ = quickOpen;
    }
    /**
     * Handle clicks and close if not within menu-surface element.
     * @param {!Event} evt
     */

  }, {
    key: "handleBodyClick",
    value: function handleBodyClick(evt) {
      var el = evt.target;

      if (this.adapter_.isElementInContainer(el)) {
        return;
      }

      this.close();
    }
  }, {
    key: "handleKeydown",

    /**
     * Handle keys that close the surface.
     * @param {!Event} evt
     */
    value: function handleKeydown(evt) {
      var keyCode = evt.keyCode,
          key = evt.key,
          shiftKey = evt.shiftKey;
      var isEscape = key === 'Escape' || keyCode === 27;
      var isTab = key === 'Tab' || keyCode === 9;

      if (isEscape) {
        this.close();
      } else if (isTab) {
        if (this.adapter_.isLastElementFocused() && !shiftKey) {
          this.adapter_.focusFirstElement();
          evt.preventDefault();
        } else if (this.adapter_.isFirstElementFocused() && shiftKey) {
          this.adapter_.focusLastElement();
          evt.preventDefault();
        }
      }
    }
    /**
     * @return {!AutoLayoutMeasurements} Measurements used to position menu surface popup.
     */

  }, {
    key: "getAutoLayoutMeasurements_",
    value: function getAutoLayoutMeasurements_() {
      var anchorRect = this.adapter_.getAnchorDimensions();
      var viewport = this.adapter_.getWindowDimensions();
      var bodyDimensions = this.adapter_.getBodyDimensions();
      var windowScroll = this.adapter_.getWindowScroll();

      if (!anchorRect) {
        anchorRect =
        /** @type {ClientRect} */
        {
          x: this.position_.x,
          y: this.position_.y,
          top: this.position_.y,
          bottom: this.position_.y,
          left: this.position_.x,
          right: this.position_.x,
          height: 0,
          width: 0
        };
      }

      return {
        viewport: viewport,
        bodyDimensions: bodyDimensions,
        windowScroll: windowScroll,
        viewportDistance: {
          top: anchorRect.top,
          right: viewport.width - anchorRect.right,
          left: anchorRect.left,
          bottom: viewport.height - anchorRect.bottom
        },
        anchorHeight: anchorRect.height,
        anchorWidth: anchorRect.width,
        surfaceHeight: this.dimensions_.height,
        surfaceWidth: this.dimensions_.width
      };
    }
    /**
     * Computes the corner of the anchor from which to animate and position the menu surface.
     * @return {!Corner}
     * @private
     */

  }, {
    key: "getOriginCorner_",
    value: function getOriginCorner_() {
      // Defaults: open from the top left.
      var corner = Corner.TOP_LEFT;
      var _this$measures_ = this.measures_,
          viewportDistance = _this$measures_.viewportDistance,
          anchorHeight = _this$measures_.anchorHeight,
          anchorWidth = _this$measures_.anchorWidth,
          surfaceHeight = _this$measures_.surfaceHeight,
          surfaceWidth = _this$measures_.surfaceWidth;
      var isBottomAligned = Boolean(this.anchorCorner_ & CornerBit.BOTTOM);
      var availableTop = isBottomAligned ? viewportDistance.top + anchorHeight + this.anchorMargin_.bottom : viewportDistance.top + this.anchorMargin_.top;
      var availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom : viewportDistance.bottom + anchorHeight - this.anchorMargin_.top;
      var topOverflow = surfaceHeight - availableTop;
      var bottomOverflow = surfaceHeight - availableBottom;

      if (bottomOverflow > 0 && topOverflow < bottomOverflow) {
        corner |= CornerBit.BOTTOM;
      }

      var isRtl = this.adapter_.isRtl();
      var isFlipRtl = Boolean(this.anchorCorner_ & CornerBit.FLIP_RTL);
      var avoidHorizontalOverlap = Boolean(this.anchorCorner_ & CornerBit.RIGHT);
      var isAlignedRight = avoidHorizontalOverlap && !isRtl || !avoidHorizontalOverlap && isFlipRtl && isRtl;
      var availableLeft = isAlignedRight ? viewportDistance.left + anchorWidth + this.anchorMargin_.right : viewportDistance.left + this.anchorMargin_.left;
      var availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right : viewportDistance.right + anchorWidth - this.anchorMargin_.left;
      var leftOverflow = surfaceWidth - availableLeft;
      var rightOverflow = surfaceWidth - availableRight;

      if (leftOverflow < 0 && isAlignedRight && isRtl || avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0 || rightOverflow > 0 && leftOverflow < rightOverflow) {
        corner |= CornerBit.RIGHT;
      }

      return (
        /** @type {Corner} */
        corner
      );
    }
    /**
     * @param {!Corner} corner Origin corner of the menu surface.
     * @return {number} Horizontal offset of menu surface origin corner from corresponding anchor corner.
     * @private
     */

  }, {
    key: "getHorizontalOriginOffset_",
    value: function getHorizontalOriginOffset_(corner) {
      var anchorWidth = this.measures_.anchorWidth; // isRightAligned corresponds to using the 'right' property on the surface.

      var isRightAligned = Boolean(corner & CornerBit.RIGHT);
      var avoidHorizontalOverlap = Boolean(this.anchorCorner_ & CornerBit.RIGHT);

      if (isRightAligned) {
        var rightOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.left : this.anchorMargin_.right; // For hoisted or fixed elements, adjust the offset by the difference between viewport width and body width so
        // when we calculate the right value (`adjustPositionForHoistedElement_`) based on the element position,
        // the right property is correct.

        if (this.hoistedElement_ || this.isFixedPosition_) {
          return rightOffset - (this.measures_.viewport.width - this.measures_.bodyDimensions.width);
        }

        return rightOffset;
      }

      return avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.right : this.anchorMargin_.left;
    }
    /**
     * @param {!Corner} corner Origin corner of the menu surface.
     * @return {number} Vertical offset of menu surface origin corner from corresponding anchor corner.
     * @private
     */

  }, {
    key: "getVerticalOriginOffset_",
    value: function getVerticalOriginOffset_(corner) {
      var anchorHeight = this.measures_.anchorHeight;
      var isBottomAligned = Boolean(corner & CornerBit.BOTTOM);
      var avoidVerticalOverlap = Boolean(this.anchorCorner_ & CornerBit.BOTTOM);
      var y = 0;

      if (isBottomAligned) {
        y = avoidVerticalOverlap ? anchorHeight - this.anchorMargin_.top : -this.anchorMargin_.bottom;
      } else {
        y = avoidVerticalOverlap ? anchorHeight + this.anchorMargin_.bottom : this.anchorMargin_.top;
      }

      return y;
    }
    /**
     * @param {!Corner} corner Origin corner of the menu surface.
     * @return {number} Maximum height of the menu surface, based on available space. 0 indicates should not be set.
     * @private
     */

  }, {
    key: "getMenuSurfaceMaxHeight_",
    value: function getMenuSurfaceMaxHeight_(corner) {
      var maxHeight = 0;
      var viewportDistance = this.measures_.viewportDistance;
      var isBottomAligned = Boolean(corner & CornerBit.BOTTOM);
      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE; // When maximum height is not specified, it is handled from css.

      if (isBottomAligned) {
        maxHeight = viewportDistance.top + this.anchorMargin_.top - MARGIN_TO_EDGE;

        if (!(this.anchorCorner_ & CornerBit.BOTTOM)) {
          maxHeight += this.measures_.anchorHeight;
        }
      } else {
        maxHeight = viewportDistance.bottom - this.anchorMargin_.bottom + this.measures_.anchorHeight - MARGIN_TO_EDGE;

        if (this.anchorCorner_ & CornerBit.BOTTOM) {
          maxHeight -= this.measures_.anchorHeight;
        }
      }

      return maxHeight;
    }
    /** @private */

  }, {
    key: "autoPosition_",
    value: function autoPosition_() {
      var _position;

      // Compute measurements for autoposition methods reuse.
      this.measures_ = this.getAutoLayoutMeasurements_();
      var corner = this.getOriginCorner_();
      var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight_(corner);
      var verticalAlignment = corner & CornerBit.BOTTOM ? 'bottom' : 'top';
      var horizontalAlignment = corner & CornerBit.RIGHT ? 'right' : 'left';
      var horizontalOffset = this.getHorizontalOriginOffset_(corner);
      var verticalOffset = this.getVerticalOriginOffset_(corner);
      var position = (_position = {}, _defineProperty(_position, horizontalAlignment, horizontalOffset ? horizontalOffset : '0'), _defineProperty(_position, verticalAlignment, verticalOffset ? verticalOffset : '0'), _position);
      var _this$measures_2 = this.measures_,
          anchorWidth = _this$measures_2.anchorWidth,
          surfaceWidth = _this$measures_2.surfaceWidth; // Center align when anchor width is comparable or greater than menu surface, otherwise keep corner.

      if (anchorWidth / surfaceWidth > numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
        horizontalAlignment = 'center';
      } // If the menu-surface has been hoisted to the body, it's no longer relative to the anchor element


      if (this.hoistedElement_ || this.isFixedPosition_) {
        position = this.adjustPositionForHoistedElement_(position);
      }

      for (var prop in position) {
        if (position.hasOwnProperty(prop) && position[prop] !== '0') {
          position[prop] = "".concat(parseInt(position[prop], 10), "px");
        }
      }

      this.adapter_.setTransformOrigin("".concat(horizontalAlignment, " ").concat(verticalAlignment));
      this.adapter_.setPosition(position);
      this.adapter_.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : ''); // Clear measures after positioning is complete.

      this.measures_ = null;
    }
    /**
     * Calculates the offsets for positioning the menu-surface when the menu-surface has been
     * hoisted to the body.
     * @param {!{
     *   top: (string|undefined),
     *   right: (string|undefined),
     *   bottom: (string|undefined),
     *   left: (string|undefined)
     * }} position
     * @return {!{
     *   top: (string|undefined),
     *   right: (string|undefined),
     *   bottom: (string|undefined),
     *   left: (string|undefined)
     * }} position
     * @private
     */

  }, {
    key: "adjustPositionForHoistedElement_",
    value: function adjustPositionForHoistedElement_(position) {
      var _this$measures_3 = this.measures_,
          windowScroll = _this$measures_3.windowScroll,
          viewportDistance = _this$measures_3.viewportDistance;

      for (var prop in position) {
        if (position.hasOwnProperty(prop)) {
          // Hoisted surfaces need to have the anchor elements location on the page added to the
          // position properties for proper alignment on the body.
          if (viewportDistance.hasOwnProperty(prop)) {
            position[prop] = parseInt(position[prop], 10) + viewportDistance[prop];
          } // Surfaces that are absolutely positioned need to have additional calculations for scroll
          // and bottom positioning.


          if (!this.isFixedPosition_) {
            if (prop === 'top') {
              position[prop] = parseInt(position[prop], 10) + windowScroll.y;
            } else if (prop === 'bottom') {
              position[prop] = parseInt(position[prop], 10) - windowScroll.y;
            } else if (prop === 'left') {
              position[prop] = parseInt(position[prop], 10) + windowScroll.x;
            } else if (prop === 'right') {
              position[prop] = parseInt(position[prop], 10) - windowScroll.x;
            }
          }
        }
      }

      return position;
    }
    /**
     * Open the menu surface.
     */

  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      this.adapter_.saveFocus();

      if (!this.quickOpen_) {
        this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
      }

      this.animationRequestId_ = requestAnimationFrame(function () {
        _this2.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);

        _this2.dimensions_ = _this2.adapter_.getInnerDimensions();

        _this2.autoPosition_();

        if (_this2.quickOpen_) {
          _this2.adapter_.notifyOpen();
        } else {
          _this2.openAnimationEndTimerId_ = setTimeout(function () {
            _this2.openAnimationEndTimerId_ = 0;

            _this2.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);

            _this2.adapter_.notifyOpen();
          }, numbers.TRANSITION_OPEN_DURATION);
        }
      });
      this.isOpen_ = true;
    }
    /**
     * Closes the menu surface.
     */

  }, {
    key: "close",
    value: function close() {
      var _this3 = this;

      if (!this.quickOpen_) {
        this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
      }

      requestAnimationFrame(function () {
        _this3.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);

        if (_this3.quickOpen_) {
          _this3.adapter_.notifyClose();
        } else {
          _this3.closeAnimationEndTimerId_ = setTimeout(function () {
            _this3.closeAnimationEndTimerId_ = 0;

            _this3.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);

            _this3.adapter_.notifyClose();
          }, numbers.TRANSITION_CLOSE_DURATION);
        }
      });
      this.isOpen_ = false;
      this.maybeRestoreFocus_();
    }
    /**
     * The last focused element when the menu surface was opened should regain focus, if the user is
     * focused on or within the menu surface when it is closed.
     * @private
     */

  }, {
    key: "maybeRestoreFocus_",
    value: function maybeRestoreFocus_() {
      if (this.adapter_.isFocused() || this.adapter_.isElementInContainer(document.activeElement)) {
        this.adapter_.restoreFocus();
      }
    }
    /** @return {boolean} */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return this.isOpen_;
    }
    /**
     * isFinite that doesn't force conversion to number type.
     * Equivalent to Number.isFinite in ES2015, but is not included in IE11.
     * @param {number} num
     * @return {boolean}
     * @private
     */

  }, {
    key: "typeCheckisFinite_",
    value: function typeCheckisFinite_(num) {
      return typeof num === 'number' && isFinite(num);
    }
  }]);

  return MDCMenuSurfaceFoundation;
}(MDCFoundation);

/**
 * @extends MDCComponent<!MDCMenuSurfaceFoundation>
 */

var MDCMenuSurface =
/*#__PURE__*/
function (_MDCComponent) {
  _inherits(MDCMenuSurface, _MDCComponent);

  /** @param {...?} args */
  function MDCMenuSurface() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MDCMenuSurface);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MDCMenuSurface)).call.apply(_getPrototypeOf2, [this].concat(args)));
    /** @private {!Element} */

    _this.previousFocus_;
    /** @private {!Element} */

    _this.anchorElement;
    /** @private {Element} */

    _this.firstFocusableElement_;
    /** @private {Element} */

    _this.lastFocusableElement_;
    /** @private {!Function} */

    _this.handleKeydown_;
    /** @private {!Function} */

    _this.handleBodyClick_;
    /** @private {!Function} */

    _this.registerBodyClickListener_;
    /** @private {!Function} */

    _this.deregisterBodyClickListener_;
    return _this;
  }
  /**
   * @param {!Element} root
   * @return {!MDCMenuSurface}
   */


  _createClass(MDCMenuSurface, [{
    key: "initialSyncWithDOM",
    value: function initialSyncWithDOM() {
      var _this2 = this;

      if (this.root_.parentElement && this.root_.parentElement.classList.contains(cssClasses.ANCHOR)) {
        this.anchorElement = this.root_.parentElement;
      }

      if (this.root_.classList.contains(cssClasses.FIXED)) {
        this.setFixedPosition(true);
      }

      this.handleKeydown_ = function (evt) {
        return _this2.foundation_.handleKeydown(evt);
      };

      this.handleBodyClick_ = function (evt) {
        return _this2.foundation_.handleBodyClick(evt);
      };

      this.registerBodyClickListener_ = function () {
        return document.body.addEventListener('click', _this2.handleBodyClick_);
      };

      this.deregisterBodyClickListener_ = function () {
        return document.body.removeEventListener('click', _this2.handleBodyClick_);
      };

      this.root_.addEventListener('keydown', this.handleKeydown_);
      this.root_.addEventListener(strings.OPENED_EVENT, this.registerBodyClickListener_);
      this.root_.addEventListener(strings.CLOSED_EVENT, this.deregisterBodyClickListener_);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.root_.removeEventListener('keydown', this.handleKeydown_);
      this.root_.removeEventListener(strings.OPENED_EVENT, this.registerBodyClickListener_);
      this.root_.removeEventListener(strings.CLOSED_EVENT, this.deregisterBodyClickListener_);

      _get(_getPrototypeOf(MDCMenuSurface.prototype), "destroy", this).call(this);
    }
    /** @return {boolean} */

  }, {
    key: "hoistMenuToBody",

    /**
     * Removes the menu-surface from it's current location and appends it to the
     * body to overcome any overflow:hidden issues.
     */
    value: function hoistMenuToBody() {
      document.body.appendChild(this.root_.parentElement.removeChild(this.root_));
      this.setIsHoisted(true);
    }
    /**
     * Sets the foundation to use page offsets for an positioning when the menu
     * is hoisted to the body.
     * @param {boolean} isHoisted
     */

  }, {
    key: "setIsHoisted",
    value: function setIsHoisted(isHoisted) {
      this.foundation_.setIsHoisted(isHoisted);
    }
    /**
     * Sets the element that the menu-surface is anchored to.
     * @param {!Element} element
     */

  }, {
    key: "setMenuSurfaceAnchorElement",
    value: function setMenuSurfaceAnchorElement(element) {
      this.anchorElement = element;
    }
    /**
     * Sets the menu-surface to position: fixed.
     * @param {boolean} isFixed
     */

  }, {
    key: "setFixedPosition",
    value: function setFixedPosition(isFixed) {
      if (isFixed) {
        this.root_.classList.add(cssClasses.FIXED);
      } else {
        this.root_.classList.remove(cssClasses.FIXED);
      }

      this.foundation_.setFixedPosition(isFixed);
    }
    /**
     * Sets the absolute x/y position to position based on. Requires the menu to be hoisted.
     * @param {number} x
     * @param {number} y
     */

  }, {
    key: "setAbsolutePosition",
    value: function setAbsolutePosition(x, y) {
      this.foundation_.setAbsolutePosition(x, y);
      this.setIsHoisted(true);
    }
    /**
     * @param {!Corner} corner Default anchor corner alignment of top-left
     *     surface corner.
     */

  }, {
    key: "setAnchorCorner",
    value: function setAnchorCorner(corner) {
      this.foundation_.setAnchorCorner(corner);
    }
    /**
     * @param {!AnchorMargin} margin
     */

  }, {
    key: "setAnchorMargin",
    value: function setAnchorMargin(margin) {
      this.foundation_.setAnchorMargin(margin);
    }
    /** @param {boolean} quickOpen */

  }, {
    key: "getDefaultFoundation",

    /** @return {!MDCMenuSurfaceFoundation} */
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new MDCMenuSurfaceFoundation(
      /** @type {!MDCMenuSurfaceAdapter} */
      Object.assign({
        addClass: function addClass(className) {
          return _this3.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this3.root_.classList.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this3.root_.classList.contains(className);
        },
        hasAnchor: function hasAnchor() {
          return !!_this3.anchorElement;
        },
        notifyClose: function notifyClose() {
          return _this3.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
        },
        notifyOpen: function notifyOpen() {
          return _this3.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
        },
        isElementInContainer: function isElementInContainer(el) {
          return _this3.root_ === el || _this3.root_.contains(el);
        },
        isRtl: function isRtl() {
          return getComputedStyle(_this3.root_).getPropertyValue('direction') === 'rtl';
        },
        setTransformOrigin: function setTransformOrigin(origin) {
          _this3.root_.style["".concat(getTransformPropertyName(window), "-origin")] = origin;
        }
      }, this.getFocusAdapterMethods_(), this.getDimensionAdapterMethods_()));
    }
    /**
     * @return {!{
     * isFocused: function(): boolean,
     * saveFocus: function(),
     * restoreFocus: function(),
     * isFirstElementFocused: function(): boolean,
     * isLastElementFocused: function(): boolean,
     * focusFirstElement: function(),
     * focusLastElement: function(),
     * }}
     * @private
     */

  }, {
    key: "getFocusAdapterMethods_",
    value: function getFocusAdapterMethods_() {
      var _this4 = this;

      return {
        isFocused: function isFocused() {
          return document.activeElement === _this4.root_;
        },
        saveFocus: function saveFocus() {
          _this4.previousFocus_ = document.activeElement;
        },
        restoreFocus: function restoreFocus() {
          if (_this4.root_.contains(document.activeElement)) {
            if (_this4.previousFocus_ && _this4.previousFocus_.focus) {
              _this4.previousFocus_.focus();
            }
          }
        },
        isFirstElementFocused: function isFirstElementFocused() {
          return _this4.firstFocusableElement_ && _this4.firstFocusableElement_ === document.activeElement;
        },
        isLastElementFocused: function isLastElementFocused() {
          return _this4.lastFocusableElement_ && _this4.lastFocusableElement_ === document.activeElement;
        },
        focusFirstElement: function focusFirstElement() {
          return _this4.firstFocusableElement_ && _this4.firstFocusableElement_.focus && _this4.firstFocusableElement_.focus();
        },
        focusLastElement: function focusLastElement() {
          return _this4.lastFocusableElement_ && _this4.lastFocusableElement_.focus && _this4.lastFocusableElement_.focus();
        }
      };
    }
    /**
     * @return {!{
     * getInnerDimensions: function(),
     * getAnchorDimensions: function(): (HTMLElement | null | * | ClientRect),
     * getWindowDimensions: function(),
     * setPosition: function(*),
     * setMaxHeight: function(string)}}
     * @private
     */

  }, {
    key: "getDimensionAdapterMethods_",
    value: function getDimensionAdapterMethods_() {
      var _this5 = this;

      return {
        getInnerDimensions: function getInnerDimensions() {
          return {
            width: _this5.root_.offsetWidth,
            height: _this5.root_.offsetHeight
          };
        },
        getAnchorDimensions: function getAnchorDimensions() {
          return _this5.anchorElement && _this5.anchorElement.getBoundingClientRect();
        },
        getWindowDimensions: function getWindowDimensions() {
          return {
            width: window.innerWidth,
            height: window.innerHeight
          };
        },
        getBodyDimensions: function getBodyDimensions() {
          return {
            width: document.body.clientWidth,
            height: document.body.clientHeight
          };
        },
        getWindowScroll: function getWindowScroll() {
          return {
            x: window.pageXOffset,
            y: window.pageYOffset
          };
        },
        setPosition: function setPosition(position) {
          _this5.root_.style.left = 'left' in position ? position.left : null;
          _this5.root_.style.right = 'right' in position ? position.right : null;
          _this5.root_.style.top = 'top' in position ? position.top : null;
          _this5.root_.style.bottom = 'bottom' in position ? position.bottom : null;
        },
        setMaxHeight: function setMaxHeight(height) {
          _this5.root_.style.maxHeight = height;
        }
      };
    }
  }, {
    key: "open",
    get: function get() {
      return this.foundation_.isOpen();
    }
    /** @param {boolean} value */
    ,
    set: function set(value) {
      if (value) {
        var focusableElements = this.root_.querySelectorAll(strings.FOCUSABLE_ELEMENTS);
        this.firstFocusableElement_ = focusableElements.length > 0 ? focusableElements[0] : null;
        this.lastFocusableElement_ = focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }
  }, {
    key: "quickOpen",
    set: function set(quickOpen) {
      this.foundation_.setQuickOpen(quickOpen);
    }
  }], [{
    key: "attachTo",
    value: function attachTo(root) {
      return new MDCMenuSurface(root);
    }
  }]);

  return MDCMenuSurface;
}(MDCComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ANCHOR_CORNER_MAP = {
    bottomEnd: Corner.BOTTOM_END,
    bottomStart: Corner.BOTTOM_START,
    topEnd: Corner.TOP_END,
    topStart: Corner.TOP_START
};
/**
 * @abstract
 */
var MdcMenuSurfaceBase = /** @class */ (function () {
    function MdcMenuSurfaceBase(changeDetectorRef, platform, _ngZone, elementRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.platform = platform;
        this._ngZone = _ngZone;
        this.elementRef = elementRef;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        this._previousFocus = null;
        this._firstFocusableElement = null;
        this._lastFocusableElement = null;
        this._open = false;
        this._anchorElement = null;
        this._anchorCorner = 'topStart';
        this._quickOpen = false;
        this._fixed = false;
        this._coordinates = { x: 0, y: 0 };
        this._anchorMargin = {};
        this._hoistToBody = false;
        /**
         * Emits an event whenever the menu surface is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Emits an event whenever the menu surface is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Subscription to interaction events in menu-surface.
         */
        this._windowClickSubscription = null;
        this._foundation = new MDCMenuSurfaceFoundation(this._createSurfaceAdapter());
    }
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () { return this._open; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._open = toBoolean(value);
            this.setOpen();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "anchorElement", {
        get: /**
         * @return {?}
         */
        function () { return this._anchorElement; },
        set: /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            this._anchorElement = element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "anchorCorner", {
        get: /**
         * @return {?}
         */
        function () { return this._anchorCorner; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._anchorCorner = value || 'topStart';
            this._foundation.setAnchorCorner([ANCHOR_CORNER_MAP[this._anchorCorner]]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "quickOpen", {
        get: /**
         * @return {?}
         */
        function () { return this._quickOpen; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._quickOpen = toBoolean(value);
            this._foundation.setQuickOpen(this._quickOpen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "fixed", {
        get: /**
         * @return {?}
         */
        function () { return this._fixed; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fixed = toBoolean(value);
            this._fixed ? this._getHostElement().classList.add('mdc-menu-surface--fixed') :
                this._getHostElement().classList.remove('mdc-menu-surface--fixed');
            this._foundation.setFixedPosition(this._fixed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "coordinates", {
        get: /**
         * @return {?}
         */
        function () { return this._coordinates; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._coordinates = value;
            this._foundation.setAbsolutePosition(value.x, value.y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "anchorMargin", {
        get: /**
         * @return {?}
         */
        function () { return this._anchorMargin; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._anchorMargin = value;
            this._foundation.setAnchorMargin(this._anchorMargin);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcMenuSurfaceBase.prototype, "hoistToBody", {
        get: /**
         * @return {?}
         */
        function () { return this._hoistToBody; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hoistToBody = toBoolean(value);
            if (this._hoistToBody) {
                this.setHoistToBody();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._createSurfaceAdapter = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.assign({
            addClass: (/**
             * @param {?} className
             * @return {?}
             */
            function (className) { return _this._getHostElement().classList.add(className); }),
            removeClass: (/**
             * @param {?} className
             * @return {?}
             */
            function (className) { return _this._getHostElement().classList.remove(className); }),
            hasClass: (/**
             * @param {?} className
             * @return {?}
             */
            function (className) { return _this._getHostElement().classList.contains(className); }),
            hasAnchor: (/**
             * @return {?}
             */
            function () { return !!_this.anchorElement; }),
            notifyClose: (/**
             * @return {?}
             */
            function () {
                _this.closed.emit();
                _this._deregisterWindowClickListener();
            }),
            notifyOpen: (/**
             * @return {?}
             */
            function () {
                _this.opened.emit();
                _this._registerWindowClickListener();
            }),
            isElementInContainer: (/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return _this._getHostElement() === el || _this._getHostElement().contains(el); }),
            isRtl: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                return window.getComputedStyle(_this._getHostElement()).getPropertyValue('direction') === 'rtl';
            }),
            setTransformOrigin: (/**
             * @param {?} origin
             * @return {?}
             */
            function (origin) {
                if (!_this.platform.isBrowser) {
                    return;
                }
                _this._getHostElement().style[(/** @type {?} */ (getTransformPropertyName(window) + "-origin"))] = origin;
            })
        }, this._getFocusAdaptermethods(), this._getDimensionAdapterMethods());
    };
    /**
     * @private
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._getFocusAdaptermethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            isFocused: (/**
             * @return {?}
             */
            function () { return _this.platform.isBrowser ? (/** @type {?} */ (document.activeElement)) === _this._getHostElement() : false; }),
            saveFocus: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                _this._previousFocus = (/** @type {?} */ (document.activeElement));
            }),
            restoreFocus: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                if (_this._getHostElement().contains((/** @type {?} */ (document.activeElement)))) {
                    if (_this._previousFocus && ((/** @type {?} */ (_this._previousFocus))).focus) {
                        ((/** @type {?} */ (_this._previousFocus))).focus();
                    }
                }
            }),
            isFirstElementFocused: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return false;
                }
                return _this._firstFocusableElement && _this._firstFocusableElement === (/** @type {?} */ (document.activeElement));
            }),
            isLastElementFocused: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return false;
                }
                return _this._lastFocusableElement && _this._lastFocusableElement === (/** @type {?} */ (document.activeElement));
            }),
            focusFirstElement: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                if (_this._firstFocusableElement) {
                    ((/** @type {?} */ (_this._firstFocusableElement))).focus();
                }
            }),
            focusLastElement: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                if (_this._lastFocusableElement) {
                    ((/** @type {?} */ (_this._lastFocusableElement))).focus();
                }
            })
        };
    };
    /**
     * @private
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._getDimensionAdapterMethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            getInnerDimensions: (/**
             * @return {?}
             */
            function () {
                return { width: _this._getHostElement().offsetWidth, height: _this._getHostElement().offsetHeight };
            }),
            getAnchorDimensions: (/**
             * @return {?}
             */
            function () {
                if (!_this.platform.isBrowser) {
                    return;
                }
                return _this._anchorElement && _this._anchorElement.getBoundingClientRect();
            }),
            getWindowDimensions: (/**
             * @return {?}
             */
            function () {
                return {
                    width: _this.platform.isBrowser ? window.innerWidth : 0,
                    height: _this.platform.isBrowser ? window.innerHeight : 0
                };
            }),
            getBodyDimensions: (/**
             * @return {?}
             */
            function () {
                return {
                    width: _this.platform.isBrowser ? (/** @type {?} */ (document.body)).clientWidth : 0,
                    height: _this.platform.isBrowser ? (/** @type {?} */ (document.body)).clientHeight : 0
                };
            }),
            getWindowScroll: (/**
             * @return {?}
             */
            function () {
                return {
                    x: _this.platform.isBrowser ? window.pageXOffset : 0,
                    y: _this.platform.isBrowser ? window.pageYOffset : 0
                };
            }),
            setPosition: (/**
             * @param {?} position
             * @return {?}
             */
            function (position) {
                _this._getHostElement().style.left = 'left' in position ? position.left : null;
                _this._getHostElement().style.right = 'right' in position ? position.right : null;
                _this._getHostElement().style.top = 'top' in position ? position.top : null;
                _this._getHostElement().style.bottom = 'bottom' in position ? position.bottom : null;
            }),
            setMaxHeight: (/**
             * @param {?} height
             * @return {?}
             */
            function (height) { return _this._getHostElement().style.maxHeight = height; })
        };
    };
    /**
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype.initMenuSurface = /**
     * @protected
     * @return {?}
     */
    function () {
        this._foundation.init();
        this._registerKeydownListener();
    };
    /**
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype.destroyMenuSurface = /**
     * @protected
     * @return {?}
     */
    function () {
        this._destroy.next();
        this._destroy.complete();
        this._deregisterWindowClickListener();
        // add platform check due to use of cancelAnimationFrame inside destroy()
        if (this.platform.isBrowser) {
            this._foundation.destroy();
        }
        if (this.hoistToBody) {
            (/** @type {?} */ (document.body)).removeChild(this._getHostElement());
        }
    };
    /**
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype.setOpen = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this._open) {
            /** @type {?} */
            var focusableElements = this._getHostElement().querySelectorAll(strings.FOCUSABLE_ELEMENTS);
            this._firstFocusableElement = focusableElements.length > 0 ? focusableElements[0] : null;
            this._lastFocusableElement = focusableElements.length > 0 ?
                focusableElements[focusableElements.length - 1] : null;
            this._foundation.open();
        }
        else {
            this._foundation.close();
        }
    };
    /**
     * Removes the menu-surface from it's current location and appends it to the
     * body to overcome any overflow:hidden issues.
     */
    /**
     * Removes the menu-surface from it's current location and appends it to the
     * body to overcome any overflow:hidden issues.
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype.setHoistToBody = /**
     * Removes the menu-surface from it's current location and appends it to the
     * body to overcome any overflow:hidden issues.
     * @protected
     * @return {?}
     */
    function () {
        if (!this.platform.isBrowser) {
            return;
        }
        /** @type {?} */
        var parentEl = this._getHostElement().parentElement;
        if (parentEl) {
            (/** @type {?} */ (document.body)).appendChild(parentEl.removeChild(this._getHostElement()));
            this._foundation.setIsHoisted(true);
        }
    };
    /**
     * @private
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._registerKeydownListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            return fromEvent(_this._getHostElement(), 'keydown').pipe(takeUntil(_this._destroy))
                .subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this._ngZone.run((/**
             * @return {?}
             */
            function () { return _this._foundation.handleKeydown(evt); })); }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._registerWindowClickListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.platform.isBrowser) {
            return;
        }
        this._windowClickSubscription =
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                return fromEvent(window, 'click')
                    .subscribe((/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) { return _this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this._foundation.handleBodyClick(evt);
                    _this._open = _this._foundation.isOpen();
                })); }));
            }));
    };
    /**
     * @private
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._deregisterWindowClickListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._windowClickSubscription) {
            this._windowClickSubscription.unsubscribe();
        }
    };
    /** Retrieves the DOM element of the component host. */
    /**
     * Retrieves the DOM element of the component host.
     * @protected
     * @return {?}
     */
    MdcMenuSurfaceBase.prototype._getHostElement = /**
     * Retrieves the DOM element of the component host.
     * @protected
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /** @nocollapse */
    MdcMenuSurfaceBase.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Platform },
        { type: NgZone, decorators: [{ type: Optional }] },
        { type: ElementRef }
    ]; };
    MdcMenuSurfaceBase.propDecorators = {
        open: [{ type: Input }],
        anchorElement: [{ type: Input }],
        anchorCorner: [{ type: Input }],
        quickOpen: [{ type: Input }],
        fixed: [{ type: Input }],
        coordinates: [{ type: Input }],
        anchorMargin: [{ type: Input }],
        hoistToBody: [{ type: Input }],
        opened: [{ type: Output }],
        closed: [{ type: Output }]
    };
    return MdcMenuSurfaceBase;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcMenuSurface = /** @class */ (function (_super) {
    __extends(MdcMenuSurface, _super);
    function MdcMenuSurface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    MdcMenuSurface.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initMenuSurface();
    };
    /**
     * @return {?}
     */
    MdcMenuSurface.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyMenuSurface();
    };
    MdcMenuSurface.decorators = [
        { type: Component, args: [{selector: 'mdc-menu-surface',
                    exportAs: 'mdcMenuSurface',
                    host: { 'class': 'mdc-menu-surface' },
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    return MdcMenuSurface;
}(MdcMenuSurfaceBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MdcMenuSurfaceAnchor = /** @class */ (function () {
    function MdcMenuSurfaceAnchor(elementRef) {
        this.elementRef = elementRef;
    }
    MdcMenuSurfaceAnchor.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcMenuSurfaceAnchor], mdc-menu-surface-anchor',
                    host: { 'class': 'mdc-menu-surface--anchor' }
                },] },
    ];
    /** @nocollapse */
    MdcMenuSurfaceAnchor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MdcMenuSurfaceAnchor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MENU_SURFACE_DECLARATIONS = [
    MdcMenuSurface,
    MdcMenuSurfaceAnchor
];
var MdcMenuSurfaceModule = /** @class */ (function () {
    function MdcMenuSurfaceModule() {
    }
    MdcMenuSurfaceModule.decorators = [
        { type: NgModule, args: [{
                    exports: [MENU_SURFACE_DECLARATIONS],
                    declarations: [MENU_SURFACE_DECLARATIONS]
                },] },
    ];
    return MdcMenuSurfaceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MdcMenuSurfaceModule, MdcMenuSurface, MdcMenuSurfaceBase, MdcMenuSurfaceAnchor };
//# sourceMappingURL=menu-surface.es5.js.map

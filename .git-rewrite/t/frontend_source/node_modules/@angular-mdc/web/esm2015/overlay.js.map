{"version":3,"file":"overlay.js","sources":["../../../packages/overlay/overlay-module.ts","../../../packages/overlay/overlay.ts","../../../packages/overlay/overlay-ref.ts","../../../packages/overlay/overlay-container.ts","../../../packages/overlay/overlay-config.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { PortalModule } from '@angular-mdc/web/portal';\r\nimport { Overlay } from './overlay';\r\n\r\nexport { ComponentType } from '@angular-mdc/web/portal';\r\n\r\n@NgModule({\r\n  imports: [PortalModule],\r\n  providers: [Overlay]\r\n})\r\nexport class OverlayModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DomPortalOutlet } from '@angular-mdc/web/portal';\r\nimport { DOCUMENT, Location } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n  Optional\r\n} from '@angular/core';\r\nimport { OverlayConfig } from './overlay-config';\r\nimport { OverlayContainer } from './overlay-container';\r\nimport { OverlayRef } from './overlay-ref';\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\r\n// it needs is different based on where OverlayModule is imported.\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\n@Injectable()\r\nexport class Overlay {\r\n  private _appRef?: ApplicationRef;\r\n\r\n  constructor(\r\n    /** Scrolling strategies that can be used when creating an overlay. */\r\n    private _overlayContainer: OverlayContainer,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _injector: Injector,\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) private _document: any,\r\n    // @breaking-change 8.0.0 `_location` parameter to be made required.\r\n    @Optional() private _location?: Location) { }\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param config Configuration applied to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(config?: OverlayConfig): OverlayRef {\r\n    const host = this._createHostElement();\r\n    const pane = this._createPaneElement(host);\r\n    const portalOutlet = this._createPortalOutlet(pane);\r\n    const overlayConfig = new OverlayConfig(config);\r\n\r\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\r\n      this._document, this._location);\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(host: HTMLElement): HTMLElement {\r\n    const pane = this._document.createElement('div');\r\n\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    host.appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Creates the host element that wraps around an overlay\r\n   * and can be used for advanced positioning.\r\n   * @returns Newly-create host element.\r\n   */\r\n  private _createHostElement(): HTMLElement {\r\n    const host = this._document.createElement('div');\r\n    this._overlayContainer.getContainerElement().appendChild(host);\r\n    return host;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal outlet.\r\n   * @returns A portal outlet for the given DOM element.\r\n   */\r\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\r\n    // We have to resolve the ApplicationRef later in order to allow people\r\n    // to use overlay-based providers during app initialization.\r\n    if (!this._appRef) {\r\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\r\n    }\r\n\r\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { ComponentPortal, Portal, PortalOutlet, TemplatePortal } from '@angular-mdc/web/portal';\r\nimport { ComponentRef, EmbeddedViewRef, NgZone } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { Observable, Subject, merge, SubscriptionLike, Subscription, Observer } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { OverlayConfig } from './overlay-config';\r\nimport { OverlayReference } from './overlay-reference';\r\n\r\n/** An object where all of its properties cannot be written. */\r\nexport type ImmutableObject<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalOutlet, OverlayReference {\r\n  private _attachments = new Subject<void>();\r\n  private _detachments = new Subject<void>();\r\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\r\n   * the `_host` to its original position in the DOM when it gets re-attached.\r\n   */\r\n  private _previousHostParent: HTMLElement | null = null;\r\n\r\n  constructor(\r\n    private _portalOutlet: PortalOutlet,\r\n    private _host: HTMLElement,\r\n    private _pane: HTMLElement,\r\n    private _config: ImmutableObject<OverlayConfig>,\r\n    private _ngZone: NgZone,\r\n    private _document: Document,\r\n    // @breaking-change 8.0.0 `_location` parameter to be made required.\r\n    private _location?: Location) { }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /**\r\n   * Wrapper around the panel element. Can be used for advanced\r\n   * positioning where a wrapper with specific styling is\r\n   * required around the overlay pane.\r\n   */\r\n  get hostElement(): HTMLElement {\r\n    return this._host;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /**\r\n   * Attaches content, given via a Portal, to the overlay.\r\n   * If the overlay is configured to have a backdrop, it will be created.\r\n   *\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    const attachResult = this._portalOutlet.attach(portal);\r\n\r\n    // Update the pane element with the given configuration.\r\n    if (!this._host.parentElement && this._previousHostParent) {\r\n      this._previousHostParent.appendChild(this._host);\r\n    }\r\n\r\n    this._updateStackingOrder();\r\n\r\n    // Enable pointer events for the overlay pane element.\r\n    this._togglePointerEvents(true);\r\n\r\n    // Only emit the `attachments` event once all other setup is done.\r\n    this._attachments.next();\r\n\r\n    // @breaking-change 8.0.0 remove the null check for `_location`\r\n    // once the constructor parameter is made required.\r\n    if (this._config.disposeOnNavigation && this._location) {\r\n      this._locationChanges = this._location.subscribe(() => this.dispose());\r\n    }\r\n\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns The portal detachment result.\r\n   */\r\n  detach(): any {\r\n    if (!this.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    // When the overlay is detached, the pane element should disable pointer events.\r\n    // This is necessary because otherwise the pane element will cover the page and disable\r\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n    this._togglePointerEvents(false);\r\n\r\n    const detachmentResult = this._portalOutlet.detach();\r\n\r\n    // Only emit after everything is detached.\r\n    this._detachments.next();\r\n\r\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\r\n    // rendered, even though it's transparent and unclickable which is why we remove it.\r\n    this._detachContentWhenStable();\r\n\r\n    // Stop listening for location changes.\r\n    this._locationChanges.unsubscribe();\r\n\r\n    return detachmentResult;\r\n  }\r\n\r\n  /** Cleans up the overlay from the DOM. */\r\n  dispose(): void {\r\n    const isAttached = this.hasAttached();\r\n\r\n    this._locationChanges.unsubscribe();\r\n    this._portalOutlet.dispose();\r\n    this._attachments.complete();\r\n\r\n    if (this._host && this._host.parentNode) {\r\n      this._host.parentNode.removeChild(this._host);\r\n      this._host = null!;\r\n    }\r\n\r\n    this._previousHostParent = this._pane = null!;\r\n\r\n    if (isAttached) {\r\n      this._detachments.next();\r\n    }\r\n\r\n    this._detachments.complete();\r\n  }\r\n\r\n  /** Whether the overlay has attached content. */\r\n  hasAttached(): boolean {\r\n    return this._portalOutlet.hasAttached();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been attached. */\r\n  attachments(): Observable<void> {\r\n    return this._attachments.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been detached. */\r\n  detachments(): Observable<void> {\r\n    return this._detachments.asObservable();\r\n  }\r\n\r\n  /** Gets the the current overlay configuration, which is immutable. */\r\n  getConfig(): OverlayConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /** Toggles the pointer events for the overlay pane element. */\r\n  private _togglePointerEvents(enablePointer: boolean) {\r\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\r\n  }\r\n\r\n  /**\r\n   * Updates the stacking order of the element, moving it to the top if necessary.\r\n   * This is required in cases where one overlay was detached, while another one,\r\n   * that should be behind it, was destroyed. The next time both of them are opened,\r\n   * the stacking will be wrong, because the detached element's pane will still be\r\n   * in its original DOM position.\r\n   */\r\n  private _updateStackingOrder() {\r\n    if (this._host.nextSibling) {\r\n      this._host.parentNode!.appendChild(this._host);\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay content next time the zone stabilizes. */\r\n  private _detachContentWhenStable() {\r\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\r\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\r\n    // be patched to run inside the zone, which will throw us into an infinite loop.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      // We can't remove the host here immediately, because the overlay pane's content\r\n      // might still be animating. This stream helps us avoid interrupting the animation\r\n      // by waiting for the pane to become empty.\r\n      const subscription = this._ngZone.onStable\r\n        .asObservable()\r\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\r\n        .subscribe(() => {\r\n          // Needs a couple of checks for the pane and host, because\r\n          // they may have been removed by the time the zone stabilizes.\r\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\r\n            if (this._host && this._host.parentElement) {\r\n              this._previousHostParent = this._host.parentElement;\r\n              this._previousHostParent.removeChild(this._host);\r\n            }\r\n\r\n            subscription.unsubscribe();\r\n          }\r\n        });\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOCUMENT } from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\n/** Container inside which all overlays will render. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class OverlayContainer implements OnDestroy {\r\n  protected _containerElement: HTMLElement | null = null;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any) { }\r\n\r\n  ngOnDestroy() {\r\n    if (this._containerElement && this._containerElement.parentNode) {\r\n      this._containerElement.parentNode.removeChild(this._containerElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method returns the overlay container element. It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement!;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    const container = this._document.createElement('div');\r\n\r\n    container.classList.add('cdk-overlay-container');\r\n    this._document.body!.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Initial configuration used when creating an overlay. */\r\nexport class OverlayConfig {\r\n  /**\r\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\r\n   * Note that this usually doesn't include clicking on links (unless the user is using\r\n   * the `HashLocationStrategy`).\r\n   */\r\n  disposeOnNavigation?: boolean = false;\r\n\r\n  constructor(config?: OverlayConfig) {\r\n    if (config) {\r\n      Object.keys(config).forEach(k => {\r\n        const key = k as keyof OverlayConfig;\r\n        if (typeof config[key] !== 'undefined') {\r\n          this[key] = config[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
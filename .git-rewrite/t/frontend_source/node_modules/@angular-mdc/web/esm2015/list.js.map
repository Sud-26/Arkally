{"version":3,"file":"list.js","sources":["../../../packages/list/list-module.ts","../../../packages/list/list-divider.ts","../../../packages/list/list.ts","../../../node_modules/@material/list/index.js","../../../node_modules/@material/list/foundation.js","../../../node_modules/@material/list/adapter.js","../../../node_modules/@material/base/component.js","../../../node_modules/@material/base/foundation.js","../../../node_modules/@material/dom/ponyfill.js","../../../node_modules/@material/list/constants.js","../../../packages/list/list-item.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MdcListDivider } from './list-divider';\r\nimport {\r\n  MdcList,\r\n  MdcListGroup,\r\n  MdcListGroupSubheader\r\n} from './list';\r\nimport {\r\n  MdcListItem,\r\n  MdcListItemGraphic,\r\n  MdcListItemMeta,\r\n  MdcListItemSecondary,\r\n  MdcListItemText\r\n} from './list-item';\r\n\r\nconst LIST_DECLARATIONS = [\r\n  MdcList,\r\n  MdcListDivider,\r\n  MdcListGroup,\r\n  MdcListGroupSubheader,\r\n  MdcListItem,\r\n  MdcListItemGraphic,\r\n  MdcListItemMeta,\r\n  MdcListItemSecondary,\r\n  MdcListItemText\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: LIST_DECLARATIONS,\r\n  declarations: LIST_DECLARATIONS,\r\n})\r\nexport class MdcListModule { }\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { toBoolean } from '@angular-mdc/web/common';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mdcListDivider], mdc-list-divider',\r\n  exportAs: 'mdcListDivider',\r\n  host: {\r\n    'role': 'separator',\r\n    'class': 'mdc-list-divider',\r\n    '[class.mdc-list-divider--inset]': 'inset',\r\n    '[class.mdc-list-divider--padded]': 'padded'\r\n  },\r\n  template: '',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcListDivider {\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) {\r\n    this._inset = toBoolean(value);\r\n  }\r\n  private _inset: boolean = false;\r\n\r\n  @Input()\r\n  get padded(): boolean { return this._padded; }\r\n  set padded(value: boolean) {\r\n    this._padded = toBoolean(value);\r\n  }\r\n  private _padded: boolean = false;\r\n\r\n  constructor(public elementRef: ElementRef) { }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { merge, Observable, Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\n\r\nimport { toBoolean, Platform } from '@angular-mdc/web/common';\r\n\r\nimport { MdcListItem, MdcListSelectionChange, MDC_LIST_PARENT_COMPONENT } from './list-item';\r\n\r\nimport { cssClasses, strings } from '@material/list/constants';\r\nimport { matches } from '@material/dom/ponyfill';\r\nimport { MDCListFoundation } from '@material/list/index';\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MdcListItemChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MdcList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MdcListItem) { }\r\n}\r\n\r\n/** Notifies user action on list item including keyboard and mouse actions. */\r\nexport interface MdcListItemAction {\r\n  index: number;\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mdcListGroup], mdc-list-group',\r\n  exportAs: 'mdcListGroup',\r\n  host: { 'class': 'mdc-list-group' },\r\n  template: `\r\n  <h3 class=\"mdc-list-group__subheader\" *ngIf=\"subheader\">{{subheader}}</h3>\r\n  <ng-content></ng-content>`,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcListGroup {\r\n  @Input() subheader?: string;\r\n\r\n  constructor(public elementRef: ElementRef) { }\r\n}\r\n\r\n@Directive({\r\n  selector: '[mdcListGroupSubheader], mdc-list-group-subheader',\r\n  exportAs: 'mdcListGroupSubheader',\r\n  host: { 'class': 'mdc-list-group__subheader' }\r\n})\r\nexport class MdcListGroupSubheader {\r\n  constructor(public elementRef: ElementRef) { }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-list',\r\n  exportAs: 'mdcList',\r\n  host: {\r\n    'role': 'list',\r\n    'class': 'mdc-list',\r\n    '[attr.aria-orientation]': 'verticalOrientation ? \"vertical\" : \"horizontal\"',\r\n    '[class.mdc-list--dense]': 'dense',\r\n    '[class.mdc-list--avatar-list]': 'avatar',\r\n    '[class.ngx-mdc-list--border]': 'border',\r\n    '[class.mdc-list--non-interactive]': '!interactive',\r\n    '[class.mdc-list--two-line]': 'twoLine',\r\n    '(click)': '_handleClickEvent($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(focusin)': '_onFocusIn($event)',\r\n    '(focusout)': '_onFocusOut($event)'\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [{ provide: MDC_LIST_PARENT_COMPONENT, useExisting: MdcList }]\r\n})\r\nexport class MdcList implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get twoLine(): boolean { return this._twoLine; }\r\n  set twoLine(value: boolean) {\r\n    this._twoLine = toBoolean(value);\r\n  }\r\n  private _twoLine: boolean = false;\r\n\r\n  @Input()\r\n  get dense(): boolean { return this._dense; }\r\n  set dense(value: boolean) {\r\n    this._dense = toBoolean(value);\r\n  }\r\n  private _dense: boolean = false;\r\n\r\n  @Input()\r\n  get border(): boolean { return this._border; }\r\n  set border(value: boolean) {\r\n    this._border = toBoolean(value);\r\n  }\r\n  private _border: boolean = false;\r\n\r\n  @Input()\r\n  get avatar(): boolean { return this._avatar; }\r\n  set avatar(value: boolean) {\r\n    this._avatar = toBoolean(value);\r\n  }\r\n  private _avatar: boolean = false;\r\n\r\n  @Input()\r\n  get interactive(): boolean { return this._interactive; }\r\n  set interactive(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._interactive) {\r\n      this._interactive = newValue;\r\n    }\r\n  }\r\n  private _interactive: boolean = true;\r\n\r\n  @Input()\r\n  get disableRipple(): boolean { return this._disableRipple; }\r\n  set disableRipple(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._disableRipple) {\r\n      this._disableRipple = newValue;\r\n    }\r\n  }\r\n  private _disableRipple: boolean = false;\r\n\r\n  @Input()\r\n  get singleSelection(): boolean | undefined { return this._singleSelection; }\r\n  set singleSelection(value: boolean | undefined) {\r\n    if (value !== undefined) {\r\n      const newValue = toBoolean(value);\r\n\r\n      if (newValue !== this._singleSelection) {\r\n        this._singleSelection = newValue;\r\n        this._foundation.setSingleSelection(this._singleSelection);\r\n\r\n        if (this.getSelectedIndex() > -1) {\r\n          this.setSelectedIndex(this.getSelectedIndex());\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n      }\r\n    }\r\n  }\r\n  private _singleSelection: boolean | undefined;\r\n\r\n  @Input()\r\n  get useActivatedClass(): boolean { return this._useActivatedClass; }\r\n  set useActivatedClass(value: boolean) {\r\n    this._useActivatedClass = toBoolean(value);\r\n    this._foundation.setUseActivatedClass(this._useActivatedClass);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _useActivatedClass: boolean = false;\r\n\r\n  @Input()\r\n  get useSelectedClass(): boolean { return this._useSelectedClass; }\r\n  set useSelectedClass(value: boolean) {\r\n    this._useSelectedClass = toBoolean(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _useSelectedClass: boolean = false;\r\n\r\n  @Input()\r\n  get verticalOrientation(): boolean { return this._verticalOrientation; }\r\n  set verticalOrientation(value: boolean) {\r\n    this._verticalOrientation = toBoolean(value);\r\n    this._foundation.setVerticalOrientation(this._verticalOrientation);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _verticalOrientation: boolean = true;\r\n\r\n  @Input()\r\n  get wrapFocus(): boolean { return this._wrapFocus; }\r\n  set wrapFocus(value: boolean) {\r\n    this._wrapFocus = toBoolean(value);\r\n    this._foundation.setWrapFocus(this._wrapFocus);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _wrapFocus: boolean = false;\r\n\r\n  @ContentChildren(MdcListItem, { descendants: true }) items!: QueryList<MdcListItem>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MdcListItemChange> =\r\n    new EventEmitter<MdcListItemChange>();\r\n\r\n  /** Emits an event for keyboard and mouse actions. */\r\n  @Output() readonly actionEvent: EventEmitter<MdcListItemAction> =\r\n    new EventEmitter<MdcListItemAction>();\r\n\r\n  /** Subscription to changes in list items. */\r\n  private _changeSubscription: Subscription | null = null;\r\n\r\n  /** Subscription to selection events in list items. */\r\n  private itemSelectionSubscription: Subscription | null = null;\r\n\r\n  /** Combined stream of all of the list item selection events. */\r\n  get listItemSelections(): Observable<MdcListSelectionChange> {\r\n    return merge(...this.items.map(item => item.selectionChange));\r\n  }\r\n\r\n  private _createAdapter() {\r\n    return {\r\n      getListItemCount: () => this.items.length,\r\n      getFocusedElementIndex: () => {\r\n        if (!this._platform.isBrowser && document.activeElement!) { return -1; }\r\n        return this.items.toArray().findIndex(_ => _.getListItemElement() === document.activeElement!) || -1;\r\n      },\r\n      setAttributeForElementIndex: (index: number, attr: string, value: string) => {\r\n        const item = this.getListItemByIndex(index);\r\n        if (item) {\r\n          item.getListItemElement().setAttribute(attr, value);\r\n        }\r\n      },\r\n      removeAttributeForElementIndex: (index: number, attr: string) =>\r\n        this.items.toArray()[index].getListItemElement().removeAttribute(attr),\r\n      addClassForElementIndex: (index: number, className: string) =>\r\n        this.items.toArray()[index].getListItemElement().classList.add(className),\r\n      removeClassForElementIndex: (index: number, className: string) => {\r\n        const item = this.getListItemByIndex(index);\r\n        if (item) {\r\n          item.getListItemElement().classList.remove(className);\r\n        }\r\n      },\r\n      focusItemAtIndex: (index: number) => this.focusItemAtIndex(index),\r\n      setTabIndexForListItemChildren: (listItemIndex: number, tabIndexValue: number) => {\r\n        const listItemChildren = [].slice.call(this.items.toArray()[listItemIndex].getListItemElement()\r\n          .querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\r\n        listItemChildren.forEach((ele: Element) => ele.setAttribute('tabindex', `${tabIndexValue}`));\r\n      },\r\n      hasCheckboxAtIndex: (index: number) => {\r\n        const listItem = this.items.toArray()[index].getListItemElement();\r\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\r\n      },\r\n      hasRadioAtIndex: (index: number) => {\r\n        const listItem = this.items.toArray()[index].getListItemElement();\r\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\r\n      },\r\n      isCheckboxCheckedAtIndex: (index: number) => {\r\n        const listItem = this.items.toArray()[index].getListItemElement();\r\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\r\n        return toggleEl.checked;\r\n      },\r\n      setCheckedCheckboxOrRadioAtIndex: (index: number, isChecked: boolean) => {\r\n        const listItem = this.items.toArray()[index].getListItemElement();\r\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\r\n        toggleEl.checked = isChecked;\r\n\r\n        if (this._platform.isBrowser) {\r\n          const event = document.createEvent('Event');\r\n          event.initEvent('change', true, true);\r\n          toggleEl.dispatchEvent(event);\r\n        }\r\n      },\r\n      isFocusInsideList: () => this._platform.isBrowser ?\r\n        this.elementRef.nativeElement.contains(document.activeElement) : false,\r\n      notifyAction: (index: number) => {\r\n        this.actionEvent.emit({ index: index });\r\n      }\r\n    };\r\n  }\r\n\r\n  private _foundation: {\r\n    init(): void,\r\n    destroy(): void,\r\n    layout(): void,\r\n    setVerticalOrientation(vertical: boolean): void,\r\n    setWrapFocus(wrapFocus: boolean): void,\r\n    handleClick(index: number, toggleCheckbox: boolean): void,\r\n    handleKeydown(evt: KeyboardEvent, isRootListItem: boolean, listItemIndex: number): void,\r\n    handleFocusIn(evt: FocusEvent, listItemIndex: number): void,\r\n    handleFocusOut(evt: FocusEvent, listItemIndex: number): void,\r\n    focusNextElement(index: number): number,\r\n    focusPrevElement(index: number): number,\r\n    focusFirstElement(): number,\r\n    focusLastElement(): number,\r\n    setSelectedIndex(index: number): void,\r\n    setSingleSelection(isSingleSelectionList: boolean): void,\r\n    setUseActivatedClass(useActivated: boolean): void\r\n  } = new MDCListFoundation(this._createAdapter());\r\n\r\n  constructor(\r\n    private _platform: Platform,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    public elementRef: ElementRef) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._foundation.init();\r\n    this._foundation.layout();\r\n\r\n    // When list items change, re-subscribe\r\n    this._changeSubscription = this.items.changes.pipe(startWith(null))\r\n      .subscribe(() => {\r\n        if (this.items.length) {\r\n          this._resetListItems();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._dropSubscriptions();\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n\r\n    this._foundation.destroy();\r\n  }\r\n\r\n  setSelectedIndex(index: number): void {\r\n    this.reset();\r\n    this._foundation.setSelectedIndex(index);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n\r\n    const selectedItem = this.items.toArray()[index];\r\n    if (selectedItem) {\r\n      this._applySelectionState(selectedItem);\r\n    }\r\n  }\r\n\r\n  setSelectedValue(value: any): void {\r\n    this.reset();\r\n    if (value === null) {\r\n      return;\r\n    }\r\n\r\n    const selectedItem = this.getListItemByValue(value);\r\n    this._foundation.setSelectedIndex(this.getListItemIndexByValue(value));\r\n    if (selectedItem) {\r\n      this._applySelectionState(selectedItem);\r\n    }\r\n  }\r\n\r\n  getSelectedItem(): MdcListItem | undefined {\r\n    return this.items ? this.items.toArray().find(_ => _.selected || _.activated) : undefined;\r\n  }\r\n\r\n  getSelectedIndex(): number {\r\n    return this.items ? this.items.toArray().findIndex(_ => _.selected || _.activated) : -1;\r\n  }\r\n\r\n  getSelectedValue(): any {\r\n    const item = this.items ? this.items.find(_ => _.selected) : null;\r\n    return item && item.value ? item.value : null;\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    const selectedItem = this.getSelectedItem();\r\n    return selectedItem && selectedItem.getListItemElement().textContent || '';\r\n  }\r\n\r\n  getListItemByValue(value: any): MdcListItem | undefined {\r\n    return this.items ? this.items.toArray().find(_ => _.value === value) : undefined;\r\n  }\r\n\r\n  getListItemByIndex(index: number): MdcListItem | undefined {\r\n    return this.items ? this.items.toArray()[index] : undefined;\r\n  }\r\n\r\n  getListItemIndexByValue(value: any): number {\r\n    return this.items ? this.items.toArray().findIndex(_ => _.value === value) : -1;\r\n  }\r\n\r\n  focusItemAtIndex(index: number): void {\r\n    this.items.toArray()[index].getListItemElement().focus();\r\n  }\r\n\r\n  focusFirstElement(): number {\r\n    return this._foundation.focusFirstElement();\r\n  }\r\n\r\n  focusLastElement(): number {\r\n    return this._foundation.focusLastElement();\r\n  }\r\n\r\n  focusNextElement(index: number): number {\r\n    return this._foundation.focusNextElement(index);\r\n  }\r\n\r\n  focusPrevElement(index: number): number {\r\n    return this._foundation.focusPrevElement(index);\r\n  }\r\n\r\n  setRole(role: string): void {\r\n    this._getHostElement().setAttribute('role', role);\r\n  }\r\n\r\n  reset(): void {\r\n    this.items.forEach(_ => {\r\n      _.selected = false;\r\n      _.activated = false;\r\n    });\r\n  }\r\n\r\n  private _applySelectionState(item: MdcListItem): void {\r\n    if (this.useActivatedClass) {\r\n      item.activated = true;\r\n    } else if (this.useSelectedClass) {\r\n      item.selected = true;\r\n    }\r\n  }\r\n\r\n  private _resetListItems() {\r\n    this._dropSubscriptions();\r\n    this._listenForListItemSelection();\r\n  }\r\n\r\n  private _dropSubscriptions() {\r\n    if (this.itemSelectionSubscription) {\r\n      this.itemSelectionSubscription.unsubscribe();\r\n      this.itemSelectionSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to selected events on each list item. */\r\n  private _listenForListItemSelection(): void {\r\n    this.itemSelectionSubscription = this.listItemSelections.subscribe(event => {\r\n      if (this.singleSelection) {\r\n        this.items.filter(_ => _.id !== event.source.id && (_.activated || _.selected))\r\n          .forEach(_ => {\r\n            _.selected = false;\r\n            _.activated = false;\r\n          });\r\n      }\r\n\r\n      this._applySelectionState(event.source);\r\n\r\n      if (!this.singleSelection) {\r\n        event.source.ripple.handleBlur();\r\n      }\r\n      this.selectionChange.emit(new MdcListItemChange(this, event.source));\r\n    });\r\n  }\r\n\r\n  _onFocusIn(evt: FocusEvent): void {\r\n    const index = this._getListItemIndexByEvent(evt);\r\n    this._foundation.handleFocusIn(evt, index);\r\n  }\r\n\r\n  _onFocusOut(evt: FocusEvent): void {\r\n    const index = this._getListItemIndexByEvent(evt);\r\n\r\n    if (index >= 0) {\r\n      this._foundation.handleFocusOut(evt, index);\r\n    }\r\n  }\r\n\r\n  _onKeydown(evt: KeyboardEvent): void {\r\n    const index = this._getListItemIndexByEvent(evt);\r\n\r\n    if (index >= 0) {\r\n      this._foundation.handleKeydown(evt, (<any>evt.target).classList.contains(cssClasses.LIST_ITEM_CLASS), index);\r\n    }\r\n  }\r\n\r\n  _handleClickEvent(evt: MouseEvent): void {\r\n    const index = this._getListItemIndexByEvent(evt);\r\n\r\n    const listItem = this._getListItemByEventTarget(evt.target!);\r\n    if (listItem && listItem.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\r\n    const toggleCheckbox = !matches((evt.target), strings.CHECKBOX_RADIO_SELECTOR);\r\n    this._foundation.handleClick(index, toggleCheckbox);\r\n  }\r\n\r\n  private _getListItemByEventTarget(target: EventTarget): MdcListItem | undefined {\r\n    return this.items.toArray().find(_ => _.getListItemElement() === target);\r\n  }\r\n\r\n  private _getListItemIndexByEvent(evt: Event): number {\r\n    return this.items.toArray().findIndex(_ => _.getListItemElement() === evt.target);\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  private _getHostElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCListFoundation from './foundation';\nimport MDCListAdapter from './adapter';\nimport {matches} from '@material/dom/ponyfill';\nimport {cssClasses, strings, Index} from './constants'; // eslint-disable-line no-unused-vars\n\n/**\n * @extends MDCComponent<!MDCListFoundation>\n */\nclass MDCList extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n    /** @private {!Function} */\n    this.handleKeydown_;\n    /** @private {!Function} */\n    this.handleClick_;\n    /** @private {!Function} */\n    this.focusInEventListener_;\n    /** @private {!Function} */\n    this.focusOutEventListener_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCList}\n   */\n  static attachTo(root) {\n    return new MDCList(root);\n  }\n\n  destroy() {\n    this.root_.removeEventListener('keydown', this.handleKeydown_);\n    this.root_.removeEventListener('click', this.handleClick_);\n    this.root_.removeEventListener('focusin', this.focusInEventListener_);\n    this.root_.removeEventListener('focusout', this.focusOutEventListener_);\n  }\n\n  initialSyncWithDOM() {\n    this.handleClick_ = this.handleClickEvent_.bind(this);\n    this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\n    this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\n    this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\n    this.root_.addEventListener('keydown', this.handleKeydown_);\n    this.root_.addEventListener('focusin', this.focusInEventListener_);\n    this.root_.addEventListener('focusout', this.focusOutEventListener_);\n    this.root_.addEventListener('click', this.handleClick_);\n    this.layout();\n    this.initializeListType();\n  }\n\n  layout() {\n    const direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);\n    this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;\n\n    // List items need to have at least tabindex=-1 to be focusable.\n    [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])'))\n      .forEach((ele) => {\n        ele.setAttribute('tabindex', -1);\n      });\n\n    // Child button/a elements are not tabbable until the list item is focused.\n    [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS))\n      .forEach((ele) => ele.setAttribute('tabindex', -1));\n\n    this.foundation_.layout();\n  }\n\n  /**\n   * Used to figure out which list item this event is targetting. Or returns -1 if\n   * there is no list item\n   * @param {Event} evt\n   * @private\n   */\n  getListItemIndex_(evt) {\n    let eventTarget = /** @type {HTMLElement} */ (evt.target);\n    let index = -1;\n\n    // Find the first ancestor that is a list item or the list.\n    while (!eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS)\n    && !eventTarget.classList.contains(cssClasses.ROOT)) {\n      eventTarget = eventTarget.parentElement;\n    }\n\n    // Get the index of the element if it is a list item.\n    if (eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS)) {\n      index = this.listElements.indexOf(eventTarget);\n    }\n\n    return index;\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleFocusInEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusIn(evt, index);\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleFocusOutEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusOut(evt, index);\n  }\n\n  /**\n   * Used to figure out which element was focused when keydown event occurred before sending the event to the\n   * foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleKeydownEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n\n    if (index >= 0) {\n      this.foundation_.handleKeydown(evt, evt.target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);\n    }\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleClickEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n\n    // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\n    const toggleCheckbox = !matches(/** @type {!Element} */ (evt.target), strings.CHECKBOX_RADIO_SELECTOR);\n    this.foundation_.handleClick(index, toggleCheckbox);\n  }\n\n  /**\n   * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\n   */\n  initializeListType() {\n    const checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n    const singleSelectedListItem = this.root_.querySelector(`.${cssClasses.LIST_ITEM_ACTIVATED_CLASS},\n        .${cssClasses.LIST_ITEM_SELECTED_CLASS}`);\n    const radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n\n    if (checkboxListItems.length) {\n      const preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n      this.selectedIndex = [].map.call(preselectedItems, (listItem) => this.listElements.indexOf(listItem));\n    } else if (singleSelectedListItem) {\n      if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\n        this.foundation_.setUseActivatedClass(true);\n      }\n\n      this.singleSelection = true;\n      this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\n    } else if (radioSelectedListItem) {\n      this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n    }\n  }\n\n  /** @param {boolean} value */\n  set vertical(value) {\n    this.foundation_.setVerticalOrientation(value);\n  }\n\n  /** @return Array<!Element>*/\n  get listElements() {\n    return [].slice.call(this.root_.querySelectorAll(strings.ENABLED_ITEMS_SELECTOR));\n  }\n\n  /** @param {boolean} value */\n  set wrapFocus(value) {\n    this.foundation_.setWrapFocus(value);\n  }\n\n  /** @param {boolean} isSingleSelectionList */\n  set singleSelection(isSingleSelectionList) {\n    this.foundation_.setSingleSelection(isSingleSelectionList);\n  }\n\n  /** @return {!Index} */\n  get selectedIndex() {\n    return this.foundation_.getSelectedIndex();\n  }\n\n  /** @param {!Index} index */\n  set selectedIndex(index) {\n    this.foundation_.setSelectedIndex(index);\n  }\n\n  /** @return {!MDCListFoundation} */\n  getDefaultFoundation() {\n    return new MDCListFoundation(/** @type {!MDCListAdapter} */ (Object.assign({\n      getListItemCount: () => this.listElements.length,\n      getFocusedElementIndex: () => this.listElements.indexOf(document.activeElement),\n      setAttributeForElementIndex: (index, attr, value) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.setAttribute(attr, value);\n        }\n      },\n      removeAttributeForElementIndex: (index, attr) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.removeAttribute(attr);\n        }\n      },\n      addClassForElementIndex: (index, className) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.classList.add(className);\n        }\n      },\n      removeClassForElementIndex: (index, className) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.classList.remove(className);\n        }\n      },\n      focusItemAtIndex: (index) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.focus();\n        }\n      },\n      setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {\n        const element = this.listElements[listItemIndex];\n        const listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\n        listItemChildren.forEach((ele) => ele.setAttribute('tabindex', tabIndexValue));\n      },\n      hasCheckboxAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n      },\n      hasRadioAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\n      },\n      isCheckboxCheckedAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n        return toggleEl.checked;\n      },\n      setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {\n        const listItem = this.listElements[index];\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n        toggleEl.checked = isChecked;\n\n        const event = document.createEvent('Event');\n        event.initEvent('change', true, true);\n        toggleEl.dispatchEvent(event);\n      },\n      notifyAction: (index) => {\n        this.emit(strings.ACTION_EVENT, index, /** shouldBubble */ true);\n      },\n      isFocusInsideList: () => {\n        return this.root_.contains(document.activeElement);\n      },\n    })));\n  }\n}\n\nexport {MDCList, MDCListFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCListAdapter from './adapter';\nimport {strings, cssClasses, Index} from './constants'; // eslint-disable-line no-unused-vars\n\nconst ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\n\nclass MDCListFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCListAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCListAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCListAdapter} */ ({\n      getListItemCount: () => {},\n      getFocusedElementIndex: () => {},\n      setAttributeForElementIndex: () => {},\n      removeAttributeForElementIndex: () => {},\n      addClassForElementIndex: () => {},\n      removeClassForElementIndex: () => {},\n      focusItemAtIndex: () => {},\n      setTabIndexForListItemChildren: () => {},\n      hasRadioAtIndex: () => {},\n      hasCheckboxAtIndex: () => {},\n      isCheckboxCheckedAtIndex: () => {},\n      setCheckedCheckboxOrRadioAtIndex: () => {},\n      notifyAction: () => {},\n      isFocusInsideList: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCListAdapter=} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCListFoundation.defaultAdapter, adapter));\n    /** @private {boolean} */\n    this.wrapFocus_ = false;\n\n    /** @private {boolean} */\n    this.isVertical_ = true;\n\n    /** @private {boolean} */\n    this.isSingleSelectionList_ = false;\n\n    /** @private {!Index} */\n    this.selectedIndex_ = -1;\n\n    /** @private {number} */\n    this.focusedItemIndex_ = -1;\n\n    /** @private {boolean} */\n    this.useActivatedClass_ = false;\n\n    /** @private {boolean} */\n    this.isCheckboxList_ = false;\n\n    /** @private {boolean} */\n    this.isRadioList_ = false;\n  }\n\n  layout() {\n    if (this.adapter_.getListItemCount() === 0) return;\n\n    if (this.adapter_.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList_ = true;\n    } else if (this.adapter_.hasRadioAtIndex(0)) {\n      this.isRadioList_ = true;\n    }\n  }\n\n  /**\n   * Sets the private wrapFocus_ variable.\n   * @param {boolean} value\n   */\n  setWrapFocus(value) {\n    this.wrapFocus_ = value;\n  }\n\n  /**\n   * Sets the isVertical_ private variable.\n   * @param {boolean} value\n   */\n  setVerticalOrientation(value) {\n    this.isVertical_ = value;\n  }\n\n  /**\n   * Sets the isSingleSelectionList_ private variable.\n   * @param {boolean} value\n   */\n  setSingleSelection(value) {\n    this.isSingleSelectionList_ = value;\n  }\n\n  /**\n   * Sets the useActivatedClass_ private variable.\n   * @param {boolean} useActivated\n   */\n  setUseActivatedClass(useActivated) {\n    this.useActivatedClass_ = useActivated;\n  }\n\n  /** @return {!Index} */\n  getSelectedIndex() {\n    return this.selectedIndex_;\n  }\n\n  /** @param {!Index} index */\n  setSelectedIndex(index) {\n    if (!this.isIndexValid_(index)) return;\n\n    if (this.isCheckboxList_) {\n      this.setCheckboxAtIndex_(/** @type {!Array<number>} */ (index));\n    } else if (this.isRadioList_) {\n      this.setRadioAtIndex_(/** @type {number} */ (index));\n    } else {\n      this.setSingleSelectionAtIndex_(/** @type {number} */ (index));\n    }\n  }\n\n  /**\n   * Focus in handler for the list items.\n   * @param evt\n   * @param {number} listItemIndex\n   */\n  handleFocusIn(evt, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, 0);\n    }\n  }\n\n  /**\n   * Focus out handler for the list items.\n   * @param {Event} evt\n   * @param {number} listItemIndex\n   */\n  handleFocusOut(evt, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, -1);\n    }\n\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\n     * is moved to next element.\n     */\n    setTimeout(() => {\n      if (!this.adapter_.isFocusInsideList()) {\n        this.setTabindexToFirstSelectedItem_();\n      }\n    }, 0);\n  }\n\n  /**\n   * Key handler for the list.\n   * @param {Event} evt\n   * @param {boolean} isRootListItem\n   * @param {number} listItemIndex\n   */\n  handleKeydown(evt, isRootListItem, listItemIndex) {\n    const arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;\n    const arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;\n    const arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;\n    const arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;\n    const isHome = evt.key === 'Home' || evt.keyCode === 36;\n    const isEnd = evt.key === 'End' || evt.keyCode === 35;\n    const isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n    const isSpace = evt.key === 'Space' || evt.keyCode === 32;\n\n    let currentIndex = this.adapter_.getFocusedElementIndex();\n    let nextIndex = -1;\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    if ((this.isVertical_ && arrowDown) || (!this.isVertical_ && arrowRight)) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusNextElement(currentIndex);\n    } else if ((this.isVertical_ && arrowUp) || (!this.isVertical_ && arrowLeft)) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusFirstElement();\n    } else if (isEnd) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusLastElement();\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n        if (evt.target.tagName === 'A' && isEnter) return;\n        this.preventDefaultEvent_(evt);\n\n        if (this.isSelectableList_()) {\n          this.setSelectedIndexOnAction_(currentIndex);\n        }\n\n        this.adapter_.notifyAction(currentIndex);\n      }\n    }\n\n    this.focusedItemIndex_ = currentIndex;\n\n    if (nextIndex >= 0) {\n      this.setTabindexAtIndex_(nextIndex);\n      this.focusedItemIndex_ = nextIndex;\n    }\n  }\n\n  /**\n   * Click handler for the list.\n   * @param {number} index\n   * @param {boolean} toggleCheckbox\n   */\n  handleClick(index, toggleCheckbox) {\n    if (index === -1) return;\n\n    if (this.isSelectableList_()) {\n      this.setSelectedIndexOnAction_(index, toggleCheckbox);\n    }\n\n    this.adapter_.notifyAction(index);\n\n    this.setTabindexAtIndex_(index);\n    this.focusedItemIndex_ = index;\n  }\n\n  /**\n   * Ensures that preventDefault is only called if the containing element doesn't\n   * consume the event, and it will cause an unintended scroll.\n   * @param {Event} evt\n   * @private\n   */\n  preventDefaultEvent_(evt) {\n    const tagName = `${evt.target.tagName}`.toLowerCase();\n    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n      evt.preventDefault();\n    }\n  }\n\n  /**\n   * Focuses the next element on the list.\n   * @param {number} index\n   * @return {number}\n   */\n  focusNextElement(index) {\n    const count = this.adapter_.getListItemCount();\n    let nextIndex = index + 1;\n    if (nextIndex >= count) {\n      if (this.wrapFocus_) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n    this.adapter_.focusItemAtIndex(nextIndex);\n\n    return nextIndex;\n  }\n\n  /**\n   * Focuses the previous element on the list.\n   * @param {number} index\n   * @return {number}\n   */\n  focusPrevElement(index) {\n    let prevIndex = index - 1;\n    if (prevIndex < 0) {\n      if (this.wrapFocus_) {\n        prevIndex = this.adapter_.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n    this.adapter_.focusItemAtIndex(prevIndex);\n\n    return prevIndex;\n  }\n\n  /**\n   * @return {number}\n   */\n  focusFirstElement() {\n    this.adapter_.focusItemAtIndex(0);\n    return 0;\n  }\n\n  /**\n   * @return {number}\n   */\n  focusLastElement() {\n    const lastIndex = this.adapter_.getListItemCount() - 1;\n    this.adapter_.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  setSingleSelectionAtIndex_(index) {\n    let selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n    if (this.useActivatedClass_) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n\n    if (this.selectedIndex_ >= 0 && this.selectedIndex_ !== index) {\n      this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_SELECTED, 'false');\n    }\n\n    this.adapter_.addClassForElementIndex(index, selectedClassName);\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_SELECTED, 'true');\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\n   * @param {number} index\n   * @private\n   */\n  setRadioAtIndex_(index) {\n    this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);\n\n    if (this.selectedIndex_ >= 0) {\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * @param {!Array<number>} index\n   * @private\n   */\n  setCheckboxAtIndex_(index) {\n    for (let i = 0; i < this.adapter_.getListItemCount(); i++) {\n      let isChecked = false;\n      if (index.indexOf(i) >= 0) {\n        isChecked = true;\n      }\n\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n      this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n    }\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  setTabindexAtIndex_(index) {\n    if (this.focusedItemIndex_ === -1 && index !== 0) {\n      // If no list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n      this.adapter_.setAttributeForElementIndex(0, 'tabindex', -1);\n    } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n      this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', -1);\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, 'tabindex', 0);\n  }\n\n  /**\n   * @return {boolean} Return true if it is single selectin list, checkbox list or radio list.\n   * @private\n   */\n  isSelectableList_() {\n    return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n  }\n\n  /** @private */\n  setTabindexToFirstSelectedItem_() {\n    let targetIndex = 0;\n\n    if (this.isSelectableList_()) {\n      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== -1) {\n        targetIndex = this.selectedIndex_;\n      } else if (this.selectedIndex_ instanceof Array && this.selectedIndex_.length > 0) {\n        targetIndex = this.selectedIndex_.reduce((currentIndex, minIndex) => Math.min(currentIndex, minIndex));\n      }\n    }\n\n    this.setTabindexAtIndex_(targetIndex);\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {boolean}\n   * @private\n   */\n  isIndexValid_(index) {\n    if (index instanceof Array) {\n      if (!this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some((i) => this.isIndexInRange_(i));\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n      }\n      return this.isIndexInRange_(index);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @return {boolean}\n   * @private\n   */\n  isIndexInRange_(index) {\n    const listSize = this.adapter_.getListItemCount();\n    return index >= 0 && index < listSize;\n  }\n\n  /**\n   * @param {number} index\n   * @param {boolean=} toggleCheckbox\n   * @private\n   */\n  setSelectedIndexOnAction_(index, toggleCheckbox = true) {\n    if (this.isCheckboxList_) {\n      this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n    } else {\n      this.setSelectedIndex(index);\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @param {boolean} toggleCheckbox\n   * @private\n   */\n  toggleCheckboxAtIndex_(index, toggleCheckbox) {\n    let isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);\n\n    if (toggleCheckbox) {\n      isChecked = !isChecked;\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n\n    // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n    if (this.selectedIndex_ === -1) {\n      this.selectedIndex_ = [];\n    }\n\n    if (isChecked) {\n      this.selectedIndex_.push(index);\n    } else {\n      this.selectedIndex_ = this.selectedIndex_.filter((i) => i !== index);\n    }\n  }\n}\n\nexport default MDCListFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC List. Provides an interface for managing focus.\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCListAdapter {\n  /** @return {number} */\n  getListItemCount() {}\n\n  /**\n   * @return {number} */\n  getFocusedElementIndex() {}\n\n  /**\n   * @param {number} index\n   * @param {string} attribute\n   * @param {string} value\n   */\n  setAttributeForElementIndex(index, attribute, value) {}\n\n  /**\n   * @param {number} index\n   * @param {string} attribute\n   */\n  removeAttributeForElementIndex(index, attribute) {}\n\n  /**\n   * @param {number} index\n   * @param {string} className\n   */\n  addClassForElementIndex(index, className) {}\n\n  /**\n   * @param {number} index\n   * @param {string} className\n   */\n  removeClassForElementIndex(index, className) {}\n\n  /**\n   * Focuses list item at the index specified.\n   * @param {number} index\n   */\n  focusItemAtIndex(index) {}\n\n  /**\n   * Sets the tabindex to the value specified for all button/a element children of\n   * the list item at the index specified.\n   * @param {number} listItemIndex\n   * @param {number} tabIndexValue\n   */\n  setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if radio button is present at given list item index.\n   */\n  hasRadioAtIndex(index) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if checkbox is present at given list item index.\n   */\n  hasCheckboxAtIndex(index) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if checkbox inside a list item is checked.\n   */\n  isCheckboxCheckedAtIndex(index) {}\n\n  /**\n   * Sets the checked status of checkbox or radio at given list item index.\n   * @param {number} index\n   * @param {boolean} isChecked\n   */\n  setCheckedCheckboxOrRadioAtIndex(index, isChecked) {}\n\n  /**\n   * Notifies user action on list item.\n   */\n  notifyAction(index) {}\n\n  /**\n   * @return {boolean} Returns true when the current focused element is inside list root.\n   */\n  isFocusInsideList() {}\n}\n\nexport default MDCListAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from './foundation';\n\n/**\n * @template F\n */\nclass MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCComponent}\n   */\n  static attachTo(root) {\n    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n    // returns an instantiated component with its root set to that element. Also note that in the cases of\n    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n    // from getDefaultFoundation().\n    return new MDCComponent(root, new MDCFoundation());\n  }\n\n  /**\n   * @param {!Element} root\n   * @param {F=} foundation\n   * @param {...?} args\n   */\n  constructor(root, foundation = undefined, ...args) {\n    /** @protected {!Element} */\n    this.root_ = root;\n    this.initialize(...args);\n    // Note that we initialize foundation here and not within the constructor's default param so that\n    // this.root_ is defined and can be used within the foundation class.\n    /** @protected {!F} */\n    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n    this.foundation_.init();\n    this.initialSyncWithDOM();\n  }\n\n  initialize(/* ...args */) {\n    // Subclasses can override this to do any additional setup work that would be considered part of a\n    // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n    // initialized. Any additional arguments besides root and foundation will be passed in here.\n  }\n\n  /**\n   * @return {!F} foundation\n   */\n  getDefaultFoundation() {\n    // Subclasses must override this method to return a properly configured foundation class for the\n    // component.\n    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n      'foundation class');\n  }\n\n  initialSyncWithDOM() {\n    // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n    // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n  }\n\n  destroy() {\n    // Subclasses may implement this method to release any resources / deregister any listeners they have\n    // attached. An example of this might be deregistering a resize event from the window object.\n    this.foundation_.destroy();\n  }\n\n  /**\n   * Wrapper method to add an event listener to the component's root element. This is most useful when\n   * listening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  listen(evtType, handler) {\n    this.root_.addEventListener(evtType, handler);\n  }\n\n  /**\n   * Wrapper method to remove an event listener to the component's root element. This is most useful when\n   * unlistening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  unlisten(evtType, handler) {\n    this.root_.removeEventListener(evtType, handler);\n  }\n\n  /**\n   * Fires a cross-browser-compatible custom event from the component root of the given type,\n   * with the given data.\n   * @param {string} evtType\n   * @param {!Object} evtData\n   * @param {boolean=} shouldBubble\n   */\n  emit(evtType, evtData, shouldBubble = false) {\n    let evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        detail: evtData,\n        bubbles: shouldBubble,\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n\n    this.root_.dispatchEvent(evt);\n  }\n}\n\nexport default MDCComponent;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview A \"ponyfill\" is a polyfill that doesn't modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\n\n/**\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element}\n */\nfunction closest(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  let el = element;\n  while (el) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentElement;\n  }\n  return null;\n}\n\n/**\n * @param {!Element} element\n * @param {string} selector\n * @return {boolean}\n */\nfunction matches(element, selector) {\n  const nativeMatches = element.matches\n    || element.webkitMatchesSelector\n    || element.msMatchesSelector;\n  return nativeMatches.call(element, selector);\n}\n\nexport {closest, matches};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-list',\n  LIST_ITEM_CLASS: 'mdc-list-item',\n  LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',\n  LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',\n};\n\n/** @enum {string} */\nconst strings = {\n  ARIA_ORIENTATION: 'aria-orientation',\n  ARIA_ORIENTATION_HORIZONTAL: 'horizontal',\n  ARIA_SELECTED: 'aria-selected',\n  ARIA_CHECKED: 'aria-checked',\n  ARIA_CHECKED_RADIO_SELECTOR: '[role=\"radio\"][aria-checked=\"true\"]',\n  ARIA_ROLE_CHECKBOX_SELECTOR: '[role=\"checkbox\"]',\n  ARIA_CHECKED_CHECKBOX_SELECTOR: '[role=\"checkbox\"][aria-checked=\"true\"]',\n  RADIO_SELECTOR: 'input[type=\"radio\"]:not(:disabled)',\n  CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]:not(:disabled)',\n  CHECKBOX_RADIO_SELECTOR: 'input[type=\"checkbox\"]:not(:disabled), input[type=\"radio\"]:not(:disabled)',\n  CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled),\n  .${cssClasses.LIST_ITEM_CLASS} a`,\n  FOCUSABLE_CHILD_ELEMENTS: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled), .${cssClasses.LIST_ITEM_CLASS} a,\n  .${cssClasses.LIST_ITEM_CLASS} input[type=\"radio\"]:not(:disabled),\n  .${cssClasses.LIST_ITEM_CLASS} input[type=\"checkbox\"]:not(:disabled)`,\n  ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)',\n  ACTION_EVENT: 'MDCList:action',\n};\n\n/** @typedef {number|!Array<number>} */\nlet Index;\n\nexport {strings, cssClasses, Index};\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { toBoolean, ENTER, SPACE } from '@angular-mdc/web/common';\r\nimport { MdcRipple } from '@angular-mdc/web/ripple';\r\n\r\n/** Change event that is fired whenever the selected state of an option changes. */\r\nexport class MdcListSelectionChange {\r\n  constructor(\r\n    public source: MdcListItem) { }\r\n}\r\n\r\n/**\r\n * Describes a parent MdcList component.\r\n * Contains properties that MdcListItem can inherit.\r\n */\r\nexport interface MdcListParentComponent {\r\n  disableRipple(): boolean;\r\n}\r\n\r\n/**\r\n * Injection token used to provide the parent MdcList component to MdcListItem.\r\n */\r\nexport const MDC_LIST_PARENT_COMPONENT =\r\n  new InjectionToken<MdcListParentComponent>('MDC_LIST_PARENT_COMPONENT');\r\n\r\nlet uniqueIdCounter = 0;\r\n\r\n@Directive({\r\n  selector: '[mdcListItemGraphic], mdc-list-item-graphic',\r\n  exportAs: 'mdcListItemGraphic',\r\n  host: {\r\n    'role': 'presentation',\r\n    'class': 'mdc-list-item__graphic',\r\n    '[attr.aria-hidden]': 'true'\r\n  }\r\n})\r\nexport class MdcListItemGraphic {\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Directive({\r\n  selector: '[mdcListItemMeta], mdc-list-item-meta',\r\n  exportAs: 'mdcListItemMeta',\r\n  host: { 'class': 'mdc-list-item__meta' }\r\n})\r\nexport class MdcListItemMeta {\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mdcListItemText], mdc-list-item-text',\r\n  exportAs: 'mdcListItemText',\r\n  host: { 'class': 'mdc-list-item__text' },\r\n  template: `\r\n  <ng-container>\r\n    <span class=\"mdc-list-item__primary-text\"><ng-content></ng-content></span>\r\n    <span class=\"mdc-list-item__secondary-text\" *ngIf=\"secondaryText\">{{secondaryText}}</span>\r\n  </ng-container>`,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcListItemText {\r\n  @Input() secondaryText?: string;\r\n\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Directive({\r\n  selector: '[mdcListItemSecondary], mdc-list-item-secondary',\r\n  exportAs: 'mdcListItemSecondary',\r\n  host: { 'class': 'mdc-list-item__secondary-text' }\r\n})\r\nexport class MdcListItemSecondary {\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-list-item, a[mdc-list-item]',\r\n  exportAs: 'mdcListItem',\r\n  host: {\r\n    'role': 'listitem',\r\n    '[id]': 'id',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mdc-list-item',\r\n    '[class.mdc-list-item--selected]': 'selected',\r\n    '[class.mdc-list-item--activated]': 'activated',\r\n    '[class.mdc-list-item--disabled]': 'disabled',\r\n    '(click)': '_emitChangeEvent()',\r\n    '(keydown)': '_onKeydown($event)'\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [MdcRipple]\r\n})\r\nexport class MdcListItem implements OnInit, OnDestroy {\r\n  private _id = `mdc-list-item-${uniqueIdCounter++}`;\r\n\r\n  /** The unique ID of the list item. */\r\n  get id(): string { return this._id; }\r\n\r\n  @Input() value: any;\r\n  @Input() tabIndex: number = -1;\r\n\r\n  /** Whether the list item is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._selected) {\r\n      this._selected = newValue;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _selected: boolean = false;\r\n\r\n  /** Whether the list item is activated. */\r\n  @Input()\r\n  get activated(): boolean { return this._activated; }\r\n  set activated(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._activated) {\r\n      this._activated = newValue;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _activated: boolean = false;\r\n\r\n  /** Whether the list item is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  @Output() readonly selectionChange: EventEmitter<MdcListSelectionChange>\r\n    = new EventEmitter<MdcListSelectionChange>();\r\n\r\n  constructor(\r\n    public ripple: MdcRipple,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    public elementRef: ElementRef,\r\n    @Optional() @Inject(MDC_LIST_PARENT_COMPONENT) private _parent: MdcListParentComponent) { }\r\n\r\n  ngOnInit(): void {\r\n    this._initRipple();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.ripple.destroy();\r\n  }\r\n\r\n  private _initRipple(): void {\r\n    this.ripple.init({\r\n      surface: this.elementRef.nativeElement\r\n    }, Object.assign(this.ripple.createAdapter(), {\r\n      isSurfaceDisabled: () => this._disabled || this._parent.disableRipple\r\n    }));\r\n  }\r\n\r\n  focus(): void {\r\n    this.getListItemElement().focus();\r\n  }\r\n\r\n  setRole(role: string): void {\r\n    this.getListItemElement().setAttribute('role', role);\r\n  }\r\n\r\n  getListItemElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n\r\n  _onKeydown(evt: KeyboardEvent): void {\r\n    if (evt.keyCode === ENTER || evt.keyCode === SPACE) {\r\n      this._emitChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(): void {\r\n    if (this._disabled) { return; }\r\n\r\n    this.selectionChange.emit(new MdcListSelectionChange(this));\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
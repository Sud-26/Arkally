/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Input, ContentChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { toBoolean } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MdcButtonLabel {
}
MdcButtonLabel.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-button-label, [mdcButtonLabel]',
                exportAs: 'mdcButtonLabel',
                host: {
                    'class': 'mdc-button__label'
                }
            },] },
];
class MdcButton {
    /**
     * @param {?} elementRef
     * @param {?} _ripple
     */
    constructor(elementRef, _ripple) {
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this._raised = false;
        this._primary = false;
        this._dense = false;
        this._secondary = false;
        this._unelevated = false;
        this._outlined = false;
        this._disabled = false;
    }
    /**
     * @return {?}
     */
    get raised() { return this._raised; }
    /**
     * @param {?} value
     * @return {?}
     */
    set raised(value) {
        this._raised = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get primary() { return this._primary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set primary(value) {
        this._primary = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get dense() { return this._dense; }
    /**
     * @param {?} value
     * @return {?}
     */
    set dense(value) {
        this._dense = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get secondary() { return this._secondary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set secondary(value) {
        this._secondary = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get unelevated() { return this._unelevated; }
    /**
     * @param {?} value
     * @return {?}
     */
    set unelevated(value) {
        this._unelevated = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get outlined() { return this._outlined; }
    /**
     * @param {?} value
     * @return {?}
     */
    set outlined(value) {
        this._outlined = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this.setDisabled(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._icon) {
            this._icon.elementRef.nativeElement.classList.add('mdc-button__icon');
        }
        this._ripple.init({ surface: this.getHostElement() });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._ripple.destroy();
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabled(disabled) {
        this._disabled = toBoolean(disabled);
        if (this._disabled) {
            this.getHostElement().setAttribute('disabled', 'true');
            this.getHostElement().setAttribute('aria-disabled', 'true');
        }
        else {
            this.getHostElement().removeAttribute('disabled');
            this.getHostElement().removeAttribute('aria-disabled');
        }
    }
    /**
     * Focuses the button.
     * @return {?}
     */
    focus() {
        this.getHostElement().focus();
    }
    /**
     * @return {?}
     */
    getHostElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        // A disabled button shouldn't apply any actions
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
}
MdcButton.decorators = [
    { type: Component, args: [{exportAs: 'mdcButton',
                selector: 'button[mdc-button], a[mdc-button]',
                host: {
                    '[tabIndex]': 'disabled ? -1 : 0',
                    'class': 'mdc-button',
                    '[class.ngx-mdc-button--primary]': 'primary',
                    '[class.ngx-mdc-button--secondary]': 'secondary',
                    '[class.mdc-button--raised]': 'raised',
                    '[class.mdc-button--dense]': 'dense',
                    '[class.mdc-button--unelevated]': 'unelevated',
                    '[class.mdc-button--outlined]': 'outlined',
                    '(click)': 'onClick($event)'
                },
                template: `
  <mdc-button-label *ngIf="label">{{label}}</mdc-button-label>
  <ng-content></ng-content>
  `,
                providers: [MdcRipple],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcButton.ctorParameters = () => [
    { type: ElementRef },
    { type: MdcRipple }
];
MdcButton.propDecorators = {
    raised: [{ type: Input }],
    primary: [{ type: Input }],
    dense: [{ type: Input }],
    secondary: [{ type: Input }],
    unelevated: [{ type: Input }],
    outlined: [{ type: Input }],
    disabled: [{ type: Input }],
    _icon: [{ type: ContentChild, args: [MdcIcon,] }],
    label: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MdcButtonModule {
}
MdcButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                exports: [MdcButton, MdcButtonLabel],
                declarations: [MdcButton, MdcButtonLabel]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MdcButtonModule, MdcButtonLabel, MdcButton };
//# sourceMappingURL=button.js.map

/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { InjectionToken, Directive, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, EventEmitter, ChangeDetectorRef, Optional, Inject, Output, ContentChildren, NgModule } from '@angular/core';
import { merge } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { toBoolean, ENTER, SPACE, Platform } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Change event that is fired whenever the selected state of an option changes.
 */
class MdcListSelectionChange {
    /**
     * @param {?} source
     */
    constructor(source) {
        this.source = source;
    }
}
/**
 * Injection token used to provide the parent MdcList component to MdcListItem.
 * @type {?}
 */
const MDC_LIST_PARENT_COMPONENT = new InjectionToken('MDC_LIST_PARENT_COMPONENT');
/** @type {?} */
let uniqueIdCounter = 0;
class MdcListItemGraphic {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListItemGraphic.decorators = [
    { type: Directive, args: [{
                selector: '[mdcListItemGraphic], mdc-list-item-graphic',
                exportAs: 'mdcListItemGraphic',
                host: {
                    'role': 'presentation',
                    'class': 'mdc-list-item__graphic',
                    '[attr.aria-hidden]': 'true'
                }
            },] },
];
/** @nocollapse */
MdcListItemGraphic.ctorParameters = () => [
    { type: ElementRef }
];
class MdcListItemMeta {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListItemMeta.decorators = [
    { type: Directive, args: [{
                selector: '[mdcListItemMeta], mdc-list-item-meta',
                exportAs: 'mdcListItemMeta',
                host: { 'class': 'mdc-list-item__meta' }
            },] },
];
/** @nocollapse */
MdcListItemMeta.ctorParameters = () => [
    { type: ElementRef }
];
class MdcListItemText {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListItemText.decorators = [
    { type: Component, args: [{selector: '[mdcListItemText], mdc-list-item-text',
                exportAs: 'mdcListItemText',
                host: { 'class': 'mdc-list-item__text' },
                template: `
  <ng-container>
    <span class="mdc-list-item__primary-text"><ng-content></ng-content></span>
    <span class="mdc-list-item__secondary-text" *ngIf="secondaryText">{{secondaryText}}</span>
  </ng-container>`,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcListItemText.ctorParameters = () => [
    { type: ElementRef }
];
MdcListItemText.propDecorators = {
    secondaryText: [{ type: Input }]
};
class MdcListItemSecondary {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListItemSecondary.decorators = [
    { type: Directive, args: [{
                selector: '[mdcListItemSecondary], mdc-list-item-secondary',
                exportAs: 'mdcListItemSecondary',
                host: { 'class': 'mdc-list-item__secondary-text' }
            },] },
];
/** @nocollapse */
MdcListItemSecondary.ctorParameters = () => [
    { type: ElementRef }
];
class MdcListItem {
    /**
     * @param {?} ripple
     * @param {?} _changeDetectorRef
     * @param {?} elementRef
     * @param {?} _parent
     */
    constructor(ripple, _changeDetectorRef, elementRef, _parent) {
        this.ripple = ripple;
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._parent = _parent;
        this._id = `mdc-list-item-${uniqueIdCounter++}`;
        this.tabIndex = -1;
        this._selected = false;
        this._activated = false;
        this._disabled = false;
        this.selectionChange = new EventEmitter();
    }
    /**
     * The unique ID of the list item.
     * @return {?}
     */
    get id() { return this._id; }
    /**
     * Whether the list item is selected.
     * @return {?}
     */
    get selected() { return this._selected; }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        /** @type {?} */
        const newValue = toBoolean(value);
        if (newValue !== this._selected) {
            this._selected = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the list item is activated.
     * @return {?}
     */
    get activated() { return this._activated; }
    /**
     * @param {?} value
     * @return {?}
     */
    set activated(value) {
        /** @type {?} */
        const newValue = toBoolean(value);
        if (newValue !== this._activated) {
            this._activated = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the list item is disabled.
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = toBoolean(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initRipple();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ripple.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    _initRipple() {
        this.ripple.init({
            surface: this.elementRef.nativeElement
        }, Object.assign(this.ripple.createAdapter(), {
            isSurfaceDisabled: (/**
             * @return {?}
             */
            () => this._disabled || this._parent.disableRipple)
        }));
    }
    /**
     * @return {?}
     */
    focus() {
        this.getListItemElement().focus();
    }
    /**
     * @param {?} role
     * @return {?}
     */
    setRole(role) {
        this.getListItemElement().setAttribute('role', role);
    }
    /**
     * @return {?}
     */
    getListItemElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    _onKeydown(evt) {
        if (evt.keyCode === ENTER || evt.keyCode === SPACE) {
            this._emitChangeEvent();
        }
    }
    /**
     * Emits a change event if the selected state of an option changed.
     * @return {?}
     */
    _emitChangeEvent() {
        if (this._disabled) {
            return;
        }
        this.selectionChange.emit(new MdcListSelectionChange(this));
    }
}
MdcListItem.decorators = [
    { type: Component, args: [{selector: 'mdc-list-item, a[mdc-list-item]',
                exportAs: 'mdcListItem',
                host: {
                    'role': 'listitem',
                    '[id]': 'id',
                    '[tabIndex]': 'tabIndex',
                    'class': 'mdc-list-item',
                    '[class.mdc-list-item--selected]': 'selected',
                    '[class.mdc-list-item--activated]': 'activated',
                    '[class.mdc-list-item--disabled]': 'disabled',
                    '(click)': '_emitChangeEvent()',
                    '(keydown)': '_onKeydown($event)'
                },
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [MdcRipple]
            },] },
];
/** @nocollapse */
MdcListItem.ctorParameters = () => [
    { type: MdcRipple },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MDC_LIST_PARENT_COMPONENT,] }] }
];
MdcListItem.propDecorators = {
    value: [{ type: Input }],
    tabIndex: [{ type: Input }],
    selected: [{ type: Input }],
    activated: [{ type: Input }],
    disabled: [{ type: Input }],
    selectionChange: [{ type: Output }]
};

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @enum {string} */
const cssClasses = {
  ROOT: 'mdc-list',
  LIST_ITEM_CLASS: 'mdc-list-item',
  LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
  LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
};

/** @enum {string} */
const strings = {
  ARIA_ORIENTATION: 'aria-orientation',
  ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
  ARIA_SELECTED: 'aria-selected',
  ARIA_CHECKED: 'aria-checked',
  ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
  ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
  ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
  RADIO_SELECTOR: 'input[type="radio"]:not(:disabled)',
  CHECKBOX_SELECTOR: 'input[type="checkbox"]:not(:disabled)',
  CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"]:not(:disabled), input[type="radio"]:not(:disabled)',
  CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled),
  .${cssClasses.LIST_ITEM_CLASS} a`,
  FOCUSABLE_CHILD_ELEMENTS: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled), .${cssClasses.LIST_ITEM_CLASS} a,
  .${cssClasses.LIST_ITEM_CLASS} input[type="radio"]:not(:disabled),
  .${cssClasses.LIST_ITEM_CLASS} input[type="checkbox"]:not(:disabled)`,
  ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)',
  ACTION_EVENT: 'MDCList:action',
};

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @param {!Element} element
 * @param {string} selector
 * @return {boolean}
 */
function matches(element, selector) {
  const nativeMatches = element.matches
    || element.webkitMatchesSelector
    || element.msMatchesSelector;
  return nativeMatches.call(element, selector);
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

const ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];

class MDCListFoundation extends MDCFoundation {
  /** @return enum {string} */
  static get strings() {
    return strings;
  }

  /** @return enum {string} */
  static get cssClasses() {
    return cssClasses;
  }

  /**
   * {@see MDCListAdapter} for typing information on parameters and return
   * types.
   * @return {!MDCListAdapter}
   */
  static get defaultAdapter() {
    return /** @type {!MDCListAdapter} */ ({
      getListItemCount: () => {},
      getFocusedElementIndex: () => {},
      setAttributeForElementIndex: () => {},
      removeAttributeForElementIndex: () => {},
      addClassForElementIndex: () => {},
      removeClassForElementIndex: () => {},
      focusItemAtIndex: () => {},
      setTabIndexForListItemChildren: () => {},
      hasRadioAtIndex: () => {},
      hasCheckboxAtIndex: () => {},
      isCheckboxCheckedAtIndex: () => {},
      setCheckedCheckboxOrRadioAtIndex: () => {},
      notifyAction: () => {},
      isFocusInsideList: () => {},
    });
  }

  /**
   * @param {!MDCListAdapter=} adapter
   */
  constructor(adapter) {
    super(Object.assign(MDCListFoundation.defaultAdapter, adapter));
    /** @private {boolean} */
    this.wrapFocus_ = false;

    /** @private {boolean} */
    this.isVertical_ = true;

    /** @private {boolean} */
    this.isSingleSelectionList_ = false;

    /** @private {!Index} */
    this.selectedIndex_ = -1;

    /** @private {number} */
    this.focusedItemIndex_ = -1;

    /** @private {boolean} */
    this.useActivatedClass_ = false;

    /** @private {boolean} */
    this.isCheckboxList_ = false;

    /** @private {boolean} */
    this.isRadioList_ = false;
  }

  layout() {
    if (this.adapter_.getListItemCount() === 0) return;

    if (this.adapter_.hasCheckboxAtIndex(0)) {
      this.isCheckboxList_ = true;
    } else if (this.adapter_.hasRadioAtIndex(0)) {
      this.isRadioList_ = true;
    }
  }

  /**
   * Sets the private wrapFocus_ variable.
   * @param {boolean} value
   */
  setWrapFocus(value) {
    this.wrapFocus_ = value;
  }

  /**
   * Sets the isVertical_ private variable.
   * @param {boolean} value
   */
  setVerticalOrientation(value) {
    this.isVertical_ = value;
  }

  /**
   * Sets the isSingleSelectionList_ private variable.
   * @param {boolean} value
   */
  setSingleSelection(value) {
    this.isSingleSelectionList_ = value;
  }

  /**
   * Sets the useActivatedClass_ private variable.
   * @param {boolean} useActivated
   */
  setUseActivatedClass(useActivated) {
    this.useActivatedClass_ = useActivated;
  }

  /** @return {!Index} */
  getSelectedIndex() {
    return this.selectedIndex_;
  }

  /** @param {!Index} index */
  setSelectedIndex(index) {
    if (!this.isIndexValid_(index)) return;

    if (this.isCheckboxList_) {
      this.setCheckboxAtIndex_(/** @type {!Array<number>} */ (index));
    } else if (this.isRadioList_) {
      this.setRadioAtIndex_(/** @type {number} */ (index));
    } else {
      this.setSingleSelectionAtIndex_(/** @type {number} */ (index));
    }
  }

  /**
   * Focus in handler for the list items.
   * @param evt
   * @param {number} listItemIndex
   */
  handleFocusIn(evt, listItemIndex) {
    if (listItemIndex >= 0) {
      this.adapter_.setTabIndexForListItemChildren(listItemIndex, 0);
    }
  }

  /**
   * Focus out handler for the list items.
   * @param {Event} evt
   * @param {number} listItemIndex
   */
  handleFocusOut(evt, listItemIndex) {
    if (listItemIndex >= 0) {
      this.adapter_.setTabIndexForListItemChildren(listItemIndex, -1);
    }

    /**
     * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus
     * is moved to next element.
     */
    setTimeout(() => {
      if (!this.adapter_.isFocusInsideList()) {
        this.setTabindexToFirstSelectedItem_();
      }
    }, 0);
  }

  /**
   * Key handler for the list.
   * @param {Event} evt
   * @param {boolean} isRootListItem
   * @param {number} listItemIndex
   */
  handleKeydown(evt, isRootListItem, listItemIndex) {
    const arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;
    const arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;
    const arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;
    const arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;
    const isHome = evt.key === 'Home' || evt.keyCode === 36;
    const isEnd = evt.key === 'End' || evt.keyCode === 35;
    const isEnter = evt.key === 'Enter' || evt.keyCode === 13;
    const isSpace = evt.key === 'Space' || evt.keyCode === 32;

    let currentIndex = this.adapter_.getFocusedElementIndex();
    let nextIndex = -1;
    if (currentIndex === -1) {
      currentIndex = listItemIndex;
      if (currentIndex < 0) {
        // If this event doesn't have a mdc-list-item ancestor from the
        // current list (not from a sublist), return early.
        return;
      }
    }

    if ((this.isVertical_ && arrowDown) || (!this.isVertical_ && arrowRight)) {
      this.preventDefaultEvent_(evt);
      nextIndex = this.focusNextElement(currentIndex);
    } else if ((this.isVertical_ && arrowUp) || (!this.isVertical_ && arrowLeft)) {
      this.preventDefaultEvent_(evt);
      nextIndex = this.focusPrevElement(currentIndex);
    } else if (isHome) {
      this.preventDefaultEvent_(evt);
      nextIndex = this.focusFirstElement();
    } else if (isEnd) {
      this.preventDefaultEvent_(evt);
      nextIndex = this.focusLastElement();
    } else if (isEnter || isSpace) {
      if (isRootListItem) {
        // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.
        if (evt.target.tagName === 'A' && isEnter) return;
        this.preventDefaultEvent_(evt);

        if (this.isSelectableList_()) {
          this.setSelectedIndexOnAction_(currentIndex);
        }

        this.adapter_.notifyAction(currentIndex);
      }
    }

    this.focusedItemIndex_ = currentIndex;

    if (nextIndex >= 0) {
      this.setTabindexAtIndex_(nextIndex);
      this.focusedItemIndex_ = nextIndex;
    }
  }

  /**
   * Click handler for the list.
   * @param {number} index
   * @param {boolean} toggleCheckbox
   */
  handleClick(index, toggleCheckbox) {
    if (index === -1) return;

    if (this.isSelectableList_()) {
      this.setSelectedIndexOnAction_(index, toggleCheckbox);
    }

    this.adapter_.notifyAction(index);

    this.setTabindexAtIndex_(index);
    this.focusedItemIndex_ = index;
  }

  /**
   * Ensures that preventDefault is only called if the containing element doesn't
   * consume the event, and it will cause an unintended scroll.
   * @param {Event} evt
   * @private
   */
  preventDefaultEvent_(evt) {
    const tagName = `${evt.target.tagName}`.toLowerCase();
    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
      evt.preventDefault();
    }
  }

  /**
   * Focuses the next element on the list.
   * @param {number} index
   * @return {number}
   */
  focusNextElement(index) {
    const count = this.adapter_.getListItemCount();
    let nextIndex = index + 1;
    if (nextIndex >= count) {
      if (this.wrapFocus_) {
        nextIndex = 0;
      } else {
        // Return early because last item is already focused.
        return index;
      }
    }
    this.adapter_.focusItemAtIndex(nextIndex);

    return nextIndex;
  }

  /**
   * Focuses the previous element on the list.
   * @param {number} index
   * @return {number}
   */
  focusPrevElement(index) {
    let prevIndex = index - 1;
    if (prevIndex < 0) {
      if (this.wrapFocus_) {
        prevIndex = this.adapter_.getListItemCount() - 1;
      } else {
        // Return early because first item is already focused.
        return index;
      }
    }
    this.adapter_.focusItemAtIndex(prevIndex);

    return prevIndex;
  }

  /**
   * @return {number}
   */
  focusFirstElement() {
    this.adapter_.focusItemAtIndex(0);
    return 0;
  }

  /**
   * @return {number}
   */
  focusLastElement() {
    const lastIndex = this.adapter_.getListItemCount() - 1;
    this.adapter_.focusItemAtIndex(lastIndex);
    return lastIndex;
  }

  /**
   * @param {number} index
   * @private
   */
  setSingleSelectionAtIndex_(index) {
    let selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;
    if (this.useActivatedClass_) {
      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;
    }

    if (this.selectedIndex_ >= 0 && this.selectedIndex_ !== index) {
      this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);
      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_SELECTED, 'false');
    }

    this.adapter_.addClassForElementIndex(index, selectedClassName);
    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_SELECTED, 'true');

    this.selectedIndex_ = index;
  }

  /**
   * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.
   * @param {number} index
   * @private
   */
  setRadioAtIndex_(index) {
    this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);

    if (this.selectedIndex_ >= 0) {
      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');
    }

    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');

    this.selectedIndex_ = index;
  }

  /**
   * @param {!Array<number>} index
   * @private
   */
  setCheckboxAtIndex_(index) {
    for (let i = 0; i < this.adapter_.getListItemCount(); i++) {
      let isChecked = false;
      if (index.indexOf(i) >= 0) {
        isChecked = true;
      }

      this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
      this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');
    }

    this.selectedIndex_ = index;
  }

  /**
   * @param {number} index
   * @private
   */
  setTabindexAtIndex_(index) {
    if (this.focusedItemIndex_ === -1 && index !== 0) {
      // If no list item was selected set first list item's tabindex to -1.
      // Generally, tabindex is set to 0 on first list item of list that has no preselected items.
      this.adapter_.setAttributeForElementIndex(0, 'tabindex', -1);
    } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {
      this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', -1);
    }

    this.adapter_.setAttributeForElementIndex(index, 'tabindex', 0);
  }

  /**
   * @return {boolean} Return true if it is single selectin list, checkbox list or radio list.
   * @private
   */
  isSelectableList_() {
    return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;
  }

  /** @private */
  setTabindexToFirstSelectedItem_() {
    let targetIndex = 0;

    if (this.isSelectableList_()) {
      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== -1) {
        targetIndex = this.selectedIndex_;
      } else if (this.selectedIndex_ instanceof Array && this.selectedIndex_.length > 0) {
        targetIndex = this.selectedIndex_.reduce((currentIndex, minIndex) => Math.min(currentIndex, minIndex));
      }
    }

    this.setTabindexAtIndex_(targetIndex);
  }

  /**
   * @param {!Index} index
   * @return {boolean}
   * @private
   */
  isIndexValid_(index) {
    if (index instanceof Array) {
      if (!this.isCheckboxList_) {
        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
      }

      if (index.length === 0) {
        return true;
      } else {
        return index.some((i) => this.isIndexInRange_(i));
      }
    } else if (typeof index === 'number') {
      if (this.isCheckboxList_) {
        throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);
      }
      return this.isIndexInRange_(index);
    } else {
      return false;
    }
  }

  /**
   * @param {number} index
   * @return {boolean}
   * @private
   */
  isIndexInRange_(index) {
    const listSize = this.adapter_.getListItemCount();
    return index >= 0 && index < listSize;
  }

  /**
   * @param {number} index
   * @param {boolean=} toggleCheckbox
   * @private
   */
  setSelectedIndexOnAction_(index, toggleCheckbox = true) {
    if (this.isCheckboxList_) {
      this.toggleCheckboxAtIndex_(index, toggleCheckbox);
    } else {
      this.setSelectedIndex(index);
    }
  }

  /**
   * @param {number} index
   * @param {boolean} toggleCheckbox
   * @private
   */
  toggleCheckboxAtIndex_(index, toggleCheckbox) {
    let isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);

    if (toggleCheckbox) {
      isChecked = !isChecked;
      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
    }

    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');

    // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.
    if (this.selectedIndex_ === -1) {
      this.selectedIndex_ = [];
    }

    if (isChecked) {
      this.selectedIndex_.push(index);
    } else {
      this.selectedIndex_ = this.selectedIndex_.filter((i) => i !== index);
    }
  }
}

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Change event that is being fired whenever the selected state of an option changes.
 */
class MdcListItemChange {
    /**
     * @param {?} source
     * @param {?} option
     */
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
class MdcListGroup {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListGroup.decorators = [
    { type: Component, args: [{selector: '[mdcListGroup], mdc-list-group',
                exportAs: 'mdcListGroup',
                host: { 'class': 'mdc-list-group' },
                template: `
  <h3 class="mdc-list-group__subheader" *ngIf="subheader">{{subheader}}</h3>
  <ng-content></ng-content>`,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcListGroup.ctorParameters = () => [
    { type: ElementRef }
];
MdcListGroup.propDecorators = {
    subheader: [{ type: Input }]
};
class MdcListGroupSubheader {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
MdcListGroupSubheader.decorators = [
    { type: Directive, args: [{
                selector: '[mdcListGroupSubheader], mdc-list-group-subheader',
                exportAs: 'mdcListGroupSubheader',
                host: { 'class': 'mdc-list-group__subheader' }
            },] },
];
/** @nocollapse */
MdcListGroupSubheader.ctorParameters = () => [
    { type: ElementRef }
];
class MdcList {
    /**
     * @param {?} _platform
     * @param {?} _changeDetectorRef
     * @param {?} elementRef
     */
    constructor(_platform, _changeDetectorRef, elementRef) {
        this._platform = _platform;
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._twoLine = false;
        this._dense = false;
        this._border = false;
        this._avatar = false;
        this._interactive = true;
        this._disableRipple = false;
        this._useActivatedClass = false;
        this._useSelectedClass = false;
        this._verticalOrientation = true;
        this._wrapFocus = false;
        /**
         * Emits a change event whenever the selected state of an option changes.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Emits an event for keyboard and mouse actions.
         */
        this.actionEvent = new EventEmitter();
        /**
         * Subscription to changes in list items.
         */
        this._changeSubscription = null;
        /**
         * Subscription to selection events in list items.
         */
        this.itemSelectionSubscription = null;
        this._foundation = new MDCListFoundation(this._createAdapter());
    }
    /**
     * @return {?}
     */
    get twoLine() { return this._twoLine; }
    /**
     * @param {?} value
     * @return {?}
     */
    set twoLine(value) {
        this._twoLine = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get dense() { return this._dense; }
    /**
     * @param {?} value
     * @return {?}
     */
    set dense(value) {
        this._dense = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get border() { return this._border; }
    /**
     * @param {?} value
     * @return {?}
     */
    set border(value) {
        this._border = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get avatar() { return this._avatar; }
    /**
     * @param {?} value
     * @return {?}
     */
    set avatar(value) {
        this._avatar = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get interactive() { return this._interactive; }
    /**
     * @param {?} value
     * @return {?}
     */
    set interactive(value) {
        /** @type {?} */
        const newValue = toBoolean(value);
        if (newValue !== this._interactive) {
            this._interactive = newValue;
        }
    }
    /**
     * @return {?}
     */
    get disableRipple() { return this._disableRipple; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disableRipple(value) {
        /** @type {?} */
        const newValue = toBoolean(value);
        if (newValue !== this._disableRipple) {
            this._disableRipple = newValue;
        }
    }
    /**
     * @return {?}
     */
    get singleSelection() { return this._singleSelection; }
    /**
     * @param {?} value
     * @return {?}
     */
    set singleSelection(value) {
        if (value !== undefined) {
            /** @type {?} */
            const newValue = toBoolean(value);
            if (newValue !== this._singleSelection) {
                this._singleSelection = newValue;
                this._foundation.setSingleSelection(this._singleSelection);
                if (this.getSelectedIndex() > -1) {
                    this.setSelectedIndex(this.getSelectedIndex());
                }
                this._changeDetectorRef.markForCheck();
            }
        }
    }
    /**
     * @return {?}
     */
    get useActivatedClass() { return this._useActivatedClass; }
    /**
     * @param {?} value
     * @return {?}
     */
    set useActivatedClass(value) {
        this._useActivatedClass = toBoolean(value);
        this._foundation.setUseActivatedClass(this._useActivatedClass);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get useSelectedClass() { return this._useSelectedClass; }
    /**
     * @param {?} value
     * @return {?}
     */
    set useSelectedClass(value) {
        this._useSelectedClass = toBoolean(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get verticalOrientation() { return this._verticalOrientation; }
    /**
     * @param {?} value
     * @return {?}
     */
    set verticalOrientation(value) {
        this._verticalOrientation = toBoolean(value);
        this._foundation.setVerticalOrientation(this._verticalOrientation);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get wrapFocus() { return this._wrapFocus; }
    /**
     * @param {?} value
     * @return {?}
     */
    set wrapFocus(value) {
        this._wrapFocus = toBoolean(value);
        this._foundation.setWrapFocus(this._wrapFocus);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Combined stream of all of the list item selection events.
     * @return {?}
     */
    get listItemSelections() {
        return merge(...this.items.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.selectionChange)));
    }
    /**
     * @private
     * @return {?}
     */
    _createAdapter() {
        return {
            getListItemCount: (/**
             * @return {?}
             */
            () => this.items.length),
            getFocusedElementIndex: (/**
             * @return {?}
             */
            () => {
                if (!this._platform.isBrowser && (/** @type {?} */ (document.activeElement))) {
                    return -1;
                }
                return this.items.toArray().findIndex((/**
                 * @param {?} _
                 * @return {?}
                 */
                _ => _.getListItemElement() === (/** @type {?} */ (document.activeElement)))) || -1;
            }),
            setAttributeForElementIndex: (/**
             * @param {?} index
             * @param {?} attr
             * @param {?} value
             * @return {?}
             */
            (index, attr, value) => {
                /** @type {?} */
                const item = this.getListItemByIndex(index);
                if (item) {
                    item.getListItemElement().setAttribute(attr, value);
                }
            }),
            removeAttributeForElementIndex: (/**
             * @param {?} index
             * @param {?} attr
             * @return {?}
             */
            (index, attr) => this.items.toArray()[index].getListItemElement().removeAttribute(attr)),
            addClassForElementIndex: (/**
             * @param {?} index
             * @param {?} className
             * @return {?}
             */
            (index, className) => this.items.toArray()[index].getListItemElement().classList.add(className)),
            removeClassForElementIndex: (/**
             * @param {?} index
             * @param {?} className
             * @return {?}
             */
            (index, className) => {
                /** @type {?} */
                const item = this.getListItemByIndex(index);
                if (item) {
                    item.getListItemElement().classList.remove(className);
                }
            }),
            focusItemAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => this.focusItemAtIndex(index)),
            setTabIndexForListItemChildren: (/**
             * @param {?} listItemIndex
             * @param {?} tabIndexValue
             * @return {?}
             */
            (listItemIndex, tabIndexValue) => {
                /** @type {?} */
                const listItemChildren = [].slice.call(this.items.toArray()[listItemIndex].getListItemElement()
                    .querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
                listItemChildren.forEach((/**
                 * @param {?} ele
                 * @return {?}
                 */
                (ele) => ele.setAttribute('tabindex', `${tabIndexValue}`)));
            }),
            hasCheckboxAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => {
                /** @type {?} */
                const listItem = this.items.toArray()[index].getListItemElement();
                return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);
            }),
            hasRadioAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => {
                /** @type {?} */
                const listItem = this.items.toArray()[index].getListItemElement();
                return !!listItem.querySelector(strings.RADIO_SELECTOR);
            }),
            isCheckboxCheckedAtIndex: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => {
                /** @type {?} */
                const listItem = this.items.toArray()[index].getListItemElement();
                /** @type {?} */
                const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);
                return toggleEl.checked;
            }),
            setCheckedCheckboxOrRadioAtIndex: (/**
             * @param {?} index
             * @param {?} isChecked
             * @return {?}
             */
            (index, isChecked) => {
                /** @type {?} */
                const listItem = this.items.toArray()[index].getListItemElement();
                /** @type {?} */
                const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);
                toggleEl.checked = isChecked;
                if (this._platform.isBrowser) {
                    /** @type {?} */
                    const event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    toggleEl.dispatchEvent(event);
                }
            }),
            isFocusInsideList: (/**
             * @return {?}
             */
            () => this._platform.isBrowser ?
                this.elementRef.nativeElement.contains(document.activeElement) : false),
            notifyAction: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => {
                this.actionEvent.emit({ index: index });
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._foundation.init();
        this._foundation.layout();
        // When list items change, re-subscribe
        this._changeSubscription = this.items.changes.pipe(startWith(null))
            .subscribe((/**
         * @return {?}
         */
        () => {
            if (this.items.length) {
                this._resetListItems();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._dropSubscriptions();
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
        }
        this._foundation.destroy();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setSelectedIndex(index) {
        this.reset();
        this._foundation.setSelectedIndex(index);
        if (index === -1) {
            return;
        }
        /** @type {?} */
        const selectedItem = this.items.toArray()[index];
        if (selectedItem) {
            this._applySelectionState(selectedItem);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setSelectedValue(value) {
        this.reset();
        if (value === null) {
            return;
        }
        /** @type {?} */
        const selectedItem = this.getListItemByValue(value);
        this._foundation.setSelectedIndex(this.getListItemIndexByValue(value));
        if (selectedItem) {
            this._applySelectionState(selectedItem);
        }
    }
    /**
     * @return {?}
     */
    getSelectedItem() {
        return this.items ? this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.selected || _.activated)) : undefined;
    }
    /**
     * @return {?}
     */
    getSelectedIndex() {
        return this.items ? this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.selected || _.activated)) : -1;
    }
    /**
     * @return {?}
     */
    getSelectedValue() {
        /** @type {?} */
        const item = this.items ? this.items.find((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.selected)) : null;
        return item && item.value ? item.value : null;
    }
    /**
     * @return {?}
     */
    getSelectedText() {
        /** @type {?} */
        const selectedItem = this.getSelectedItem();
        return selectedItem && selectedItem.getListItemElement().textContent || '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getListItemByValue(value) {
        return this.items ? this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.value === value)) : undefined;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getListItemByIndex(index) {
        return this.items ? this.items.toArray()[index] : undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getListItemIndexByValue(value) {
        return this.items ? this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.value === value)) : -1;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    focusItemAtIndex(index) {
        this.items.toArray()[index].getListItemElement().focus();
    }
    /**
     * @return {?}
     */
    focusFirstElement() {
        return this._foundation.focusFirstElement();
    }
    /**
     * @return {?}
     */
    focusLastElement() {
        return this._foundation.focusLastElement();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    focusNextElement(index) {
        return this._foundation.focusNextElement(index);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    focusPrevElement(index) {
        return this._foundation.focusPrevElement(index);
    }
    /**
     * @param {?} role
     * @return {?}
     */
    setRole(role) {
        this._getHostElement().setAttribute('role', role);
    }
    /**
     * @return {?}
     */
    reset() {
        this.items.forEach((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            _.selected = false;
            _.activated = false;
        }));
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    _applySelectionState(item) {
        if (this.useActivatedClass) {
            item.activated = true;
        }
        else if (this.useSelectedClass) {
            item.selected = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _resetListItems() {
        this._dropSubscriptions();
        this._listenForListItemSelection();
    }
    /**
     * @private
     * @return {?}
     */
    _dropSubscriptions() {
        if (this.itemSelectionSubscription) {
            this.itemSelectionSubscription.unsubscribe();
            this.itemSelectionSubscription = null;
        }
    }
    /**
     * Listens to selected events on each list item.
     * @private
     * @return {?}
     */
    _listenForListItemSelection() {
        this.itemSelectionSubscription = this.listItemSelections.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (this.singleSelection) {
                this.items.filter((/**
                 * @param {?} _
                 * @return {?}
                 */
                _ => _.id !== event.source.id && (_.activated || _.selected)))
                    .forEach((/**
                 * @param {?} _
                 * @return {?}
                 */
                _ => {
                    _.selected = false;
                    _.activated = false;
                }));
            }
            this._applySelectionState(event.source);
            if (!this.singleSelection) {
                event.source.ripple.handleBlur();
            }
            this.selectionChange.emit(new MdcListItemChange(this, event.source));
        }));
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    _onFocusIn(evt) {
        /** @type {?} */
        const index = this._getListItemIndexByEvent(evt);
        this._foundation.handleFocusIn(evt, index);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    _onFocusOut(evt) {
        /** @type {?} */
        const index = this._getListItemIndexByEvent(evt);
        if (index >= 0) {
            this._foundation.handleFocusOut(evt, index);
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    _onKeydown(evt) {
        /** @type {?} */
        const index = this._getListItemIndexByEvent(evt);
        if (index >= 0) {
            this._foundation.handleKeydown(evt, ((/** @type {?} */ (evt.target))).classList.contains(cssClasses.LIST_ITEM_CLASS), index);
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    _handleClickEvent(evt) {
        /** @type {?} */
        const index = this._getListItemIndexByEvent(evt);
        /** @type {?} */
        const listItem = this._getListItemByEventTarget((/** @type {?} */ (evt.target)));
        if (listItem && listItem.disabled) {
            return;
        }
        // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.
        /** @type {?} */
        const toggleCheckbox = !matches((evt.target), strings.CHECKBOX_RADIO_SELECTOR);
        this._foundation.handleClick(index, toggleCheckbox);
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    _getListItemByEventTarget(target) {
        return this.items.toArray().find((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.getListItemElement() === target));
    }
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    _getListItemIndexByEvent(evt) {
        return this.items.toArray().findIndex((/**
         * @param {?} _
         * @return {?}
         */
        _ => _.getListItemElement() === evt.target));
    }
    /**
     * Retrieves the DOM element of the component host.
     * @private
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
}
MdcList.decorators = [
    { type: Component, args: [{selector: 'mdc-list',
                exportAs: 'mdcList',
                host: {
                    'role': 'list',
                    'class': 'mdc-list',
                    '[attr.aria-orientation]': 'verticalOrientation ? "vertical" : "horizontal"',
                    '[class.mdc-list--dense]': 'dense',
                    '[class.mdc-list--avatar-list]': 'avatar',
                    '[class.ngx-mdc-list--border]': 'border',
                    '[class.mdc-list--non-interactive]': '!interactive',
                    '[class.mdc-list--two-line]': 'twoLine',
                    '(click)': '_handleClickEvent($event)',
                    '(keydown)': '_onKeydown($event)',
                    '(focusin)': '_onFocusIn($event)',
                    '(focusout)': '_onFocusOut($event)'
                },
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: MDC_LIST_PARENT_COMPONENT, useExisting: MdcList }]
            },] },
];
/** @nocollapse */
MdcList.ctorParameters = () => [
    { type: Platform },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
MdcList.propDecorators = {
    twoLine: [{ type: Input }],
    dense: [{ type: Input }],
    border: [{ type: Input }],
    avatar: [{ type: Input }],
    interactive: [{ type: Input }],
    disableRipple: [{ type: Input }],
    singleSelection: [{ type: Input }],
    useActivatedClass: [{ type: Input }],
    useSelectedClass: [{ type: Input }],
    verticalOrientation: [{ type: Input }],
    wrapFocus: [{ type: Input }],
    items: [{ type: ContentChildren, args: [MdcListItem, { descendants: true },] }],
    selectionChange: [{ type: Output }],
    actionEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MdcListDivider {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._inset = false;
        this._padded = false;
    }
    /**
     * @return {?}
     */
    get inset() { return this._inset; }
    /**
     * @param {?} value
     * @return {?}
     */
    set inset(value) {
        this._inset = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get padded() { return this._padded; }
    /**
     * @param {?} value
     * @return {?}
     */
    set padded(value) {
        this._padded = toBoolean(value);
    }
}
MdcListDivider.decorators = [
    { type: Component, args: [{selector: '[mdcListDivider], mdc-list-divider',
                exportAs: 'mdcListDivider',
                host: {
                    'role': 'separator',
                    'class': 'mdc-list-divider',
                    '[class.mdc-list-divider--inset]': 'inset',
                    '[class.mdc-list-divider--padded]': 'padded'
                },
                template: '',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcListDivider.ctorParameters = () => [
    { type: ElementRef }
];
MdcListDivider.propDecorators = {
    inset: [{ type: Input }],
    padded: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LIST_DECLARATIONS = [
    MdcList,
    MdcListDivider,
    MdcListGroup,
    MdcListGroupSubheader,
    MdcListItem,
    MdcListItemGraphic,
    MdcListItemMeta,
    MdcListItemSecondary,
    MdcListItemText
];
class MdcListModule {
}
MdcListModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: LIST_DECLARATIONS,
                declarations: LIST_DECLARATIONS,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MdcListItemChange, MdcListGroup, MdcListGroupSubheader, MdcList, MdcListDivider, MdcListSelectionChange, MDC_LIST_PARENT_COMPONENT, MdcListItemGraphic, MdcListItemMeta, MdcListItemText, MdcListItemSecondary, MdcListItem, MdcListModule };
//# sourceMappingURL=list.js.map

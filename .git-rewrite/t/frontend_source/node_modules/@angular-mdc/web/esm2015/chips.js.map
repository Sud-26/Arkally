{"version":3,"file":"chips.js","sources":["../../../packages/chips/chips-module.ts","../../../packages/chips/chip-set.ts","../../../node_modules/@material/chips/chip-set/index.js","../../../node_modules/@material/chips/chip-set/foundation.js","../../../node_modules/@material/chips/chip-set/constants.js","../../../node_modules/@material/chips/chip-set/adapter.js","../../../packages/chips/chip.ts","../../../node_modules/@material/chips/chip/index.js","../../../node_modules/@material/chips/chip/foundation.js","../../../node_modules/@material/chips/chip/adapter.js","../../../node_modules/@material/ripple/index.js","../../../node_modules/@material/ripple/foundation.js","../../../node_modules/@material/ripple/util.js","../../../node_modules/@material/ripple/constants.js","../../../node_modules/@material/ripple/adapter.js","../../../node_modules/@material/base/component.js","../../../node_modules/@material/base/foundation.js","../../../node_modules/@material/chips/chip/constants.js"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MdcIconModule } from '@angular-mdc/web/icon';\r\nimport { MdcChip, MdcChipText, MdcChipIcon, MdcChipCheckmark } from './chip';\r\nimport { MdcChipSet } from './chip-set';\r\n\r\nexport const CHIP_DECLARATIONS = [\r\n  MdcChip,\r\n  MdcChipCheckmark,\r\n  MdcChipIcon,\r\n  MdcChipSet,\r\n  MdcChipText\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MdcIconModule],\r\n  exports: CHIP_DECLARATIONS,\r\n  declarations: CHIP_DECLARATIONS\r\n})\r\nexport class MdcChipsModule { }\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\r\nimport { startWith, takeUntil } from 'rxjs/operators';\r\n\r\nimport { toBoolean } from '@angular-mdc/web/common';\r\n\r\nimport {\r\n  MdcChip,\r\n  MdcChipInteractionEvent,\r\n  MdcChipRemovedEvent,\r\n  MdcChipSelectionEvent,\r\n  MDC_CHIPSET_PARENT_COMPONENT\r\n} from './chip';\r\n\r\nimport { MDCChipSetFoundation } from '@material/chips/chip-set/index';\r\n\r\nexport class MdcChipSetChange {\r\n  constructor(\r\n    public source: MdcChipSet,\r\n    public value: any) { }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-chip-set',\r\n  exportAs: 'mdcChipSet',\r\n  host: {\r\n    'class': 'mdc-chip-set',\r\n    '[class.mdc-chip-set--choice]': 'choice',\r\n    '[class.mdc-chip-set--filter]': 'filter',\r\n    '[class.mdc-chip-set--input]': 'input'\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [{ provide: MDC_CHIPSET_PARENT_COMPONENT, useExisting: MdcChipSet }]\r\n})\r\nexport class MdcChipSet implements AfterContentInit, OnDestroy, ControlValueAccessor {\r\n  /** Emits whenever the component is destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /**\r\n  * Indicates that the chips in the set are choice chips, which allow a single selection from a set of options.\r\n  */\r\n  @Input()\r\n  get choice(): boolean { return this._choice; }\r\n  set choice(value: boolean) {\r\n    this._choice = toBoolean(value);\r\n  }\r\n  private _choice: boolean = false;\r\n\r\n  /**\r\n  * Indicates that the chips in the set are filter chips, which allow multiple selection from a set of options.\r\n  */\r\n  @Input()\r\n  get filter(): boolean { return this._filter; }\r\n  set filter(value: boolean) {\r\n    this._filter = toBoolean(value);\r\n  }\r\n  private _filter: boolean = false;\r\n\r\n  /**\r\n  * Indicates that the chips in the set are input chips, which enable user input by converting text into chips.\r\n  */\r\n  @Input()\r\n  get input(): boolean { return this._input; }\r\n  set input(value: boolean) {\r\n    this._input = toBoolean(value);\r\n  }\r\n  private _input: boolean = false;\r\n\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  @Output() readonly change: EventEmitter<MdcChipSetChange> =\r\n    new EventEmitter<MdcChipSetChange>();\r\n\r\n  @ContentChildren(MdcChip, { descendants: true }) chips!: QueryList<MdcChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => { };\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => { };\r\n\r\n  /** Subscription to selection events in chips. */\r\n  private _chipSelectionSubscription: Subscription | null = null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null = null;\r\n\r\n  /** Subscription to interaction events in chips. */\r\n  private _chipInteractionSubscription: Subscription | null = null;\r\n\r\n  /** Combined stream of all of the chip selection events. */\r\n  get chipSelections(): Observable<MdcChipSelectionEvent> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the chip interaction events. */\r\n  get chipInteractions(): Observable<MdcChipInteractionEvent> {\r\n    return merge(...this.chips.map(chip => chip.trailingIconInteraction));\r\n  }\r\n\r\n  /** Combined stream of all of the chip remove events. */\r\n  get chipRemoveChanges(): Observable<MdcChipRemovedEvent> {\r\n    return merge(...this.chips.map(chip => chip.removed));\r\n  }\r\n\r\n  private _createAdapter() {\r\n    return {\r\n      hasClass: (className: string) => this._getHostElement().classList.contains(className),\r\n      removeChip: (chipId: string) => {\r\n        const index = this._findChipIndex(chipId);\r\n        this.chips.toArray().splice(index, 1);\r\n      },\r\n      setSelected: (chipId: string, selected: boolean) => {\r\n        const chip = this.getChipById(chipId);\r\n        if (chip) {\r\n          chip.selected = selected;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private _foundation: {\r\n    init(): void,\r\n    destroy(): void,\r\n    getSelectedChipIds(): string[],\r\n    select(chipId: string): void,\r\n    handleChipInteraction(chipId: string): void,\r\n    handleChipRemoval(chipId: string): void,\r\n    handleChipSelection(chipId: string, selected: boolean): void\r\n  } = new MDCChipSetFoundation(this._createAdapter());\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    public elementRef: ElementRef<HTMLElement>,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    @Optional() public ngControl: NgControl) {\r\n\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._foundation.init();\r\n\r\n    // When chips change, re-subscribe\r\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        if (this.chips.length > 0) {\r\n          this._resetChipSet();\r\n          this._initializeSelection();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    this._dropSubscriptions();\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n    }\r\n\r\n    this._foundation.destroy();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this.selectByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  getSelectedChipIds(): string[] {\r\n    return this._foundation.getSelectedChipIds();\r\n  }\r\n\r\n  select(chipId: string): void {\r\n    this._foundation.select(chipId);\r\n  }\r\n\r\n  getChipById(chipId: string): MdcChip | undefined {\r\n    return this.chips.find(_ => _.id === chipId);\r\n  }\r\n\r\n  selectByValue(value: any, isUserInput: boolean = true): void {\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n    } else {\r\n      this._selectValue(value, isUserInput);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MdcChip | undefined {\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value, value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this.selectByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _propagateChanges(evt: MdcChipSelectionEvent): void {\r\n    this._value = evt.detail.value;\r\n    this.change.emit(new MdcChipSetChange(this, evt.detail));\r\n    this._onChange(this._value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private _resetChipSet(): void {\r\n    this._dropSubscriptions();\r\n    this._listenForChipSelection();\r\n    this._listenToChipsInteraction();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n  private _dropSubscriptions(): void {\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n    if (this._chipInteractionSubscription) {\r\n      this._chipInteractionSubscription.unsubscribe();\r\n      this._chipInteractionSubscription = null;\r\n    }\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n      this._chipRemoveSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to selected events on each chip. */\r\n  private _listenForChipSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelections\r\n      .subscribe((event: MdcChipSelectionEvent) => {\r\n        this._foundation.handleChipSelection(event.detail.chipId, event.detail.selected);\r\n\r\n        if (event.isUserInput) {\r\n          this._propagateChanges(event);\r\n        }\r\n      });\r\n  }\r\n\r\n  private _listenToChipsInteraction(): void {\r\n    this._chipInteractionSubscription = this.chipInteractions\r\n      .subscribe((event: MdcChipInteractionEvent) =>\r\n        this._foundation.handleChipInteraction(event.detail.chipId));\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges\r\n      .subscribe((event: MdcChipRemovedEvent) => this._foundation.handleChipRemoval(event.detail.chipId));\r\n  }\r\n\r\n  private _findChipIndex(chipId: string): number {\r\n    return this.chips.toArray().findIndex(_ => _.id === chipId);\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  private _getHostElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCChipSetAdapter from './adapter';\nimport MDCChipSetFoundation from './foundation';\nimport {MDCChip, MDCChipFoundation} from '../chip/index';\n\nlet idCounter = 0;\n\n/**\n * @extends {MDCComponent<!MDCChipSetFoundation>}\n * @final\n */\nclass MDCChipSet extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {!Array<!MDCChip>} */\n    this.chips;\n    /** @private {(function(!Element): !MDCChip)} */\n    this.chipFactory_;\n\n    /** @private {?function(?Event): undefined} */\n    this.handleChipInteraction_;\n    /** @private {?function(?Event): undefined} */\n    this.handleChipSelection_;\n    /** @private {?function(?Event): undefined} */\n    this.handleChipRemoval_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCChipSet}\n   */\n  static attachTo(root) {\n    return new MDCChipSet(root);\n  }\n\n  /**\n   * @param {(function(!Element): !MDCChip)=} chipFactory A function which\n   * creates a new MDCChip.\n   */\n  initialize(chipFactory = (el) => new MDCChip(el)) {\n    this.chipFactory_ = chipFactory;\n    this.chips = this.instantiateChips_(this.chipFactory_);\n  }\n\n  initialSyncWithDOM() {\n    this.chips.forEach((chip) => {\n      if (chip.selected) {\n        this.foundation_.select(chip.id);\n      }\n    });\n\n    this.handleChipInteraction_ = (evt) => this.foundation_.handleChipInteraction(evt.detail.chipId);\n    this.handleChipSelection_ = (evt) => this.foundation_.handleChipSelection(evt.detail.chipId, evt.detail.selected);\n    this.handleChipRemoval_ = (evt) => this.foundation_.handleChipRemoval(evt.detail.chipId);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.INTERACTION_EVENT, this.handleChipInteraction_);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.SELECTION_EVENT, this.handleChipSelection_);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.REMOVAL_EVENT, this.handleChipRemoval_);\n  }\n\n  destroy() {\n    this.chips.forEach((chip) => {\n      chip.destroy();\n    });\n\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.INTERACTION_EVENT, this.handleChipInteraction_);\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.SELECTION_EVENT, this.handleChipSelection_);\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.REMOVAL_EVENT, this.handleChipRemoval_);\n\n    super.destroy();\n  }\n\n  /**\n   * Adds a new chip object to the chip set from the given chip element.\n   * @param {!Element} chipEl\n   */\n  addChip(chipEl) {\n    chipEl.id = chipEl.id || `mdc-chip-${++idCounter}`;\n    this.chips.push(this.chipFactory_(chipEl));\n  }\n\n  /**\n   * Returns an array of the IDs of all selected chips.\n   * @return {!Array<string>}\n   */\n  get selectedChipIds() {\n    return this.foundation_.getSelectedChipIds();\n  }\n\n  /**\n   * @return {!MDCChipSetFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCChipSetFoundation(/** @type {!MDCChipSetAdapter} */ (Object.assign({\n      hasClass: (className) => this.root_.classList.contains(className),\n      removeChip: (chipId) => {\n        const index = this.findChipIndex_(chipId);\n        if (index >= 0) {\n          this.chips[index].destroy();\n          this.chips.splice(index, 1);\n        }\n      },\n      setSelected: (chipId, selected) => {\n        const index = this.findChipIndex_(chipId);\n        if (index >= 0) {\n          this.chips[index].selected = selected;\n        }\n      },\n    })));\n  }\n\n  /**\n   * Instantiates chip components on all of the chip set's child chip elements.\n   * @param {(function(!Element): !MDCChip)} chipFactory\n   * @return {!Array<!MDCChip>}\n   */\n  instantiateChips_(chipFactory) {\n    const chipElements = [].slice.call(this.root_.querySelectorAll(MDCChipSetFoundation.strings.CHIP_SELECTOR));\n    return chipElements.map((el) => {\n      el.id = el.id || `mdc-chip-${++idCounter}`;\n      return chipFactory(el);\n    });\n  }\n\n  /**\n   * Returns the index of the chip with the given id, or -1 if the chip does not exist.\n   * @param {string} chipId\n   * @return {number}\n   */\n  findChipIndex_(chipId) {\n    for (let i = 0; i < this.chips.length; i++) {\n      if (this.chips[i].id === chipId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n\nexport {MDCChipSet, MDCChipSetFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipSetAdapter from './adapter';\n// eslint-disable-next-line no-unused-vars\nimport {MDCChipInteractionEventType, MDCChipSelectionEventType, MDCChipRemovalEventType} from '../chip/foundation';\nimport {strings, cssClasses} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCChipSetAdapter>}\n * @final\n */\nclass MDCChipSetFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipSetAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipSetAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipSetAdapter} */ ({\n      hasClass: () => {},\n      removeChip: () => {},\n      setSelected: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipSetAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipSetFoundation.defaultAdapter, adapter));\n\n    /**\n     * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n     * @private {!Array<string>}\n     */\n    this.selectedChipIds_ = [];\n  }\n\n  /**\n   * Returns an array of the IDs of all selected chips.\n   * @return {!Array<string>}\n   */\n  getSelectedChipIds() {\n    return this.selectedChipIds_;\n  }\n\n  /**\n   * Toggles selection of the chip with the given id.\n   * @private\n   * @param {string} chipId\n   */\n  toggleSelect_(chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      this.deselect_(chipId);\n    } else {\n      this.select(chipId);\n    }\n  }\n\n  /**\n   * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n   * @param {string} chipId\n   */\n  select(chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      return;\n    }\n\n    if (this.adapter_.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n      const previouslySelectedChip = this.selectedChipIds_[0];\n      this.selectedChipIds_.length = 0;\n      this.adapter_.setSelected(previouslySelectedChip, false);\n    }\n    this.selectedChipIds_.push(chipId);\n    this.adapter_.setSelected(chipId, true);\n  }\n\n  /**\n   * Deselects the chip with the given id.\n   * @private\n   * @param {string} chipId\n   */\n  deselect_(chipId) {\n    const index = this.selectedChipIds_.indexOf(chipId);\n    if (index >= 0) {\n      this.selectedChipIds_.splice(index, 1);\n      this.adapter_.setSelected(chipId, false);\n    }\n  }\n\n  /**\n   * Handles a chip interaction event\n   * @param {string} chipId\n   */\n  handleChipInteraction(chipId) {\n    if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n      this.toggleSelect_(chipId);\n    }\n  }\n\n  /**\n   * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n   * @param {string} chipId\n   * @param {boolean} selected\n   */\n  handleChipSelection(chipId, selected) {\n    const chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n    if (selected && !chipIsSelected) {\n      this.select(chipId);\n    } else if (!selected && chipIsSelected) {\n      this.deselect_(chipId);\n    }\n  }\n\n  /**\n   * Handles the event when a chip is removed.\n   * @param {string} chipId\n   */\n  handleChipRemoval(chipId) {\n    this.deselect_(chipId);\n    this.adapter_.removeChip(chipId);\n  }\n}\n\nexport default MDCChipSetFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  CHIP_SELECTOR: '.mdc-chip',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHOICE: 'mdc-chip-set--choice',\n  FILTER: 'mdc-chip-set--filter',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip Set.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip Set into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipSetAdapter {\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Removes the chip with the given id from the chip set.\n   * @param {string} chipId\n   */\n  removeChip(chipId) {}\n\n  /**\n   * Sets the selected state of the chip with the given id.\n   * @param {string} chipId\n   * @param {boolean} selected\n   */\n  setSelected(chipId, selected) {}\n}\n\nexport default MDCChipSetAdapter;\n","import {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport {\r\n  toBoolean,\r\n  Platform\r\n} from '@angular-mdc/web/common';\r\nimport { MdcRipple } from '@angular-mdc/web/ripple';\r\nimport {\r\n  MdcIcon,\r\n  MdcIconLocation,\r\n  MDC_ICON_LOCATION,\r\n  MdcIconRegistry\r\n} from '@angular-mdc/web/icon';\r\n\r\nimport { cssClasses } from '@material/chips/chip/constants';\r\nimport { MDCChipFoundation } from '@material/chips/chip/index';\r\n\r\nexport interface MdcChipInteractionEvent {\r\n  detail: {\r\n    chipId: string\r\n  };\r\n}\r\n\r\nexport interface MdcChipSelectionEvent extends MdcChipInteractionEvent {\r\n  isUserInput?: boolean;\r\n  detail: {\r\n    chipId: string,\r\n    selected: boolean,\r\n    value: any\r\n  };\r\n}\r\n\r\nexport interface MdcChipRemovedEvent extends MdcChipInteractionEvent {\r\n  detail: {\r\n    chipId: string,\r\n    root: MdcChip\r\n  };\r\n}\r\n\r\n/**\r\n * Describes a parent MdcChipSet component.\r\n * Contains properties that MdcChip can inherit.\r\n */\r\nexport interface MdcChipSetParentComponent {\r\n  input: boolean;\r\n  filter: boolean;\r\n  choice: boolean;\r\n}\r\n\r\n/**\r\n * Injection token used to provide the parent MdcChipSet component to MdcChip.\r\n */\r\nexport const MDC_CHIPSET_PARENT_COMPONENT =\r\n  new InjectionToken<MdcChipSetParentComponent>('MDC_CHIPSET_PARENT_COMPONENT');\r\n\r\nlet nextUniqueId = 0;\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-chip-checkmark',\r\n  exportAs: 'mdcChipCheckmark',\r\n  template: `\r\n  <div class=\"mdc-chip__checkmark\">\r\n    <svg\r\n      class=\"mdc-chip__checkmark-svg\"\r\n      viewBox=\"-2 -3 30 30\"\r\n      focusable=\"false\">\r\n      <path class=\"mdc-chip__checkmark-path\" fill=\"none\" stroke=\"black\" d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\r\n    </svg>\r\n  </div>`,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcChipCheckmark {\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Directive({\r\n  selector: 'mdc-chip-text, [mdcChipText]',\r\n  host: { 'class': 'mdc-chip__text' }\r\n})\r\nexport class MdcChipText {\r\n  constructor(public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-chip',\r\n  exportAs: 'mdcChip',\r\n  host: {\r\n    '[id]': 'id',\r\n    '[attr.tabindex]': 'disabled ? null : 0',\r\n    'class': 'mdc-chip',\r\n    '[class.ngx-mdc-chip--primary]': 'primary',\r\n    '[class.ngx-mdc-chip--secondary]': 'secondary',\r\n    '(click)': '_handleInteraction($event)',\r\n    '(keydown)': '_handleInteraction($event)'\r\n  },\r\n  template: `\r\n  <ng-content select=\"mdc-chip-icon[leading]\"></ng-content>\r\n  <mdc-chip-checkmark *ngIf=\"filter\"></mdc-chip-checkmark>\r\n  <div class=\"mdc-chip__text\" *ngIf=\"label\">{{label}}</div>\r\n  <ng-content></ng-content>`,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [MdcRipple]\r\n})\r\nexport class MdcChip implements AfterViewInit, OnDestroy {\r\n  /** Emits whenever the component is destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  private _id = `mdc-chip-${nextUniqueId++}`;\r\n\r\n  /** The unique ID of the chip. */\r\n  get id(): string { return this._id; }\r\n\r\n  get leadingIcon(): MdcChipIcon | undefined {\r\n    return this._icons.find((_: MdcChipIcon) => _.leading);\r\n  }\r\n\r\n  @Input() label?: string;\r\n\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    this._selected = newValue;\r\n    this._foundation.setSelected(newValue);\r\n\r\n    if (this.filter && this.leadingIcon) {\r\n      this.leadingIcon.elementRef.nativeElement.classList.remove(cssClasses.HIDDEN_LEADING_ICON);\r\n    }\r\n  }\r\n  private _selected: boolean = false;\r\n\r\n  @Input()\r\n  get filter(): boolean { return this._filter; }\r\n  set filter(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._filter) {\r\n      this._filter = newValue;\r\n    }\r\n  }\r\n  private _filter: boolean = false;\r\n\r\n  @Input()\r\n  get choice(): boolean { return this._choice; }\r\n  set choice(value: boolean) {\r\n    this._choice = toBoolean(value);\r\n  }\r\n  private _choice: boolean = false;\r\n\r\n  @Input()\r\n  get input(): boolean { return this._input; }\r\n  set input(value: boolean) {\r\n    this._input = toBoolean(value);\r\n  }\r\n  private _input: boolean = false;\r\n\r\n  @Input()\r\n  get primary(): boolean { return this._primary; }\r\n  set primary(value: boolean) {\r\n    this._primary = toBoolean(value);\r\n  }\r\n  private _primary: boolean = false;\r\n\r\n  @Input()\r\n  get secondary(): boolean { return this._secondary; }\r\n  set secondary(value: boolean) {\r\n    this._secondary = toBoolean(value);\r\n  }\r\n  private _secondary: boolean = false;\r\n\r\n  /** Determines whether or not the chip displays the remove styling and emits (removed) events. */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    const newValue = toBoolean(value);\r\n    if (newValue !== this._removable) {\r\n      this._removable = value;\r\n      this._foundation.setShouldRemoveOnTrailingIconClick(this._removable);\r\n    }\r\n  }\r\n  private _removable: boolean = true;\r\n\r\n  /** Whether the chip is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = toBoolean(value);\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the chip ripple is disabled. */\r\n  @Input()\r\n  get disableRipple(): boolean { return this._disableRipple; }\r\n  set disableRipple(value: boolean) {\r\n    this._disableRipple = toBoolean(value);\r\n  }\r\n  private _disableRipple: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mdc-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value !== undefined\r\n      ? this._value\r\n      : this.elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MdcChipSelectionEvent> =\r\n    new EventEmitter<MdcChipSelectionEvent>();\r\n\r\n  /** Emitted when the chip icon is interacted with. */\r\n  @Output() readonly trailingIconInteraction: EventEmitter<MdcChipInteractionEvent> =\r\n    new EventEmitter<MdcChipInteractionEvent>();\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MdcChipRemovedEvent> =\r\n    new EventEmitter<MdcChipRemovedEvent>();\r\n\r\n  @ContentChild(MdcChipCheckmark) _checkmark?: MdcChipCheckmark;\r\n  @ContentChildren(forwardRef(() => MdcChipIcon), { descendants: true }) _icons!: QueryList<MdcChipIcon>;\r\n\r\n  private _createAdapter() {\r\n    return {\r\n      addClass: (className: string) => this._getHostElement().classList.add(className),\r\n      removeClass: (className: string) => this._getHostElement().classList.remove(className),\r\n      hasClass: (className: string) => this._getHostElement().classList.contains(className),\r\n      addClassToLeadingIcon: (className: string) => {\r\n        if (this.leadingIcon) {\r\n          this.leadingIcon.elementRef.nativeElement.classList.add(className);\r\n        }\r\n      },\r\n      removeClassFromLeadingIcon: (className: string) => {\r\n        if (this.leadingIcon) {\r\n          this.leadingIcon.elementRef.nativeElement.classList.remove(className);\r\n        }\r\n      },\r\n      eventTargetHasClass: (target: HTMLElement, className: string) => target.classList.contains(className),\r\n      notifyInteraction: () => this._emitSelectionChangeEvent(true),\r\n      notifyTrailingIconInteraction: () => this.trailingIconInteraction.emit({ detail: { chipId: this.id } }),\r\n      notifyRemoval: () => this.removed.emit({ detail: { chipId: this.id, root: this } }),\r\n      getComputedStyleValue: (propertyName: string) => {\r\n        if (!this._platform.isBrowser) { return; }\r\n        return window.getComputedStyle(this._getHostElement()).getPropertyValue(propertyName);\r\n      },\r\n      setStyleProperty: (propertyName: string, value: string) =>\r\n        this._getHostElement().style.setProperty(propertyName, value),\r\n      hasLeadingIcon: () => !!this.leadingIcon,\r\n      getRootBoundingClientRect: () => this._getHostElement().getBoundingClientRect(),\r\n      getCheckmarkBoundingClientRect: () => this._checkmark ?\r\n        this._checkmark.elementRef.nativeElement.getBoundingClientRect() : null\r\n    };\r\n  }\r\n\r\n  private _foundation: {\r\n    init(): void,\r\n    destroy(): void,\r\n    setSelected(selected: boolean): void,\r\n    setShouldRemoveOnTrailingIconClick(shouldRemove: boolean): void,\r\n    handleInteraction(evt: KeyboardEvent | MouseEvent): void,\r\n    handleTransitionEnd(evt: TransitionEvent): void,\r\n    handleTrailingIconInteraction(evt: KeyboardEvent | MouseEvent): void,\r\n    getDimensions(): ClientRect\r\n  } = new MDCChipFoundation(this._createAdapter());\r\n\r\n  constructor(\r\n    private _platform: Platform,\r\n    private _ngZone: NgZone,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _ripple: MdcRipple,\r\n    public elementRef: ElementRef<HTMLElement>,\r\n    @Optional() @Inject(MDC_CHIPSET_PARENT_COMPONENT) private _parent: MdcChipSetParentComponent) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._foundation.init();\r\n    this._setVariantFromChipSet();\r\n    this._initRipple();\r\n    this._loadListeners();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    this._ripple.destroy();\r\n    if (this._foundation) {\r\n      this._foundation.destroy();\r\n    }\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _handleInteraction(evt: KeyboardEvent | MouseEvent): void {\r\n    this._selected = !this._selected;\r\n    this._foundation.handleInteraction(evt);\r\n  }\r\n\r\n  _handleTrailingIconInteraction(evt: KeyboardEvent | MouseEvent): void {\r\n    this._foundation.handleTrailingIconInteraction(evt);\r\n  }\r\n\r\n  private _initRipple(): void {\r\n    this._ripple.init({\r\n      surface: this._getHostElement()\r\n    }, Object.assign(this._ripple.createAdapter(), {\r\n      isSurfaceDisabled: () => this._disableRipple,\r\n      computeBoundingRect: () => this._foundation.getDimensions()\r\n    }));\r\n  }\r\n\r\n  private _setVariantFromChipSet(): void {\r\n    if (this._parent) {\r\n      this.input = this._parent.input;\r\n      this.filter = this._parent.filter;\r\n      this.choice = this._parent.choice;\r\n\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  private _loadListeners(): void {\r\n    this._ngZone.runOutsideAngular(() =>\r\n      fromEvent<TransitionEvent>(this._getHostElement(), 'transitionend')\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(evt => this._ngZone.run(() => this._foundation.handleTransitionEnd(evt))));\r\n  }\r\n\r\n  /** Emits the removed event. */\r\n  _emitRemovedEvent(): void {\r\n    this.removed.emit({ detail: { chipId: this.id, root: this } });\r\n  }\r\n\r\n  /** Emits the selection change event. */\r\n  private _emitSelectionChangeEvent(isUserInput?: boolean): void {\r\n    this.selectionChange.emit({\r\n      isUserInput: isUserInput,\r\n      detail: { chipId: this.id, selected: this._selected, value: this._value }\r\n    });\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  private _getHostElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mdc-chip-icon, [mdcChipIcon]',\r\n  exportAs: 'mdcChipIcon',\r\n  host: {\r\n    'class': 'mdc-chip__icon ngx-mdc-icon',\r\n    '[attr.role]': 'role',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[class.ngx-mdc-icon--clickable]': 'clickable',\r\n    '[class.ngx-mdc-icon--inline]': 'inline',\r\n    '[class.mdc-chip__icon--leading]': 'leading',\r\n    '[class.mdc-chip__icon--trailing]': 'trailing',\r\n    '(click)': '_onIconInteraction($event)',\r\n    '(keydown)': '_onIconInteraction($event)'\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdcChipIcon extends MdcIcon implements AfterContentInit {\r\n  @Input()\r\n  get leading(): boolean { return this._leading; }\r\n  set leading(value: boolean) {\r\n    this._leading = toBoolean(value);\r\n  }\r\n  private _leading: boolean = false;\r\n\r\n  @Input()\r\n  get trailing(): boolean { return this._trailing; }\r\n  set trailing(value: boolean) {\r\n    this._trailing = toBoolean(value);\r\n  }\r\n  private _trailing: boolean = false;\r\n\r\n  constructor(\r\n    private _parentChip: MdcChip,\r\n    elementRef: ElementRef<HTMLElement>,\r\n    iconRegistry: MdcIconRegistry,\r\n    @Attribute('aria-hidden') ariaHidden: string,\r\n    @Inject(MDC_ICON_LOCATION) location?: MdcIconLocation) {\r\n\r\n    super(elementRef, iconRegistry, ariaHidden, location);\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    if (this.trailing) {\r\n      this.tabIndex = 0;\r\n      this.role = 'button';\r\n    }\r\n  }\r\n\r\n  _onIconInteraction(evt: KeyboardEvent | MouseEvent): void {\r\n    if (this.trailing) {\r\n      this._parentChip._handleTrailingIconInteraction(evt);\r\n      if (this._parentChip.removable && this._parentChip.input) {\r\n        this._parentChip._emitRemovedEvent();\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\n\nimport MDCChipAdapter from './adapter';\nimport {MDCChipFoundation} from './foundation';\nimport {strings} from './constants';\n\nconst INTERACTION_EVENTS = ['click', 'keydown'];\n\n/**\n * @extends {MDCComponent<!MDCChipFoundation>}\n * @final\n */\nclass MDCChip extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {string} */\n    this.id;\n    /** @private {?Element} */\n    this.leadingIcon_;\n    /** @private {?Element} */\n    this.trailingIcon_;\n    /** @private {?Element} */\n    this.checkmark_;\n    /** @private {!MDCRipple} */\n    this.ripple_;\n\n    /** @private {?function(?Event): undefined} */\n    this.handleInteraction_;\n    /** @private {?function(!Event): undefined} */\n    this.handleTransitionEnd_;\n    /** @private {function(!Event): undefined} */\n    this.handleTrailingIconInteraction_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCChip}\n   */\n  static attachTo(root) {\n    return new MDCChip(root);\n  }\n\n  initialize(\n    rippleFactory = (el, foundation) => new MDCRipple(el, foundation)) {\n    this.id = this.root_.id;\n    this.leadingIcon_ = this.root_.querySelector(strings.LEADING_ICON_SELECTOR);\n    this.trailingIcon_ = this.root_.querySelector(strings.TRAILING_ICON_SELECTOR);\n    this.checkmark_ = this.root_.querySelector(strings.CHECKMARK_SELECTOR);\n\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      computeBoundingRect: () => this.foundation_.getDimensions(),\n    });\n    this.ripple_ = rippleFactory(this.root_, new MDCRippleFoundation(adapter));\n  }\n\n  initialSyncWithDOM() {\n    this.handleInteraction_ = (evt) => this.foundation_.handleInteraction(evt);\n    this.handleTransitionEnd_ = (evt) => this.foundation_.handleTransitionEnd(evt);\n    this.handleTrailingIconInteraction_ = (evt) => this.foundation_.handleTrailingIconInteraction(evt);\n\n    INTERACTION_EVENTS.forEach((evtType) => {\n      this.root_.addEventListener(evtType, this.handleInteraction_);\n    });\n    this.root_.addEventListener('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach((evtType) => {\n        this.trailingIcon_.addEventListener(evtType, this.handleTrailingIconInteraction_);\n      });\n    }\n  }\n\n  destroy() {\n    this.ripple_.destroy();\n\n    INTERACTION_EVENTS.forEach((evtType) => {\n      this.root_.removeEventListener(evtType, this.handleInteraction_);\n    });\n    this.root_.removeEventListener('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach((evtType) => {\n        this.trailingIcon_.removeEventListener(evtType, this.handleTrailingIconInteraction_);\n      });\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * Returns whether the chip is selected.\n   * @return {boolean}\n   */\n  get selected() {\n    return this.foundation_.isSelected();\n  }\n\n  /**\n   * Sets selected state on the chip.\n   * @param {boolean} selected\n   */\n  set selected(selected) {\n    this.foundation_.setSelected(selected);\n  }\n\n  /**\n   * Returns whether a trailing icon click should trigger exit/removal of the chip.\n   * @return {boolean}\n   */\n  get shouldRemoveOnTrailingIconClick() {\n    return this.foundation_.getShouldRemoveOnTrailingIconClick();\n  }\n\n  /**\n   * Sets whether a trailing icon click should trigger exit/removal of the chip.\n   * @param {boolean} shouldRemove\n   */\n  set shouldRemoveOnTrailingIconClick(shouldRemove) {\n    this.foundation_.setShouldRemoveOnTrailingIconClick(shouldRemove);\n  }\n\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n  beginExit() {\n    this.foundation_.beginExit();\n  }\n\n  /**\n   * @return {!MDCChipFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCChipFoundation(/** @type {!MDCChipAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      addClassToLeadingIcon: (className) => {\n        if (this.leadingIcon_) {\n          this.leadingIcon_.classList.add(className);\n        }\n      },\n      removeClassFromLeadingIcon: (className) => {\n        if (this.leadingIcon_) {\n          this.leadingIcon_.classList.remove(className);\n        }\n      },\n      eventTargetHasClass: (target, className) => target.classList.contains(className),\n      notifyInteraction: () => this.emit(strings.INTERACTION_EVENT, {chipId: this.id}, true /* shouldBubble */),\n      notifySelection: (selected) => this.emit(\n        strings.SELECTION_EVENT, {chipId: this.id, selected: selected}, true /* shouldBubble */),\n      notifyTrailingIconInteraction: () => this.emit(\n        strings.TRAILING_ICON_INTERACTION_EVENT, {chipId: this.id}, true /* shouldBubble */),\n      notifyRemoval: () =>\n        this.emit(strings.REMOVAL_EVENT, {chipId: this.id, root: this.root_}, true /* shouldBubble */),\n      getComputedStyleValue: (propertyName) => window.getComputedStyle(this.root_).getPropertyValue(propertyName),\n      setStyleProperty: (propertyName, value) => this.root_.style.setProperty(propertyName, value),\n      hasLeadingIcon: () => !!this.leadingIcon_,\n      getRootBoundingClientRect: () => this.root_.getBoundingClientRect(),\n      getCheckmarkBoundingClientRect: () => this.checkmark_ ? this.checkmark_.getBoundingClientRect() : null,\n    })));\n  }\n\n  /** @return {!MDCRipple} */\n  get ripple() {\n    return this.ripple_;\n  }\n}\n\nexport {MDCChip, MDCChipFoundation};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipAdapter from './adapter';\nimport {strings, cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCChipAdapter>}\n * @final\n */\nclass MDCChipFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      addClassToLeadingIcon: () => {},\n      removeClassFromLeadingIcon: () => {},\n      eventTargetHasClass: () => {},\n      notifyInteraction: () => {},\n      notifySelection: () => {},\n      notifyTrailingIconInteraction: () => {},\n      notifyRemoval: () => {},\n      getComputedStyleValue: () => {},\n      setStyleProperty: () => {},\n      hasLeadingIcon: () => {},\n      getRootBoundingClientRect: () => {},\n      getCheckmarkBoundingClientRect: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipFoundation.defaultAdapter, adapter));\n\n    /**\n     * Whether a trailing icon click should immediately trigger exit/removal of the chip.\n     * @private {boolean}\n     * */\n    this.shouldRemoveOnTrailingIconClick_ = true;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isSelected() {\n    return this.adapter_.hasClass(cssClasses.SELECTED);\n  }\n\n  /**\n   * @param {boolean} selected\n   */\n  setSelected(selected) {\n    if (selected) {\n      this.adapter_.addClass(cssClasses.SELECTED);\n    } else {\n      this.adapter_.removeClass(cssClasses.SELECTED);\n    }\n    this.adapter_.notifySelection(selected);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getShouldRemoveOnTrailingIconClick() {\n    return this.shouldRemoveOnTrailingIconClick_;\n  }\n\n  /**\n   * @param {boolean} shouldRemove\n   */\n  setShouldRemoveOnTrailingIconClick(shouldRemove) {\n    this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n  }\n\n  /** @return {!ClientRect} */\n  getDimensions() {\n    // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current\n    // size of the checkmark.\n    if (!this.adapter_.hasLeadingIcon() && this.adapter_.getCheckmarkBoundingClientRect() !== null) {\n      const height = this.adapter_.getRootBoundingClientRect().height;\n      // The checkmark's width is initially set to 0, so use the checkmark's height as a proxy since the checkmark\n      // should always be square.\n      const width =\n          this.adapter_.getRootBoundingClientRect().width + this.adapter_.getCheckmarkBoundingClientRect().height;\n      return /** @type {!ClientRect} */ ({height, width});\n    } else {\n      return this.adapter_.getRootBoundingClientRect();\n    }\n  }\n\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n  beginExit() {\n    this.adapter_.addClass(cssClasses.CHIP_EXIT);\n  }\n\n  /**\n   * Handles an interaction event on the root element.\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyInteraction();\n    }\n  }\n\n  /**\n   * Handles a transition end event on the root element.\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    // Handle transition end event on the chip when it is about to be removed.\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHIP_EXIT)) {\n      if (evt.propertyName === 'width') {\n        this.adapter_.notifyRemoval();\n      } else if (evt.propertyName === 'opacity') {\n        // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n        const chipWidth = this.adapter_.getComputedStyleValue('width');\n\n        // On the next frame (once we get the computed width), explicitly set the chip's width\n        // to its current pixel width, so we aren't transitioning out of 'auto'.\n        requestAnimationFrame(() => {\n          this.adapter_.setStyleProperty('width', chipWidth);\n\n          // To mitigate jitter, start transitioning padding and margin before width.\n          this.adapter_.setStyleProperty('padding', '0');\n          this.adapter_.setStyleProperty('margin', '0');\n\n          // On the next frame (once width is explicitly set), transition width to 0.\n          requestAnimationFrame(() => {\n            this.adapter_.setStyleProperty('width', '0');\n          });\n        });\n      }\n      return;\n    }\n\n    // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n    if (evt.propertyName !== 'opacity') {\n      return;\n    }\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.LEADING_ICON) &&\n        this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    } else if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHECKMARK) &&\n               !this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n  }\n\n  /**\n   * Handles an interaction event on the trailing icon element. This is used to\n   * prevent the ripple from activating on interaction with the trailing icon.\n   * @param {!Event} evt\n   */\n  handleTrailingIconInteraction(evt) {\n    evt.stopPropagation();\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyTrailingIconInteraction();\n      if (this.shouldRemoveOnTrailingIconClick_) {\n        this.beginExit();\n      }\n    }\n  }\n}\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipInteractionEventType;\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *     selected: boolean,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipSelectionEventType;\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *     root: Element,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipRemovalEventType;\n\nexport {MDCChipFoundation, MDCChipInteractionEventType, MDCChipSelectionEventType, MDCChipRemovalEventType};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipAdapter {\n  /**\n   * Adds a class to the root element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Adds a class to the leading icon element.\n   * @param {string} className\n   */\n  addClassToLeadingIcon(className) {}\n\n  /**\n   * Removes a class from the leading icon element.\n   * @param {string} className\n   */\n  removeClassFromLeadingIcon(className) {}\n\n  /**\n   * Returns true if target has className, false otherwise.\n   * @param {!EventTarget} target\n   * @param {string} className\n   * @return {boolean}\n   */\n  eventTargetHasClass(target, className) {}\n\n  /**\n   * Emits a custom \"MDCChip:interaction\" event denoting the chip has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyInteraction() {}\n\n  /**\n   * Emits a custom \"MDCChip:selection\" event denoting the chip has been selected or deselected.\n   * @param {boolean} selected\n   */\n  notifySelection(selected) {}\n\n  /**\n   * Emits a custom \"MDCChip:trailingIconInteraction\" event denoting the trailing icon has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyTrailingIconInteraction() {}\n\n  /**\n   * Emits a custom event \"MDCChip:removal\" denoting the chip will be removed.\n   */\n  notifyRemoval() {}\n\n  /**\n   * Returns the computed property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @return {string}\n   */\n  getComputedStyleValue(propertyName) {}\n\n  /**\n   * Sets the property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @param {string} value\n   */\n  setStyleProperty(propertyName, value) {}\n\n  /**\n   * Returns whether the chip has a leading icon.\n   * @return {boolean}\n   */\n  hasLeadingIcon() {}\n\n  /**\n   * Returns the bounding client rect of the root element.\n   * @return {!ClientRect}\n   */\n  getRootBoundingClientRect() {}\n\n  /**\n   * Returns the bounding client rect of the checkmark element or null if it doesn't exist.\n   * @return {?ClientRect}\n   */\n  getCheckmarkBoundingClientRect() {}\n}\n\nexport default MDCChipAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCRippleAdapter from './adapter';\nimport MDCRippleFoundation from './foundation';\nimport * as util from './util';\n\n/**\n * @extends MDCComponent<!MDCRippleFoundation>\n */\nclass MDCRipple extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {boolean} */\n    this.disabled = false;\n\n    /** @private {boolean} */\n    this.unbounded_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @param {{isUnbounded: (boolean|undefined)}=} options\n   * @return {!MDCRipple}\n   */\n  static attachTo(root, {isUnbounded = undefined} = {}) {\n    const ripple = new MDCRipple(root);\n    // Only override unbounded behavior if option is explicitly specified\n    if (isUnbounded !== undefined) {\n      ripple.unbounded = /** @type {boolean} */ (isUnbounded);\n    }\n    return ripple;\n  }\n\n  /**\n   * @param {!RippleCapableSurface} instance\n   * @return {!MDCRippleAdapter}\n   */\n  static createAdapter(instance) {\n    const MATCHES = util.getMatchesProperty(HTMLElement.prototype);\n\n    return {\n      browserSupportsCssVars: () => util.supportsCssVariables(window),\n      isUnbounded: () => instance.unbounded,\n      isSurfaceActive: () => instance.root_[MATCHES](':active'),\n      isSurfaceDisabled: () => instance.disabled,\n      addClass: (className) => instance.root_.classList.add(className),\n      removeClass: (className) => instance.root_.classList.remove(className),\n      containsEventTarget: (target) => instance.root_.contains(target),\n      registerInteractionHandler: (evtType, handler) =>\n        instance.root_.addEventListener(evtType, handler, util.applyPassive()),\n      deregisterInteractionHandler: (evtType, handler) =>\n        instance.root_.removeEventListener(evtType, handler, util.applyPassive()),\n      registerDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.addEventListener(evtType, handler, util.applyPassive()),\n      deregisterDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.removeEventListener(evtType, handler, util.applyPassive()),\n      registerResizeHandler: (handler) => window.addEventListener('resize', handler),\n      deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),\n      updateCssVariable: (varName, value) => instance.root_.style.setProperty(varName, value),\n      computeBoundingRect: () => instance.root_.getBoundingClientRect(),\n      getWindowPageOffset: () => ({x: window.pageXOffset, y: window.pageYOffset}),\n    };\n  }\n\n  /** @return {boolean} */\n  get unbounded() {\n    return this.unbounded_;\n  }\n\n  /** @param {boolean} unbounded */\n  set unbounded(unbounded) {\n    this.unbounded_ = Boolean(unbounded);\n    this.setUnbounded_();\n  }\n\n  /**\n   * Closure Compiler throws an access control error when directly accessing a\n   * protected or private property inside a getter/setter, like unbounded above.\n   * By accessing the protected property inside a method, we solve that problem.\n   * That's why this function exists.\n   * @private\n   */\n  setUnbounded_() {\n    this.foundation_.setUnbounded(this.unbounded_);\n  }\n\n  activate() {\n    this.foundation_.activate();\n  }\n\n  deactivate() {\n    this.foundation_.deactivate();\n  }\n\n  layout() {\n    this.foundation_.layout();\n  }\n\n  /**\n   * @return {!MDCRippleFoundation}\n   * @override\n   */\n  getDefaultFoundation() {\n    return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n  }\n\n  /** @override */\n  initialSyncWithDOM() {\n    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;\n  }\n}\n\n/**\n * See Material Design spec for more details on when to use ripples.\n * https://material.io/guidelines/motion/choreography.html#choreography-creation\n * @record\n */\nclass RippleCapableSurface {}\n\n/** @protected {!Element} */\nRippleCapableSurface.prototype.root_;\n\n/**\n * Whether or not the ripple bleeds out of the bounds of the element.\n * @type {boolean|undefined}\n */\nRippleCapableSurface.prototype.unbounded;\n\n/**\n * Whether or not the ripple is attached to a disabled component.\n * @type {boolean|undefined}\n */\nRippleCapableSurface.prototype.disabled;\n\nexport {MDCRipple, MDCRippleFoundation, RippleCapableSurface, util};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCRippleAdapter from './adapter';\nimport {cssClasses, strings, numbers} from './constants';\nimport {getNormalizedEventCoords} from './util';\n\n/**\n * @typedef {{\n *   isActivated: (boolean|undefined),\n *   hasDeactivationUXRun: (boolean|undefined),\n *   wasActivatedByPointer: (boolean|undefined),\n *   wasElementMadeActive: (boolean|undefined),\n *   activationEvent: (!Event|undefined),\n *   isProgrammatic: (boolean|undefined)\n * }}\n */\nlet ActivationStateType;\n\n/**\n * @typedef {{\n *   activate: (string|undefined),\n *   deactivate: (string|undefined),\n *   focus: (string|undefined),\n *   blur: (string|undefined)\n * }}\n */\nlet ListenerInfoType;\n\n/**\n * @typedef {{\n *   activate: function(!Event),\n *   deactivate: function(!Event=),\n *   focus: function(),\n *   blur: function()\n * }}\n */\nlet ListenersType;\n\n/**\n * @typedef {{\n *   x: number,\n *   y: number\n * }}\n */\nlet PointType;\n\n// Activation events registered on the root element of each instance for activation\nconst ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nconst POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];\n\n// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n/** @type {!Array<!EventTarget>} */\nlet activatedTargets = [];\n\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\nclass MDCRippleFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get numbers() {\n    return numbers;\n  }\n\n  static get defaultAdapter() {\n    return {\n      browserSupportsCssVars: () => /* boolean - cached */ {},\n      isUnbounded: () => /* boolean */ {},\n      isSurfaceActive: () => /* boolean */ {},\n      isSurfaceDisabled: () => /* boolean */ {},\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      containsEventTarget: (/* target: !EventTarget */) => {},\n      registerInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerResizeHandler: (/* handler: EventListener */) => {},\n      deregisterResizeHandler: (/* handler: EventListener */) => {},\n      updateCssVariable: (/* varName: string, value: string */) => {},\n      computeBoundingRect: () => /* ClientRect */ {},\n      getWindowPageOffset: () => /* {x: number, y: number} */ {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCRippleFoundation.defaultAdapter, adapter));\n\n    /** @private {number} */\n    this.layoutFrame_ = 0;\n\n    /** @private {!ClientRect} */\n    this.frame_ = /** @type {!ClientRect} */ ({width: 0, height: 0});\n\n    /** @private {!ActivationStateType} */\n    this.activationState_ = this.defaultActivationState_();\n\n    /** @private {number} */\n    this.initialSize_ = 0;\n\n    /** @private {number} */\n    this.maxRadius_ = 0;\n\n    /** @private {function(!Event)} */\n    this.activateHandler_ = (e) => this.activate_(e);\n\n    /** @private {function(!Event=)} */\n    this.deactivateHandler_ = () => this.deactivate_();\n\n    /** @private {function(!Event=)} */\n    this.focusHandler_ = () => this.handleFocus();\n\n    /** @private {function(!Event=)} */\n    this.blurHandler_ = () => this.handleBlur();\n\n    /** @private {!Function} */\n    this.resizeHandler_ = () => this.layout();\n\n    /** @private {{left: number, top:number}} */\n    this.unboundedCoords_ = {\n      left: 0,\n      top: 0,\n    };\n\n    /** @private {number} */\n    this.fgScale_ = 0;\n\n    /** @private {number} */\n    this.activationTimer_ = 0;\n\n    /** @private {number} */\n    this.fgDeactivationRemovalTimer_ = 0;\n\n    /** @private {boolean} */\n    this.activationAnimationHasEnded_ = false;\n\n    /** @private {!Function} */\n    this.activationTimerCallback_ = () => {\n      this.activationAnimationHasEnded_ = true;\n      this.runDeactivationUXLogicIfReady_();\n    };\n\n    /** @private {!Event|undefined} */\n    this.previousActivationEvent_;\n  }\n\n  /**\n   * We compute this property so that we are not querying information about the client\n   * until the point in time where the foundation requests it. This prevents scenarios where\n   * client-side feature-detection may happen too early, such as when components are rendered on the server\n   * and then initialized at mount time on the client.\n   * @return {boolean}\n   * @private\n   */\n  supportsPressRipple_() {\n    return this.adapter_.browserSupportsCssVars();\n  }\n\n  /**\n   * @return {!ActivationStateType}\n   */\n  defaultActivationState_() {\n    return {\n      isActivated: false,\n      hasDeactivationUXRun: false,\n      wasActivatedByPointer: false,\n      wasElementMadeActive: false,\n      activationEvent: undefined,\n      isProgrammatic: false,\n    };\n  }\n\n  /** @override */\n  init() {\n    const supportsPressRipple = this.supportsPressRipple_();\n\n    this.registerRootHandlers_(supportsPressRipple);\n\n    if (supportsPressRipple) {\n      const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n      requestAnimationFrame(() => {\n        this.adapter_.addClass(ROOT);\n        if (this.adapter_.isUnbounded()) {\n          this.adapter_.addClass(UNBOUNDED);\n          // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n          this.layoutInternal_();\n        }\n      });\n    }\n  }\n\n  /** @override */\n  destroy() {\n    if (this.supportsPressRipple_()) {\n      if (this.activationTimer_) {\n        clearTimeout(this.activationTimer_);\n        this.activationTimer_ = 0;\n        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n      }\n\n      if (this.fgDeactivationRemovalTimer_) {\n        clearTimeout(this.fgDeactivationRemovalTimer_);\n        this.fgDeactivationRemovalTimer_ = 0;\n        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n      }\n\n      const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n      requestAnimationFrame(() => {\n        this.adapter_.removeClass(ROOT);\n        this.adapter_.removeClass(UNBOUNDED);\n        this.removeCssVars_();\n      });\n    }\n\n    this.deregisterRootHandlers_();\n    this.deregisterDeactivationHandlers_();\n  }\n\n  /**\n   * @param {boolean} supportsPressRipple Passed from init to save a redundant function call\n   * @private\n   */\n  registerRootHandlers_(supportsPressRipple) {\n    if (supportsPressRipple) {\n      ACTIVATION_EVENT_TYPES.forEach((type) => {\n        this.adapter_.registerInteractionHandler(type, this.activateHandler_);\n      });\n      if (this.adapter_.isUnbounded()) {\n        this.adapter_.registerResizeHandler(this.resizeHandler_);\n      }\n    }\n\n    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n  }\n\n  /**\n   * @param {!Event} e\n   * @private\n   */\n  registerDeactivationHandlers_(e) {\n    if (e.type === 'keydown') {\n      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n    } else {\n      POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n        this.adapter_.registerDocumentInteractionHandler(type, this.deactivateHandler_);\n      });\n    }\n  }\n\n  /** @private */\n  deregisterRootHandlers_() {\n    ACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterInteractionHandler(type, this.activateHandler_);\n    });\n    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n\n    if (this.adapter_.isUnbounded()) {\n      this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n    }\n  }\n\n  /** @private */\n  deregisterDeactivationHandlers_() {\n    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n    POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterDocumentInteractionHandler(type, this.deactivateHandler_);\n    });\n  }\n\n  /** @private */\n  removeCssVars_() {\n    const {strings} = MDCRippleFoundation;\n    Object.keys(strings).forEach((k) => {\n      if (k.indexOf('VAR_') === 0) {\n        this.adapter_.updateCssVariable(strings[k], null);\n      }\n    });\n  }\n\n  /**\n   * @param {!Event=} e\n   * @private\n   */\n  activate_(e) {\n    if (this.adapter_.isSurfaceDisabled()) {\n      return;\n    }\n\n    const activationState = this.activationState_;\n    if (activationState.isActivated) {\n      return;\n    }\n\n    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n    const previousActivationEvent = this.previousActivationEvent_;\n    const isSameInteraction = previousActivationEvent && e !== undefined && previousActivationEvent.type !== e.type;\n    if (isSameInteraction) {\n      return;\n    }\n\n    activationState.isActivated = true;\n    activationState.isProgrammatic = e === undefined;\n    activationState.activationEvent = e;\n    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e !== undefined && (\n      e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown'\n    );\n\n    const hasActivatedChild = e !== undefined && activatedTargets.length > 0 && activatedTargets.some(\n      (target) => this.adapter_.containsEventTarget(target));\n    if (hasActivatedChild) {\n      // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n      this.resetActivationState_();\n      return;\n    }\n\n    if (e !== undefined) {\n      activatedTargets.push(/** @type {!EventTarget} */ (e.target));\n      this.registerDeactivationHandlers_(e);\n    }\n\n    activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n    if (activationState.wasElementMadeActive) {\n      this.animateActivation_();\n    }\n\n    requestAnimationFrame(() => {\n      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n      activatedTargets = [];\n\n      if (!activationState.wasElementMadeActive && e !== undefined && (e.key === ' ' || e.keyCode === 32)) {\n        // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n        // active states inconsistently when they're called within event handling code:\n        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n        // variable is set within a rAF callback for a submit button interaction (#2241).\n        activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n        if (activationState.wasElementMadeActive) {\n          this.animateActivation_();\n        }\n      }\n\n      if (!activationState.wasElementMadeActive) {\n        // Reset activation state immediately if element was not made active.\n        this.activationState_ = this.defaultActivationState_();\n      }\n    });\n  }\n\n  /**\n   * @param {!Event=} e\n   * @private\n   */\n  checkElementMadeActive_(e) {\n    return (e !== undefined && e.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;\n  }\n\n  /**\n   * @param {!Event=} event Optional event containing position information.\n   */\n  activate(event) {\n    this.activate_(event);\n  }\n\n  /** @private */\n  animateActivation_() {\n    const {VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END} = MDCRippleFoundation.strings;\n    const {FG_DEACTIVATION, FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {DEACTIVATION_TIMEOUT_MS} = MDCRippleFoundation.numbers;\n\n    this.layoutInternal_();\n\n    let translateStart = '';\n    let translateEnd = '';\n\n    if (!this.adapter_.isUnbounded()) {\n      const {startPoint, endPoint} = this.getFgTranslationCoordinates_();\n      translateStart = `${startPoint.x}px, ${startPoint.y}px`;\n      translateEnd = `${endPoint.x}px, ${endPoint.y}px`;\n    }\n\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n    // Cancel any ongoing activation/deactivation animations\n    clearTimeout(this.activationTimer_);\n    clearTimeout(this.fgDeactivationRemovalTimer_);\n    this.rmBoundedActivationClasses_();\n    this.adapter_.removeClass(FG_DEACTIVATION);\n\n    // Force layout in order to re-trigger the animation.\n    this.adapter_.computeBoundingRect();\n    this.adapter_.addClass(FG_ACTIVATION);\n    this.activationTimer_ = setTimeout(() => this.activationTimerCallback_(), DEACTIVATION_TIMEOUT_MS);\n  }\n\n  /**\n   * @private\n   * @return {{startPoint: PointType, endPoint: PointType}}\n   */\n  getFgTranslationCoordinates_() {\n    const {activationEvent, wasActivatedByPointer} = this.activationState_;\n\n    let startPoint;\n    if (wasActivatedByPointer) {\n      startPoint = getNormalizedEventCoords(\n        /** @type {!Event} */ (activationEvent),\n        this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect()\n      );\n    } else {\n      startPoint = {\n        x: this.frame_.width / 2,\n        y: this.frame_.height / 2,\n      };\n    }\n    // Center the element around the start point.\n    startPoint = {\n      x: startPoint.x - (this.initialSize_ / 2),\n      y: startPoint.y - (this.initialSize_ / 2),\n    };\n\n    const endPoint = {\n      x: (this.frame_.width / 2) - (this.initialSize_ / 2),\n      y: (this.frame_.height / 2) - (this.initialSize_ / 2),\n    };\n\n    return {startPoint, endPoint};\n  }\n\n  /** @private */\n  runDeactivationUXLogicIfReady_() {\n    // This method is called both when a pointing device is released, and when the activation animation ends.\n    // The deactivation animation should only run after both of those occur.\n    const {FG_DEACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {hasDeactivationUXRun, isActivated} = this.activationState_;\n    const activationHasEnded = hasDeactivationUXRun || !isActivated;\n\n    if (activationHasEnded && this.activationAnimationHasEnded_) {\n      this.rmBoundedActivationClasses_();\n      this.adapter_.addClass(FG_DEACTIVATION);\n      this.fgDeactivationRemovalTimer_ = setTimeout(() => {\n        this.adapter_.removeClass(FG_DEACTIVATION);\n      }, numbers.FG_DEACTIVATION_MS);\n    }\n  }\n\n  /** @private */\n  rmBoundedActivationClasses_() {\n    const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    this.adapter_.removeClass(FG_ACTIVATION);\n    this.activationAnimationHasEnded_ = false;\n    this.adapter_.computeBoundingRect();\n  }\n\n  resetActivationState_() {\n    this.previousActivationEvent_ = this.activationState_.activationEvent;\n    this.activationState_ = this.defaultActivationState_();\n    // Touch devices may fire additional events for the same interaction within a short time.\n    // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n    setTimeout(() => this.previousActivationEvent_ = undefined, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n  }\n\n  /**\n   * @private\n   */\n  deactivate_() {\n    const activationState = this.activationState_;\n    // This can happen in scenarios such as when you have a keyup event that blurs the element.\n    if (!activationState.isActivated) {\n      return;\n    }\n\n    const state = /** @type {!ActivationStateType} */ (Object.assign({}, activationState));\n\n    if (activationState.isProgrammatic) {\n      requestAnimationFrame(() => this.animateDeactivation_(state));\n      this.resetActivationState_();\n    } else {\n      this.deregisterDeactivationHandlers_();\n      requestAnimationFrame(() => {\n        this.activationState_.hasDeactivationUXRun = true;\n        this.animateDeactivation_(state);\n        this.resetActivationState_();\n      });\n    }\n  }\n\n  deactivate() {\n    this.deactivate_();\n  }\n\n  /**\n   * @param {!ActivationStateType} options\n   * @private\n   */\n  animateDeactivation_({wasActivatedByPointer, wasElementMadeActive}) {\n    if (wasActivatedByPointer || wasElementMadeActive) {\n      this.runDeactivationUXLogicIfReady_();\n    }\n  }\n\n  layout() {\n    if (this.layoutFrame_) {\n      cancelAnimationFrame(this.layoutFrame_);\n    }\n    this.layoutFrame_ = requestAnimationFrame(() => {\n      this.layoutInternal_();\n      this.layoutFrame_ = 0;\n    });\n  }\n\n  /** @private */\n  layoutInternal_() {\n    this.frame_ = this.adapter_.computeBoundingRect();\n    const maxDim = Math.max(this.frame_.height, this.frame_.width);\n\n    // Surface diameter is treated differently for unbounded vs. bounded ripples.\n    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n    // `overflow: hidden`.\n    const getBoundedRadius = () => {\n      const hypotenuse = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));\n      return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n    };\n\n    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();\n\n    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n    this.initialSize_ = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n    this.fgScale_ = this.maxRadius_ / this.initialSize_;\n\n    this.updateLayoutCssVars_();\n  }\n\n  /** @private */\n  updateLayoutCssVars_() {\n    const {\n      VAR_FG_SIZE, VAR_LEFT, VAR_TOP, VAR_FG_SCALE,\n    } = MDCRippleFoundation.strings;\n\n    this.adapter_.updateCssVariable(VAR_FG_SIZE, `${this.initialSize_}px`);\n    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n\n    if (this.adapter_.isUnbounded()) {\n      this.unboundedCoords_ = {\n        left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),\n        top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),\n      };\n\n      this.adapter_.updateCssVariable(VAR_LEFT, `${this.unboundedCoords_.left}px`);\n      this.adapter_.updateCssVariable(VAR_TOP, `${this.unboundedCoords_.top}px`);\n    }\n  }\n\n  /** @param {boolean} unbounded */\n  setUnbounded(unbounded) {\n    const {UNBOUNDED} = MDCRippleFoundation.cssClasses;\n    if (unbounded) {\n      this.adapter_.addClass(UNBOUNDED);\n    } else {\n      this.adapter_.removeClass(UNBOUNDED);\n    }\n  }\n\n  handleFocus() {\n    requestAnimationFrame(() =>\n      this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED));\n  }\n\n  handleBlur() {\n    requestAnimationFrame(() =>\n      this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED));\n  }\n}\n\nexport default MDCRippleFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.\n * @private {boolean|undefined}\n */\nlet supportsCssVariables_;\n\n/**\n * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.\n * @private {boolean|undefined}\n */\nlet supportsPassive_;\n\n/**\n * @param {!Window} windowObj\n * @return {boolean}\n */\nfunction detectEdgePseudoVarBug(windowObj) {\n  // Detect versions of Edge with buggy var() support\n  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/\n  const document = windowObj.document;\n  const node = document.createElement('div');\n  node.className = 'mdc-ripple-surface--test-edge-var-bug';\n  document.body.appendChild(node);\n\n  // The bug exists if ::before style ends up propagating to the parent element.\n  // Additionally, getComputedStyle returns null in iframes with display: \"none\" in Firefox,\n  // but Firefox is known to support CSS custom properties correctly.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  const computedStyle = windowObj.getComputedStyle(node);\n  const hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';\n  node.remove();\n  return hasPseudoVarBug;\n}\n\n/**\n * @param {!Window} windowObj\n * @param {boolean=} forceRefresh\n * @return {boolean|undefined}\n */\n\nfunction supportsCssVariables(windowObj, forceRefresh = false) {\n  let supportsCssVariables = supportsCssVariables_;\n  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n    return supportsCssVariables;\n  }\n\n  const supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';\n  if (!supportsFunctionPresent) {\n    return;\n  }\n\n  const explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');\n  // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n  // See: README section on Safari\n  const weAreFeatureDetectingSafari10plus = (\n    windowObj.CSS.supports('(--css-vars: yes)') &&\n    windowObj.CSS.supports('color', '#00000000')\n  );\n\n  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {\n    supportsCssVariables = !detectEdgePseudoVarBug(windowObj);\n  } else {\n    supportsCssVariables = false;\n  }\n\n  if (!forceRefresh) {\n    supportsCssVariables_ = supportsCssVariables;\n  }\n  return supportsCssVariables;\n}\n\n//\n/**\n * Determine whether the current browser supports passive event listeners, and if so, use them.\n * @param {!Window=} globalObj\n * @param {boolean=} forceRefresh\n * @return {boolean|!EventListenerOptions}\n */\nfunction applyPassive(globalObj = window, forceRefresh = false) {\n  if (supportsPassive_ === undefined || forceRefresh) {\n    let isSupported = false;\n    try {\n      globalObj.document.addEventListener('test', null, {get passive() {\n        isSupported = true;\n        return isSupported;\n      }});\n    } catch (e) { }\n\n    supportsPassive_ = isSupported;\n  }\n\n  return supportsPassive_\n    ? /** @type {!EventListenerOptions} */ ({passive: true})\n    : false;\n}\n\n/**\n * @param {!Object} HTMLElementPrototype\n * @return {string}\n */\nfunction getMatchesProperty(HTMLElementPrototype) {\n  /**\n   * Order is important because we return the first existing method we find.\n   * Do not change the order of the items in the below array.\n   */\n  const matchesMethods = ['matches', 'webkitMatchesSelector', 'msMatchesSelector'];\n  let method = 'matches';\n  for (let i = 0; i < matchesMethods.length; i++) {\n    const matchesMethod = matchesMethods[i];\n    if (matchesMethod in HTMLElementPrototype) {\n      method = matchesMethod;\n      break;\n    }\n  }\n\n  return method;\n}\n\n/**\n * @param {!Event} ev\n * @param {{x: number, y: number}} pageOffset\n * @param {!ClientRect} clientRect\n * @return {{x: number, y: number}}\n */\nfunction getNormalizedEventCoords(ev, pageOffset, clientRect) {\n  const {x, y} = pageOffset;\n  const documentX = x + clientRect.left;\n  const documentY = y + clientRect.top;\n\n  let normalizedX;\n  let normalizedY;\n  // Determine touch point relative to the ripple container.\n  if (ev.type === 'touchstart') {\n    ev = /** @type {!TouchEvent} */ (ev);\n    normalizedX = ev.changedTouches[0].pageX - documentX;\n    normalizedY = ev.changedTouches[0].pageY - documentY;\n  } else {\n    ev = /** @type {!MouseEvent} */ (ev);\n    normalizedX = ev.pageX - documentX;\n    normalizedY = ev.pageY - documentY;\n  }\n\n  return {x: normalizedX, y: normalizedY};\n}\n\nexport {supportsCssVariables, applyPassive, getMatchesProperty, getNormalizedEventCoords};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst cssClasses = {\n  // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n  // given that it's an 'upgrade' to an existing component. That being said it is the root\n  // CSS class that all other CSS classes derive from.\n  ROOT: 'mdc-ripple-upgraded',\n  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n};\n\nconst strings = {\n  VAR_LEFT: '--mdc-ripple-left',\n  VAR_TOP: '--mdc-ripple-top',\n  VAR_FG_SIZE: '--mdc-ripple-fg-size',\n  VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n};\n\nconst numbers = {\n  PADDING: 10,\n  INITIAL_ORIGIN_SCALE: 0.6,\n  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n  TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Ripple. Provides an interface for managing\n * - classes\n * - dom\n * - CSS variables\n * - position\n * - dimensions\n * - scroll position\n * - event handlers\n * - unbounded, active and disabled states\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCRippleAdapter {\n  /** @return {boolean} */\n  browserSupportsCssVars() {}\n\n  /** @return {boolean} */\n  isUnbounded() {}\n\n  /** @return {boolean} */\n  isSurfaceActive() {}\n\n  /** @return {boolean} */\n  isSurfaceDisabled() {}\n\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /** @param {!EventTarget} target */\n  containsEventTarget(target) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  registerResizeHandler(handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  deregisterResizeHandler(handler) {}\n\n  /**\n   * @param {string} varName\n   * @param {?number|string} value\n   */\n  updateCssVariable(varName, value) {}\n\n  /** @return {!ClientRect} */\n  computeBoundingRect() {}\n\n  /** @return {{x: number, y: number}} */\n  getWindowPageOffset() {}\n}\n\nexport default MDCRippleAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from './foundation';\n\n/**\n * @template F\n */\nclass MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCComponent}\n   */\n  static attachTo(root) {\n    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n    // returns an instantiated component with its root set to that element. Also note that in the cases of\n    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n    // from getDefaultFoundation().\n    return new MDCComponent(root, new MDCFoundation());\n  }\n\n  /**\n   * @param {!Element} root\n   * @param {F=} foundation\n   * @param {...?} args\n   */\n  constructor(root, foundation = undefined, ...args) {\n    /** @protected {!Element} */\n    this.root_ = root;\n    this.initialize(...args);\n    // Note that we initialize foundation here and not within the constructor's default param so that\n    // this.root_ is defined and can be used within the foundation class.\n    /** @protected {!F} */\n    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n    this.foundation_.init();\n    this.initialSyncWithDOM();\n  }\n\n  initialize(/* ...args */) {\n    // Subclasses can override this to do any additional setup work that would be considered part of a\n    // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n    // initialized. Any additional arguments besides root and foundation will be passed in here.\n  }\n\n  /**\n   * @return {!F} foundation\n   */\n  getDefaultFoundation() {\n    // Subclasses must override this method to return a properly configured foundation class for the\n    // component.\n    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n      'foundation class');\n  }\n\n  initialSyncWithDOM() {\n    // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n    // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n  }\n\n  destroy() {\n    // Subclasses may implement this method to release any resources / deregister any listeners they have\n    // attached. An example of this might be deregistering a resize event from the window object.\n    this.foundation_.destroy();\n  }\n\n  /**\n   * Wrapper method to add an event listener to the component's root element. This is most useful when\n   * listening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  listen(evtType, handler) {\n    this.root_.addEventListener(evtType, handler);\n  }\n\n  /**\n   * Wrapper method to remove an event listener to the component's root element. This is most useful when\n   * unlistening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  unlisten(evtType, handler) {\n    this.root_.removeEventListener(evtType, handler);\n  }\n\n  /**\n   * Fires a cross-browser-compatible custom event from the component root of the given type,\n   * with the given data.\n   * @param {string} evtType\n   * @param {!Object} evtData\n   * @param {boolean=} shouldBubble\n   */\n  emit(evtType, evtData, shouldBubble = false) {\n    let evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        detail: evtData,\n        bubbles: shouldBubble,\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n\n    this.root_.dispatchEvent(evt);\n  }\n}\n\nexport default MDCComponent;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ENTRY_ANIMATION_NAME: 'mdc-chip-entry',\n  INTERACTION_EVENT: 'MDCChip:interaction',\n  SELECTION_EVENT: 'MDCChip:selection',\n  TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',\n  REMOVAL_EVENT: 'MDCChip:removal',\n  CHECKMARK_SELECTOR: '.mdc-chip__checkmark',\n  LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',\n  TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHECKMARK: 'mdc-chip__checkmark',\n  CHIP_EXIT: 'mdc-chip--exit',\n  HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',\n  LEADING_ICON: 'mdc-chip__icon--leading',\n  TRAILING_ICON: 'mdc-chip__icon--trailing',\n  SELECTED: 'mdc-chip--selected',\n};\n\nexport {strings, cssClasses};\n"],"names":["cssClasses","strings"],"mappings":"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"}
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Platform } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcNotchedOutline } from '@angular-mdc/web/notched-outline';
import { MdcFloatingLabel } from '@angular-mdc/web/floating-label';
import { MdcMenu } from '@angular-mdc/web/menu';
import { MdcLineRipple } from '@angular-mdc/web/line-ripple';
import { MdcFormField, MdcFormFieldControl, MdcHelperText, ErrorStateMatcher, CanUpdateErrorState, CanUpdateErrorStateCtor } from '@angular-mdc/web/form-field';
import { MdcList } from '@angular-mdc/web/list';
import { MdcSelectIcon } from './select-icon';
/**
 * Represents the default options for mdc-select that can be configured
 * using an `MDC_SELECT_DEFAULT_OPTIONS` injection token.
 */
export interface MdcSelectDefaultOptions {
    outlined?: boolean;
}
/**
 * Injection token that can be used to configure the default options for all
 * mdc-select usage within an app.
 */
export declare const MDC_SELECT_DEFAULT_OPTIONS: InjectionToken<MdcSelectDefaultOptions>;
export declare class MdcSelectBase {
    _defaultErrorStateMatcher: ErrorStateMatcher;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    ngControl: NgControl;
    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);
}
export declare const _MdcSelectMixinBase: CanUpdateErrorStateCtor & typeof MdcSelectBase;
export declare class MdcSelectChange {
    source: MdcSelect;
    index: number;
    value: any;
    constructor(source: MdcSelect, index: number, value: any);
}
export declare class MdcSelectOption {
}
export declare class MdcSelect extends _MdcSelectMixinBase implements AfterContentInit, AfterViewInit, DoCheck, OnDestroy, ControlValueAccessor, MdcFormFieldControl<any>, CanUpdateErrorState {
    private _platform;
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    _defaultErrorStateMatcher: ErrorStateMatcher;
    private _parentFormField;
    private _ripple;
    ngControl: NgControl;
    private _defaults;
    /** Emits whenever the component is destroyed. */
    private _destroyed;
    private _uniqueId;
    controlType: string;
    _enhancedSelectedText: string;
    id: string;
    name: string | null;
    /** The aria-describedby attribute on the input for improved a11y. */
    _ariaDescribedby?: string;
    /** Placeholder to be shown if no value has been selected. */
    placeholder: string;
    private _placeholder;
    disabled: boolean;
    private _disabled;
    floatLabel: boolean;
    private _floatLabel;
    outlined: boolean;
    private _outlined;
    required: boolean;
    private _required;
    valid: boolean | undefined;
    private _valid;
    autosize: boolean;
    private _autosize;
    compareWith: (o1: any, o2: any) => boolean;
    private _compareWith;
    /** Value of the select control. */
    value: any;
    private _value;
    helperText: MdcHelperText | null;
    private _helperText;
    /** An object used to control when error messages are shown. */
    errorStateMatcher?: ErrorStateMatcher;
    /** Event emitted when the selected value has been changed by the user. */
    readonly selectionChange: EventEmitter<MdcSelectChange>;
    /**
     * Event that emits whenever the raw value of the select changes. This is here primarily
     * to facilitate the two-way binding for the `value` input.
     */
    readonly valueChange: EventEmitter<{
        index: number;
        value: any;
    }>;
    _floatingLabel?: MdcFloatingLabel;
    _lineRipple?: MdcLineRipple;
    _notchedOutline?: MdcNotchedOutline;
    _nativeSelect: ElementRef<HTMLSelectElement>;
    _selectedText: ElementRef<HTMLElement>;
    _menu: MdcMenu;
    leadingIcon?: MdcSelectIcon;
    _list: MdcList;
    _options: QueryList<MdcSelectOption>;
    /** View to model callback called when value changes */
    _onChange: (value: any) => void;
    /** View to model callback called when select has been touched */
    _onTouched: () => void;
    readonly placeholderText: string;
    private _createAdapter;
    private _getCommonAdapterMethods;
    private _getNativeSelectAdapterMethods;
    private _getEnhancedSelectAdapterMethods;
    private _getOutlineAdapterMethods;
    private _getLabelAdapterMethods;
    /** Returns a map of all subcomponents to subfoundations.*/
    private _getFoundationMap;
    private _foundation;
    constructor(_platform: Platform, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, _defaultErrorStateMatcher: ErrorStateMatcher, _parentFormField: MdcFormField, _ripple: MdcRipple, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaults: MdcSelectDefaultOptions);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    init(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    onChange(event: Event): void;
    onBlur(): void;
    onFocus(): void;
    onInteraction(evt: MouseEvent | TouchEvent): void;
    onKeydown(evt: KeyboardEvent): void;
    getValue(): any;
    getSelectedIndex(): number;
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    setSelectionByValue(value: any, isUserInput?: boolean): void;
    setSelectedIndex(index: number): void;
    setDisabledState(disabled: boolean): void;
    focus(): void;
    reset(): void;
    /** Initialize Select internal state based on the environment state */
    private layout;
    private _initializeSelection;
    private _initHelperText;
    private _initRipple;
    /** Set the default options. */
    private _setDefaultOptions;
    private _destroy;
    private _isEnhancedVariant;
    private _setEnhancedSelection;
    private _enhancedSelectSetup;
    private _isValid;
    private _hasFloatingLabel;
    private _getFloatingLabel;
    /**
     * Calculates where the line ripple should start based on the x coordinate within the component.
     */
    private _getNormalizedXCoordinate;
    private _setWidth;
    /** Retrieves the select input element. */
    private _getInputElement;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

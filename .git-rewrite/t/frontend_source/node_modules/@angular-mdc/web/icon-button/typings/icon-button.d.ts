import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Provider, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';
export declare const MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR: Provider;
/** Change event object emitted by MdcIconButton. */
export declare class MdcIconButtonChange {
    source: MdcIconButton;
    value: any;
    constructor(source: MdcIconButton, value: any);
}
export declare class MdcIconOn {
}
export declare class MdcIconButton implements AfterContentInit, ControlValueAccessor, OnDestroy {
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    ripple: MdcRipple;
    private _uniqueId;
    id: string;
    readonly inputId: string;
    name: string | null;
    icon: string | null;
    on: boolean;
    private _on;
    disabled: boolean;
    private _disabled;
    readonly change: EventEmitter<MdcIconButtonChange>;
    icons: QueryList<MdcIcon>;
    /** Subscription to changes in icons. */
    private _changeSubscription;
    _onChange: (value: any) => void;
    _onTouched: () => void;
    private _createAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, ripple: MdcRipple);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    toggle(isOn?: boolean): void;
    setOn(on: boolean): void;
    /** Sets the button disabled state */
    setDisabled(disabled: boolean): void;
    handleClick(): void;
    private _getHostElement;
}

import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy } from '@angular/core';
import { UniqueSelectionDispatcher } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFormField, MdcFormFieldControl } from '@angular-mdc/web/form-field';
/**
 * Describes a parent MdcRadioGroup component.
 * Contains properties that MdcRadio can inherit.
 */
export interface MdcRadioGroupParentComponent {
    name: string;
    selected: MdcRadio | null;
    value: any;
    disabled: boolean;
    required: boolean;
    emitChangeEvent(): void;
    _controlValueAccessorChangeFn(value: any): void;
    _touch(): void;
}
/**
 * Injection token used to provide the parent MdcRadioGroup component to MdcRadio.
 */
export declare const MDC_RADIO_GROUP_PARENT_COMPONENT: InjectionToken<MdcRadioGroupParentComponent>;
/** Change event object emitted by MdcRadio. */
export declare class MdcRadioChange {
    /** The source MdcRadio of the event. */
    source: MdcRadio;
    /** The value of the radio button. */
    value: any;
    constructor(
    /** The source MdcRadio of the event. */
    source: MdcRadio, 
    /** The value of the radio button. */
    value: any);
}
export declare class MdcRadio implements AfterViewInit, OnDestroy, MdcFormFieldControl<any> {
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    ripple: MdcRipple;
    private _radioDispatcher;
    radioGroup: MdcRadioGroupParentComponent;
    private _parentFormField;
    private _uniqueId;
    /** The unique ID for the radio button. */
    id: string;
    /** Analog to HTML 'name' attribute used to group radios for unique selection. */
    name: string;
    tabIndex: number;
    ariaLabel?: string;
    ariaLabelledby?: string;
    /** The 'aria-describedby' attribute is read after the element's label and field type. */
    ariaDescribedby?: string;
    readonly inputId: string;
    value: any;
    private _value;
    checked: boolean;
    private _checked;
    disabled: boolean;
    private _disabled;
    required: boolean;
    private _required;
    readonly change: EventEmitter<MdcRadioChange>;
    input: ElementRef<HTMLInputElement>;
    /** Unregister function for _radioDispatcher */
    private _removeUniqueSelectionListener;
    private _createAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, ripple: MdcRipple, _radioDispatcher: UniqueSelectionDispatcher, radioGroup: MdcRadioGroupParentComponent, _parentFormField: MdcFormField);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onInputClick(event: Event): void;
    onInputChange(event: Event): void;
    setChecked(checked: boolean): void;
    setValue(value: any): void;
    focus(): void;
    markForCheck(): void;
    private _initRipple;
    /** Dispatch change event with current value. */
    private _emitChangeEvent;
    /** Retrieves the DOM element of the component input. */
    private _getInputElement;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Platform } from '@angular-mdc/web/common';
export interface MdcMenuSurfaceOpenedEvent {
    detail: string;
}
export interface AnchorMargin {
    top?: number;
    right?: number;
    bottom?: number;
    left?: number;
}
export interface Coordinates {
    x: number;
    y: number;
}
export declare type AnchorCorner = 'bottomEnd' | 'bottomStart' | 'topEnd' | 'topStart';
export declare abstract class MdcMenuSurfaceBase {
    changeDetectorRef: ChangeDetectorRef;
    platform: Platform;
    private _ngZone;
    elementRef: ElementRef<HTMLElement>;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    private _previousFocus;
    private _firstFocusableElement;
    private _lastFocusableElement;
    open: boolean;
    private _open;
    anchorElement: Element | null;
    private _anchorElement;
    anchorCorner: AnchorCorner;
    private _anchorCorner;
    quickOpen: boolean;
    private _quickOpen;
    fixed: boolean;
    private _fixed;
    coordinates: Coordinates;
    private _coordinates;
    anchorMargin: AnchorMargin;
    private _anchorMargin;
    hoistToBody: boolean;
    private _hoistToBody;
    /** Emits an event whenever the menu surface is opened. */
    readonly opened: EventEmitter<void>;
    /** Emits an event whenever the menu surface is closed. */
    readonly closed: EventEmitter<void>;
    /** Subscription to interaction events in menu-surface. */
    private _windowClickSubscription;
    protected _createSurfaceAdapter(): {
        addClass: (className: string) => void;
        removeClass: (className: string) => void;
        hasClass: (className: string) => boolean;
        hasAnchor: () => boolean;
        notifyClose: () => void;
        notifyOpen: () => void;
        isElementInContainer: (el: Element) => boolean;
        isRtl: () => boolean | undefined;
        setTransformOrigin: (origin: string) => void;
    } & {
        isFocused: () => boolean;
        saveFocus: () => void;
        restoreFocus: () => void;
        isFirstElementFocused: () => boolean | null;
        isLastElementFocused: () => boolean | null;
        focusFirstElement: () => void;
        focusLastElement: () => void;
    } & {
        getInnerDimensions: () => {
            width: number;
            height: number;
        };
        getAnchorDimensions: () => ClientRect | null | undefined;
        getWindowDimensions: () => {
            width: number;
            height: number;
        };
        getBodyDimensions: () => {
            width: number;
            height: number;
        };
        getWindowScroll: () => {
            x: number;
            y: number;
        };
        setPosition: (position: {
            left: string;
            right: string;
            top: string;
            bottom: string;
        }) => void;
        setMaxHeight: (height: string) => string;
    };
    private _getFocusAdaptermethods;
    private _getDimensionAdapterMethods;
    private _foundation;
    constructor(changeDetectorRef: ChangeDetectorRef, platform: Platform, _ngZone: NgZone, elementRef: ElementRef<HTMLElement>);
    protected initMenuSurface(): void;
    protected destroyMenuSurface(): void;
    protected setOpen(): void;
    /**
     * Removes the menu-surface from it's current location and appends it to the
     * body to overcome any overflow:hidden issues.
     */
    protected setHoistToBody(): void;
    private _registerKeydownListener;
    private _registerWindowClickListener;
    private _deregisterWindowClickListener;
    /** Retrieves the DOM element of the component host. */
    protected _getHostElement(): HTMLElement;
}

import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { Platform } from '@angular-mdc/web/common';
import { MdcTabScroller, MdcTabScrollerAlignment } from '@angular-mdc/web/tab-scroller';
import { MdcTab, MdcTabInteractedEvent } from '@angular-mdc/web/tab';
export declare class MdcTabActivatedEvent {
    source: MdcTabBar;
    index: number;
    tab: MdcTab;
    constructor(source: MdcTabBar, index: number, tab: MdcTab);
}
export declare class MdcTabBar implements AfterContentInit, OnDestroy {
    private _platform;
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    fade: boolean;
    private _fade;
    stacked: boolean;
    private _stacked;
    fixed: boolean;
    private _fixed;
    align: MdcTabScrollerAlignment | null;
    private _align;
    iconIndicator: string | null;
    private _iconIndicator;
    useAutomaticActivation: boolean;
    private _useAutomaticActivation;
    activeTabIndex: number;
    private _activeTabIndex;
    focusOnActivate: boolean;
    private _focusOnActivate;
    readonly activated: EventEmitter<MdcTabActivatedEvent>;
    tabScroller: MdcTabScroller;
    tabs: QueryList<MdcTab>;
    /** Subscription to changes in tabs. */
    private _changeSubscription;
    /** Subscription to interaction events in tabs. */
    private _tabInteractionSubscription;
    /** Combined stream of all of the tab interaction events. */
    readonly tabInteractions: Observable<MdcTabInteractedEvent>;
    private _createAdapter;
    private _foundation;
    constructor(_platform: Platform, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _syncTabs;
    private _resetTabSubscriptions;
    private _dropSubscriptions;
    /** Listens to interaction events on each tab. */
    private _listenToTabInteraction;
    /** Activates the tab at the given index */
    activateTab(index: number): void;
    /** Scrolls the tab at the given index into view */
    scrollIntoView(index: number): void;
    getActiveTabIndex(): number;
    getActiveTab(): MdcTab | undefined;
    /** Returns an index for given tab */
    getTabIndex(tab: MdcTab): number;
    /** Disable or enable the tab at the given index */
    disableTab(index: number, disabled: boolean): void;
    _onKeydown(evt: KeyboardEvent): void;
    private _indexIsInRange;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

import { OnDestroy, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { Platform } from '@angular-mdc/web/common';
export declare class MdcRippleConfig {
    surface: any;
    activator?: any;
    unbounded?: boolean;
    disabled?: boolean;
}
export declare class MdcRipple implements OnDestroy {
    private _ngZone;
    private _platform;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    private _initialized;
    readonly initialized: boolean;
    private _rippleConfig;
    /** Time in milliseconds when the last touchstart event happened. */
    private _lastTouchStartEvent;
    private _focusSubscription;
    private _blurSubscription;
    private _activationEventsSubscription;
    private _pointerDeactivationEventsSubscription;
    /** Combined stream of all of the activation events. */
    readonly activationEvents: Observable<any>;
    /** Combined stream of all of the de-activation events. */
    readonly pointerDeactivationEvents: Observable<any>;
    createAdapter(): {
        browserSupportsCssVars: () => any;
        isUnbounded: () => boolean | undefined;
        isSurfaceActive: () => any;
        isSurfaceDisabled: () => boolean | undefined;
        addClass: (className: string) => any;
        removeClass: (className: string) => any;
        containsEventTarget: (target: EventTarget) => any;
        registerDocumentInteractionHandler: (evtType: string, handler: EventListener) => void;
        deregisterDocumentInteractionHandler: (evtType: string, handler: EventListener) => void;
        registerResizeHandler: (handler: EventListener) => void;
        deregisterResizeHandler: (handler: EventListener) => void;
        updateCssVariable: (varName: string, value: string) => any;
        computeBoundingRect: () => any;
        getWindowPageOffset: () => {
            x: number;
            y: number;
        };
    };
    protected _foundation: {
        init(): void;
        destroy(): void;
        activate(event?: Event): void;
        deactivate(event?: Event): void;
        handleFocus(): void;
        handleBlur(): void;
    };
    constructor(_ngZone: NgZone, _platform: Platform);
    init(config: MdcRippleConfig, adapter?: any): void;
    destroy(): void;
    ngOnDestroy(): void;
    activateRipple(event?: Event): void;
    deactivateRipple(event?: Event): void;
    handleFocus(): void;
    handleBlur(): void;
    private _loadListeners;
    private _unloadListeners;
}

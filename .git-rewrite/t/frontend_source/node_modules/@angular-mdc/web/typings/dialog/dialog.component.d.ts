import { AfterViewInit, ElementRef, NgZone, OnDestroy, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { Platform } from '@angular-mdc/web/common';
import { MdcDialogButton, MdcDialogContent, MdcDialogSurface } from './dialog-directives';
import { MdcDialogRef } from './dialog-ref';
import { MdcDialogConfig } from './dialog-config';
export declare class MdcDialogComponent implements AfterViewInit, OnDestroy {
    private _ngZone;
    private _platform;
    private _elementRef;
    dialogRef: MdcDialogRef<MdcDialogComponent>;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    private _focusTrapInstance;
    private _scrollable;
    config: MdcDialogConfig;
    _surface: MdcDialogSurface;
    _content: MdcDialogContent;
    _buttons?: QueryList<MdcDialogButton>;
    private _layoutEventSubscription;
    /** Combined stream of all of the dialog layout events. */
    readonly layoutEvents: Observable<any>;
    private _createAdapter;
    private _foundation;
    constructor(_ngZone: NgZone, _platform: Platform, _elementRef: ElementRef<HTMLElement>, dialogRef: MdcDialogRef<MdcDialogComponent>);
    ngAfterViewInit(): void;
    private _initialize;
    ngOnDestroy(): void;
    _onInteraction(evt: KeyboardEvent | MouseEvent): void;
    private _getDefaultButton;
    private _closeDialogByRef;
    private _loadListeners;
    private _createFocusTrapInstance;
    /** Retrieves the DOM element of the component host. */
    private _getDialog;
}

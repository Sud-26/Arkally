import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { Platform } from '@angular-mdc/web/common';
import { MdcList } from '@angular-mdc/web/list';
export declare type MdcDrawerType = 'permanent' | 'dismissible' | 'modal';
export declare class MdcDrawerHeader {
    elementRef: ElementRef<HTMLElement>;
    title?: string;
    subtitle?: string;
    constructor(elementRef: ElementRef<HTMLElement>);
}
export declare class MdcDrawerTitle {
}
export declare class MdcDrawerSubtitle {
}
export declare class MdcDrawerContent {
}
export declare class MdcDrawerAppContent {
}
export declare class MdcDrawer implements AfterViewInit, OnDestroy {
    private _platform;
    private _ngZone;
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    private _initialized;
    private _previousFocus;
    private _scrimElement;
    private _focusTrapInstance;
    open: boolean;
    private _open;
    drawer: string;
    private _drawer;
    fixedAdjustElement: any;
    private _fixedAdjustElement;
    readonly opened: EventEmitter<void>;
    readonly closed: EventEmitter<void>;
    _list?: MdcList;
    private _transitionEndSubscription;
    private _scrimSubscription;
    readonly modal: boolean;
    readonly dismissible: boolean;
    readonly permanent: boolean;
    private _createAdapter;
    private _foundation;
    constructor(_platform: Platform, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDrawer(drawer: string): void;
    setFixedAdjustElement(element: any): void;
    _onKeydown(evt: KeyboardEvent): void;
    private _loadListeners;
    private _unloadListeners;
    private _createScrim;
    private _initFoundation;
    private _initListType;
    private _removeDrawerModifiers;
    private _initTransitionEndListener;
    private _createFocusTrapInstance;
    private _getHostElement;
}

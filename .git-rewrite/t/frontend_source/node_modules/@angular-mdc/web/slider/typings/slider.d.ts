import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Platform } from '@angular-mdc/web/common';
export declare const MDC_SLIDER_CONTROL_VALUE_ACCESSOR: any;
export declare class MdcSliderChange {
    source: MdcSlider;
    value: number;
    constructor(source: MdcSlider, value: number);
}
export declare class MdcSlider implements AfterViewInit, OnDestroy, ControlValueAccessor {
    private _platform;
    private _changeDetectorRef;
    elementRef: ElementRef;
    discrete: boolean;
    private _discrete;
    markers: boolean;
    private _markers;
    min: number;
    private _min;
    max: number;
    private _max;
    step: number;
    private _step;
    value: number;
    private _value;
    disabled: boolean;
    private _disabled;
    readonly change: EventEmitter<MdcSliderChange>;
    readonly input: EventEmitter<MdcSliderChange>;
    thumbContainer: ElementRef<HTMLElement>;
    _sliderThumb: ElementRef<HTMLElement>;
    track: ElementRef<HTMLElement>;
    pinValueMarker?: ElementRef;
    trackMarkerContainer?: ElementRef<HTMLElement>;
    /** View to model callback called when value changes */
    _onChanged: (value: any) => void;
    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
    _onTouched: () => any;
    private _createAdapter;
    private _foundation;
    constructor(_platform: Platform, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: any): void;
    setValue(value: number, isUserInput?: boolean): void;
    setDisabledState(disabled: boolean): void;
    private _onInput;
    private _onChange;
    private _initializeSelection;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}

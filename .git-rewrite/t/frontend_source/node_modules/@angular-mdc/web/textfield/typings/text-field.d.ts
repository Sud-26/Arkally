import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, DoCheck, InjectionToken, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Platform } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFloatingLabel } from '@angular-mdc/web/floating-label';
import { MdcLineRipple } from '@angular-mdc/web/line-ripple';
import { MdcNotchedOutline } from '@angular-mdc/web/notched-outline';
import { ErrorStateMatcher, CanUpdateErrorState, CanUpdateErrorStateCtor, MdcFormField, MdcFormFieldControl, MdcHelperText } from '@angular-mdc/web/form-field';
import { MdcTextFieldIcon } from './text-field-icon';
/**
 * Represents the default options for mdc-text-field that can be configured
 * using an `MDC_TEXT_FIELD_DEFAULT_OPTIONS` injection token.
 */
export interface MdcTextFieldDefaultOptions {
    outlined?: boolean;
}
/**
 * Injection token that can be used to configure the default options for all
 * mdc-text-field usage within an app.
 */
export declare const MDC_TEXT_FIELD_DEFAULT_OPTIONS: InjectionToken<MdcTextFieldDefaultOptions>;
export declare class MdcTextFieldBase {
    _defaultErrorStateMatcher: ErrorStateMatcher;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    ngControl: NgControl;
    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);
}
export declare const _MdcTextFieldMixinBase: CanUpdateErrorStateCtor & typeof MdcTextFieldBase;
export declare class MdcTextField extends _MdcTextFieldMixinBase implements AfterContentInit, AfterViewInit, DoCheck, OnDestroy, ControlValueAccessor, MdcFormFieldControl<any>, CanUpdateErrorState {
    private _platform;
    private _changeDetectorRef;
    elementRef: ElementRef<HTMLElement>;
    _defaultErrorStateMatcher: ErrorStateMatcher;
    private _parentFormField;
    private _ripple;
    ngControl: NgControl;
    private _defaults;
    private _uid;
    private _initialized;
    /** Time in milliseconds when the last touchstart event happened. */
    private _lastTouchStartEvent;
    controlType: string;
    label: string | null;
    maxlength?: number;
    minlength?: number;
    pattern?: string;
    autocomplete?: string;
    max?: number;
    min?: number;
    size?: number;
    step?: number;
    placeholder: string | null;
    tabIndex: number;
    id: string;
    private _id;
    /** Input type of the element. */
    type: string;
    private _type;
    outlined: boolean;
    private _outlined;
    disabled: boolean;
    private _disabled;
    required: boolean;
    private _required;
    readonly: boolean;
    private _readonly;
    fullwidth: boolean;
    private _fullwidth;
    dense: boolean;
    private _dense;
    helperText: MdcHelperText | null;
    private _helperText;
    /** Sets the Text Field valid or invalid. */
    valid: boolean | undefined;
    private _valid;
    /** Enables or disables the use of native validation. Use this for custom validation. */
    useNativeValidation: boolean;
    private _useNativeValidation;
    characterCounter: boolean;
    private _characterCounter;
    value: any;
    private _value;
    /** An object used to control when error messages are shown. */
    errorStateMatcher?: ErrorStateMatcher;
    readonly change: EventEmitter<any>;
    readonly input: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    _input: ElementRef<HTMLInputElement | HTMLTextAreaElement>;
    _lineRipple?: MdcLineRipple;
    _notchedOutline?: MdcNotchedOutline;
    _floatingLabel?: MdcFloatingLabel;
    _icons: QueryList<MdcTextFieldIcon>;
    /** View to model callback called when value changes */
    _onChange: (value: any) => void;
    /** View to model callback called when text field has been touched */
    _onTouched: () => void;
    readonly textarea: boolean;
    readonly focused: boolean;
    readonly leadingIcon: MdcTextFieldIcon | undefined;
    readonly trailingIcon: MdcTextFieldIcon | undefined;
    private _createAdapter;
    private _getInputAdapterMethods;
    private _getLabelAdapterMethods;
    private _getLineRippleAdapterMethods;
    private _getOutlineAdapterMethods;
    /** Returns a map of all subcomponents to subfoundations.*/
    private _getFoundationMap;
    private _foundation;
    constructor(_platform: Platform, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, _defaultErrorStateMatcher: ErrorStateMatcher, _parentFormField: MdcFormField, _ripple: MdcRipple, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaults: MdcTextFieldDefaultOptions);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    init(): void;
    onTextFieldInteraction(): void;
    onInputInteraction(evt: MouseEvent | TouchEvent): void;
    onInput(evt: KeyboardEvent): void;
    onFocus(): void;
    onChange(evt: Event): void;
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => {}): void;
    private _initializeValue;
    setValue(value: any, isUserInput?: boolean): void;
    isBadInput(): boolean;
    focus(): void;
    /** Initializes Text Field's internal state based on the environment state */
    private layout;
    /** Implemented as part of ControlValueAccessor. */
    setDisabledState(isDisabled: boolean): void;
    /** Set the default options here. */
    private _setDefaultOptions;
    private _checkCustomValidity;
    private _initHelperText;
    private _initRipple;
    private _destroy;
    private _isValid;
    private _hasFloatingLabel;
    private _getFloatingLabel;
    protected characterCounterFoundation(): any;
    private _getInputElement;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement;
}
